From 9a624b0ce0f5565a94663693f7690367c95c9d9b Mon Sep 17 00:00:00 2001
Message-Id: <9a624b0ce0f5565a94663693f7690367c95c9d9b.1673530580.git.stefan@agner.ch>
In-Reply-To: <c2dc2a9940d1f9809403d4dfb28e1f942ef90bab.1673530580.git.stefan@agner.ch>
References: <c2dc2a9940d1f9809403d4dfb28e1f942ef90bab.1673530580.git.stefan@agner.ch>
From: Stefan Agner <stefan@agner.ch>
Date: Fri, 16 Dec 2022 07:34:07 +0100
Subject: [PATCH 02/10] [rest] add active dataset API (#1658)

Support setting active dataset using HTTP PUT method. The body
needs to be formatted as a hex string representing the operational
dataset TLV encoded.

(cherry picked from commit 8e96ee8fe63f5de6c889b0deaf4d19fd92862e13)
---
 src/rest/json.cpp     |  5 +++
 src/rest/json.hpp     | 12 +++++++
 src/rest/resource.cpp | 79 +++++++++++++++++++++++++++++++++++++++++++
 src/rest/resource.hpp |  3 ++
 src/rest/types.hpp    |  2 ++
 5 files changed, 101 insertions(+)

diff --git a/src/rest/json.cpp b/src/rest/json.cpp
index f2c7c837ef..3a6c9aa08f 100644
--- a/src/rest/json.cpp
+++ b/src/rest/json.cpp
@@ -372,6 +372,11 @@ std::string Bytes2HexJsonString(const uint8_t *aBytes, uint8_t aLength)
     return ret;
 }
 
+int Hex2BytesJsonString(const std::string &aHexString, uint8_t *aBytes, uint8_t aMaxLength)
+{
+    return otbr::Utils::Hex2Bytes(aHexString.c_str(), aBytes, aMaxLength);
+}
+
 std::string Number2JsonString(const uint32_t &aNumber)
 {
     cJSON *     number = cJSON_CreateNumber(aNumber);
diff --git a/src/rest/json.hpp b/src/rest/json.hpp
index 2674510e7c..e9fd178201 100644
--- a/src/rest/json.hpp
+++ b/src/rest/json.hpp
@@ -70,6 +70,18 @@ std::string Number2JsonString(const uint32_t &aNumber);
  */
 std::string Bytes2HexJsonString(const uint8_t *aBytes, uint8_t aLength);
 
+/**
+ * This method parses a hex string as byte array.
+ *
+ * @param[in] aHexString String of bytes in hex.
+ * @param[in] aBytes     Byte array to write to. Must be at least  @p aMaxLength.
+ * @param[in] aMaxLength Maximum length to parse (in bytes).
+ *
+ * @returns Number of bytes effectively parsed.
+ *
+ */
+int Hex2BytesJsonString(const std::string &aHexString, uint8_t *aBytes, uint8_t aMaxLength);
+
 /**
  * This method formats a C string to a Json string and serialize it to a string.
  *
diff --git a/src/rest/resource.cpp b/src/rest/resource.cpp
index 5c4cf7afcf..fdd1171339 100644
--- a/src/rest/resource.cpp
+++ b/src/rest/resource.cpp
@@ -45,12 +45,15 @@
 #define OT_REST_RESOURCE_PATH_NODE_LEADERDATA "/node/leader-data"
 #define OT_REST_RESOURCE_PATH_NODE_NUMOFROUTER "/node/num-of-router"
 #define OT_REST_RESOURCE_PATH_NODE_EXTPANID "/node/ext-panid"
+#define OT_REST_RESOURCE_PATH_NODE_ACTIVE_DATASET_TLVS "/node/active-dataset-tlvs"
 #define OT_REST_RESOURCE_PATH_NETWORK "/networks"
 #define OT_REST_RESOURCE_PATH_NETWORK_CURRENT "/networks/current"
 #define OT_REST_RESOURCE_PATH_NETWORK_CURRENT_COMMISSION "/networks/commission"
 #define OT_REST_RESOURCE_PATH_NETWORK_CURRENT_PREFIX "/networks/current/prefix"
 
 #define OT_REST_HTTP_STATUS_200 "200 OK"
+#define OT_REST_HTTP_STATUS_202 "202 Accepted"
+#define OT_REST_HTTP_STATUS_400 "400 Bad Request"
 #define OT_REST_HTTP_STATUS_404 "404 Not Found"
 #define OT_REST_HTTP_STATUS_405 "405 Method Not Allowed"
 #define OT_REST_HTTP_STATUS_408 "408 Request Timeout"
@@ -87,6 +90,12 @@ static std::string GetHttpStatus(HttpStatusCode aErrorCode)
     case HttpStatusCode::kStatusOk:
         httpStatus = OT_REST_HTTP_STATUS_200;
         break;
+    case HttpStatusCode::kStatusAccepted:
+        httpStatus = OT_REST_HTTP_STATUS_202;
+        break;
+    case HttpStatusCode::kStatusBadRequest:
+        httpStatus = OT_REST_HTTP_STATUS_400;
+        break;
     case HttpStatusCode::kStatusResourceNotFound:
         httpStatus = OT_REST_HTTP_STATUS_404;
         break;
@@ -118,6 +127,7 @@ Resource::Resource(ControllerOpenThread *aNcp)
     mResourceMap.emplace(OT_REST_RESOURCE_PATH_NODE_LEADERDATA, &Resource::LeaderData);
     mResourceMap.emplace(OT_REST_RESOURCE_PATH_NODE_NUMOFROUTER, &Resource::NumOfRoute);
     mResourceMap.emplace(OT_REST_RESOURCE_PATH_NODE_EXTPANID, &Resource::ExtendedPanId);
+    mResourceMap.emplace(OT_REST_RESOURCE_PATH_NODE_ACTIVE_DATASET_TLVS, &Resource::ActiveDatasetTlvs);
     mResourceMap.emplace(OT_REST_RESOURCE_PATH_NODE_RLOC, &Resource::Rloc);
 
     // Resource callback handler
@@ -489,6 +499,75 @@ void Resource::Rloc(const Request &aRequest, Response &aResponse) const
     }
 }
 
+void Resource::GetActiveDatasetTlvs(Response &aResponse) const
+{
+    otOperationalDatasetTlvs datasetTlvs;
+    otError                  error = OT_ERROR_NONE;
+    std::string              body;
+    std::string              errorCode;
+
+    SuccessOrExit(error = otDatasetGetActiveTlvs(mInstance, &datasetTlvs));
+
+    body = Json::Bytes2HexJsonString(datasetTlvs.mTlvs, datasetTlvs.mLength);
+
+    aResponse.SetBody(body);
+    errorCode = GetHttpStatus(HttpStatusCode::kStatusOk);
+    aResponse.SetResponsCode(errorCode);
+
+exit:
+    if (error != OT_ERROR_NONE)
+    {
+        otbrLogWarning("Failed to get active dataset: %s", otThreadErrorToString(error));
+        ErrorHandler(aResponse, HttpStatusCode::kStatusInternalServerError);
+    }
+}
+
+void Resource::SetActiveDatasetTlvs(const Request &aRequest, Response &aResponse) const
+{
+    int                      ret;
+    otOperationalDatasetTlvs datasetTlvs;
+    otError                  error = OT_ERROR_NONE;
+    std::string              errorCode;
+
+    ret = Json::Hex2BytesJsonString(aRequest.GetBody(), datasetTlvs.mTlvs, OT_OPERATIONAL_DATASET_MAX_LENGTH);
+    if (ret < 0)
+    {
+        errorCode = GetHttpStatus(HttpStatusCode::kStatusBadRequest);
+        aResponse.SetResponsCode(errorCode);
+        ExitNow();
+    }
+    datasetTlvs.mLength = ret;
+
+    SuccessOrExit(error = otDatasetSetActiveTlvs(mInstance, &datasetTlvs));
+
+    errorCode = GetHttpStatus(HttpStatusCode::kStatusAccepted);
+    aResponse.SetResponsCode(errorCode);
+exit:
+    if (error != OT_ERROR_NONE)
+    {
+        otbrLogWarning("Failed to set active dataset: %s", otThreadErrorToString(error));
+        ErrorHandler(aResponse, HttpStatusCode::kStatusInternalServerError);
+    }
+}
+
+void Resource::ActiveDatasetTlvs(const Request &aRequest, Response &aResponse) const
+{
+    std::string errorCode;
+
+    switch (aRequest.GetMethod())
+    {
+    case HttpMethod::kGet:
+        GetActiveDatasetTlvs(aResponse);
+        break;
+    case HttpMethod::kPut:
+        SetActiveDatasetTlvs(aRequest, aResponse);
+        break;
+    default:
+        ErrorHandler(aResponse, HttpStatusCode::kStatusMethodNotAllowed);
+        break;
+    }
+}
+
 void Resource::DeleteOutDatedDiagnostic(void)
 {
     auto eraseIt = mDiagSet.begin();
diff --git a/src/rest/resource.hpp b/src/rest/resource.hpp
index a1871c014f..7c0d4c2e7d 100644
--- a/src/rest/resource.hpp
+++ b/src/rest/resource.hpp
@@ -113,6 +113,7 @@ private:
     void Rloc16(const Request &aRequest, Response &aResponse) const;
     void ExtendedPanId(const Request &aRequest, Response &aResponse) const;
     void Rloc(const Request &aRequest, Response &aResponse) const;
+    void ActiveDatasetTlvs(const Request &aRequest, Response &aResponse) const;
     void Diagnostic(const Request &aRequest, Response &aResponse) const;
     void HandleDiagnosticCallback(const Request &aRequest, Response &aResponse);
 
@@ -125,6 +126,8 @@ private:
     void GetDataRloc16(Response &aResponse) const;
     void GetDataExtendedPanId(Response &aResponse) const;
     void GetDataRloc(Response &aResponse) const;
+    void GetActiveDatasetTlvs(Response &aResponse) const;
+    void SetActiveDatasetTlvs(const Request &aRequest, Response &aResponse) const;
 
     void DeleteOutDatedDiagnostic(void);
     void UpdateDiag(std::string aKey, std::vector<otNetworkDiagTlv> &aDiag);
diff --git a/src/rest/types.hpp b/src/rest/types.hpp
index c20d9c1699..addc7d2cbb 100644
--- a/src/rest/types.hpp
+++ b/src/rest/types.hpp
@@ -59,6 +59,8 @@ enum class HttpMethod : std::uint8_t
 enum class HttpStatusCode : std::uint16_t
 {
     kStatusOk                  = 200,
+    kStatusAccepted            = 202,
+    kStatusBadRequest          = 400,
     kStatusResourceNotFound    = 404,
     kStatusMethodNotAllowed    = 405,
     kStatusRequestTimeout      = 408,
-- 
2.39.0

