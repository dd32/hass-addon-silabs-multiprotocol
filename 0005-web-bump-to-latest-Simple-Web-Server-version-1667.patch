From 2e2f6018e1ae48432f5b9eec97f7ca737a3cd871 Mon Sep 17 00:00:00 2001
Message-Id: <2e2f6018e1ae48432f5b9eec97f7ca737a3cd871.1673530580.git.stefan@agner.ch>
In-Reply-To: <c2dc2a9940d1f9809403d4dfb28e1f942ef90bab.1673530580.git.stefan@agner.ch>
References: <c2dc2a9940d1f9809403d4dfb28e1f942ef90bab.1673530580.git.stefan@agner.ch>
From: Stefan Agner <stefan@agner.ch>
Date: Thu, 22 Dec 2022 16:34:59 +0100
Subject: [PATCH 05/10] [web] bump to latest Simple-Web-Server version (#1667)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Bump Simple-Web-Server to the latest git commit. This fixes a compile
issue seen with GCC 12.2.0:

In file included from /home/sag/projects/openthread/ot-br-posix/src/web/web-service/web_server.cpp:42: /home/sag/projects/openthread/ot-br-posix/third_party/Simple-web-server/repo/server_http.hpp: In instantiation of ‘SimpleWeb::ServerBase<socket_type>::Request::Request(const socket_type&) [with socket_type = boost::asio::basic_stream_socket<boost::asio::ip::tcp>]’:
/home/sag/projects/openthread/ot-br-posix/third_party/Simple-web-server/repo/server_http.hpp:460:74:   required from here
/home/sag/projects/openthread/ot-br-posix/third_party/Simple-web-server/repo/server_http.hpp:119:57: error: member ‘SimpleWeb::ServerBase<boost::asio::basic_stream_socket<boost::asio::ip::tcp> >::Request::streambuf’ is used uninitialized [-Werror=uninitialized]
  119 |             Request(const socket_type &socket): content(streambuf) {
      |                                                         ^~~~~~~~~

(cherry picked from commit e4a428fa1d666942f6bc634911cc66ab47f81207)
---
 src/web/web-service/web_server.cpp            |    2 +-
 third_party/Simple-web-server/README.md       |    4 +-
 .../Simple-web-server/repo/CMakeLists.txt     |  115 +-
 third_party/Simple-web-server/repo/LICENSE    |    2 +-
 third_party/Simple-web-server/repo/README.md  |   86 +-
 .../repo/asio_compatibility.hpp               |  112 +
 .../Simple-web-server/repo/client_http.hpp    | 1279 ++++++---
 .../Simple-web-server/repo/client_https.hpp   |  286 +-
 third_party/Simple-web-server/repo/crypto.hpp |  417 +--
 .../Simple-web-server/repo/docs/Doxyfile      | 2537 +++++++++++++++++
 .../Simple-web-server/repo/docs/benchmarks.md |  210 ++
 .../Simple-web-server/repo/http_examples.cpp  |  426 +--
 .../Simple-web-server/repo/https_examples.cpp |  420 +--
 third_party/Simple-web-server/repo/mutex.hpp  |  107 +
 .../repo/paper/.markdown-format               |    0
 .../Simple-web-server/repo/paper/paper.bib    |   80 +
 .../Simple-web-server/repo/paper/paper.md     |  100 +
 .../Simple-web-server/repo/server_http.hpp    | 1225 +++++---
 .../Simple-web-server/repo/server_https.hpp   |  172 +-
 .../Simple-web-server/repo/status_code.hpp    |  176 ++
 .../repo/tests/CMakeLists.txt                 |   75 +-
 .../Simple-web-server/repo/tests/assert.hpp   |    9 +
 .../repo/tests/crypto_test.cpp                |  108 +-
 .../repo/tests/fuzzers/README.md              |    6 +
 ...e_semicolon_separated_attributes_parse.cpp |    6 +
 .../repo/tests/fuzzers/http_header_parse.cpp  |    9 +
 .../repo/tests/fuzzers/percent_decode.cpp     |    6 +
 .../repo/tests/fuzzers/query_string_parse.cpp |    6 +
 .../tests/fuzzers/request_message_parse.cpp   |   11 +
 .../tests/fuzzers/response_message_parse.cpp  |   11 +
 .../Simple-web-server/repo/tests/io_test.cpp  |  807 +++++-
 .../repo/tests/parse_test.cpp                 |  427 ++-
 .../repo/tests/status_code_test.cpp           |   32 +
 .../Simple-web-server/repo/utility.hpp        |  480 ++++
 34 files changed, 7786 insertions(+), 1963 deletions(-)
 create mode 100644 third_party/Simple-web-server/repo/asio_compatibility.hpp
 create mode 100644 third_party/Simple-web-server/repo/docs/Doxyfile
 create mode 100644 third_party/Simple-web-server/repo/docs/benchmarks.md
 create mode 100644 third_party/Simple-web-server/repo/mutex.hpp
 create mode 100644 third_party/Simple-web-server/repo/paper/.markdown-format
 create mode 100644 third_party/Simple-web-server/repo/paper/paper.bib
 create mode 100644 third_party/Simple-web-server/repo/paper/paper.md
 create mode 100644 third_party/Simple-web-server/repo/status_code.hpp
 create mode 100644 third_party/Simple-web-server/repo/tests/assert.hpp
 create mode 100644 third_party/Simple-web-server/repo/tests/fuzzers/README.md
 create mode 100644 third_party/Simple-web-server/repo/tests/fuzzers/http_header_field_value_semicolon_separated_attributes_parse.cpp
 create mode 100644 third_party/Simple-web-server/repo/tests/fuzzers/http_header_parse.cpp
 create mode 100644 third_party/Simple-web-server/repo/tests/fuzzers/percent_decode.cpp
 create mode 100644 third_party/Simple-web-server/repo/tests/fuzzers/query_string_parse.cpp
 create mode 100644 third_party/Simple-web-server/repo/tests/fuzzers/request_message_parse.cpp
 create mode 100644 third_party/Simple-web-server/repo/tests/fuzzers/response_message_parse.cpp
 create mode 100644 third_party/Simple-web-server/repo/tests/status_code_test.cpp
 create mode 100644 third_party/Simple-web-server/repo/utility.hpp

diff --git a/src/web/web-service/web_server.cpp b/src/web/web-service/web_server.cpp
index d1002b13c8..86cae38364 100644
--- a/src/web/web-service/web_server.cpp
+++ b/src/web/web-service/web_server.cpp
@@ -197,7 +197,7 @@ void DefaultResourceSend(const HttpServer &                           aServer,
         aResponse->write(&buffer[0], readLength);
         if (readLength == static_cast<std::streamsize>(buffer.size()))
         {
-            aServer.send(aResponse, [&aServer, aResponse, aIfStream](const boost::system::error_code &ec) {
+            aResponse->send([&aServer, aResponse, aIfStream](const boost::system::error_code &ec) {
                 if (!ec)
                 {
                     DefaultResourceSend(aServer, aResponse, aIfStream);
diff --git a/third_party/Simple-web-server/README.md b/third_party/Simple-web-server/README.md
index 6cd7b1ec07..50d1028700 100644
--- a/third_party/Simple-web-server/README.md
+++ b/third_party/Simple-web-server/README.md
@@ -2,7 +2,7 @@
 
 ## URL
 
-https://github.com/eidheim/Simple-Web-Server
+https://gitlab.com/eidheim/Simple-Web-Server
 
 ## Version
 
@@ -10,7 +10,7 @@ none
 
 ## Commit
 
-cfafbcbc7d74d91ffd24fd2fbf1a382d52133264
+2f29926dbbcd8a0425064d98c24f37ac50bd0b5b
 
 ## License
 
diff --git a/third_party/Simple-web-server/repo/CMakeLists.txt b/third_party/Simple-web-server/repo/CMakeLists.txt
index c94399b77b..f7b6c8379c 100644
--- a/third_party/Simple-web-server/repo/CMakeLists.txt
+++ b/third_party/Simple-web-server/repo/CMakeLists.txt
@@ -1,52 +1,95 @@
-cmake_minimum_required (VERSION 2.8.8)
-project (Simple-Web-Server)
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra")
+cmake_minimum_required(VERSION 3.0)
 
-include_directories(.)
+project(Simple-Web-Server)
+
+option(USE_STANDALONE_ASIO "set ON to use standalone Asio instead of Boost.Asio" OFF)
+if(CMAKE_SOURCE_DIR STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}")
+    option(BUILD_TESTING "set ON to build library tests" ON)
+else()
+    option(BUILD_TESTING "set ON to build library tests" OFF)
+endif()
+option(BUILD_FUZZING "set ON to build library fuzzers" OFF)
+option(USE_OPENSSL "set OFF to build without OpenSSL" ON)
+
+add_library(simple-web-server INTERFACE)
+
+target_include_directories(simple-web-server INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})
 
 find_package(Threads REQUIRED)
+target_link_libraries(simple-web-server INTERFACE ${CMAKE_THREAD_LIBS_INIT})
 
-set(BOOST_COMPONENTS system thread filesystem date_time)
-# Late 2017 TODO: remove the following checks and always use std::regex
-if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
-    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9)
-        set(BOOST_COMPONENTS ${BOOST_COMPONENTS} regex)
-        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_BOOST_REGEX")
+# TODO 2020 when Debian Jessie LTS ends:
+# Remove Boost system, thread, regex components; use Boost::<component> aliases; remove Boost target_include_directories
+if(USE_STANDALONE_ASIO)
+    target_compile_definitions(simple-web-server INTERFACE ASIO_STANDALONE)
+    find_path(ASIO_PATH asio.hpp)
+    if(NOT ASIO_PATH)
+        message(FATAL_ERROR "Standalone Asio not found")
+    else()
+        target_include_directories(simple-web-server INTERFACE ${ASIO_PATH})
     endif()
+else()
+    find_package(Boost 1.53.0 COMPONENTS system thread REQUIRED)
+    target_link_libraries(simple-web-server INTERFACE ${Boost_LIBRARIES})
+    target_include_directories(simple-web-server INTERFACE ${Boost_INCLUDE_DIR})
+    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9)
+        target_compile_definitions(simple-web-server INTERFACE USE_BOOST_REGEX)
+        find_package(Boost 1.53.0 COMPONENTS regex REQUIRED)
+        target_link_libraries(simple-web-server INTERFACE ${Boost_LIBRARIES})
+        target_include_directories(simple-web-server INTERFACE ${Boost_INCLUDE_DIR})
+    endif()
+endif()
+if(WIN32)
+    target_link_libraries(simple-web-server INTERFACE ws2_32 wsock32)
 endif()
-find_package(Boost 1.53.0 COMPONENTS ${BOOST_COMPONENTS} REQUIRED)
-include_directories(SYSTEM ${Boost_INCLUDE_DIR})
 
 if(APPLE)
-    set(OPENSSL_ROOT_DIR "/usr/local/opt/openssl")
+    if(EXISTS /usr/local/opt/openssl)
+        set(OPENSSL_ROOT_DIR /usr/local/opt/openssl)
+    elseif(EXISTS /opt/homebrew/opt/openssl)
+        set(OPENSSL_ROOT_DIR /opt/homebrew/opt/openssl)
+    endif()
+endif()
+if(USE_OPENSSL)
+    find_package(OpenSSL)
+endif()
+if(OPENSSL_FOUND)
+    target_compile_definitions(simple-web-server INTERFACE HAVE_OPENSSL)
+    target_link_libraries(simple-web-server INTERFACE ${OPENSSL_LIBRARIES})
+    target_include_directories(simple-web-server INTERFACE ${OPENSSL_INCLUDE_DIR})
 endif()
 
-add_executable(http_examples http_examples.cpp)
-target_link_libraries(http_examples ${Boost_LIBRARIES})
-target_link_libraries(http_examples ${CMAKE_THREAD_LIBS_INIT})
-
-#TODO: add requirement for version 1.0.1g (can it be done in one line?)
-find_package(OpenSSL)
+# If Simple-Web-Server is not a sub-project:
+if(CMAKE_SOURCE_DIR STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}")
+    if(NOT MSVC)
+        add_compile_options(-std=c++11 -Wall -Wextra)
+        if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+            add_compile_options(-Wthread-safety)
+        endif()
+    else()
+        add_compile_options(/W1)
+    endif()
 
-if(OPENSSL_FOUND)
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHAVE_OPENSSL")
-    target_link_libraries(http_examples ${OPENSSL_LIBRARIES})
-    include_directories(SYSTEM ${OPENSSL_INCLUDE_DIR})
+    find_package(Boost 1.53.0 COMPONENTS system thread filesystem)
+    if(Boost_FOUND)
+        add_executable(http_examples http_examples.cpp)
+        target_link_libraries(http_examples simple-web-server)
+        target_link_libraries(http_examples ${Boost_LIBRARIES})
+        target_include_directories(http_examples PRIVATE ${Boost_INCLUDE_DIR})
+        if(OPENSSL_FOUND)
+            add_executable(https_examples https_examples.cpp)
+            target_link_libraries(https_examples simple-web-server)
+            target_link_libraries(https_examples ${Boost_LIBRARIES})
+            target_include_directories(https_examples PRIVATE ${Boost_INCLUDE_DIR})
+        endif()
+     endif()
 
-    add_executable(https_examples https_examples.cpp)
-    target_link_libraries(https_examples ${Boost_LIBRARIES})
-    target_link_libraries(https_examples ${OPENSSL_LIBRARIES})
-    target_link_libraries(https_examples ${CMAKE_THREAD_LIBS_INIT})
+    install(FILES asio_compatibility.hpp server_http.hpp client_http.hpp server_https.hpp client_https.hpp crypto.hpp utility.hpp status_code.hpp mutex.hpp DESTINATION include/simple-web-server)
 endif()
 
-if(MSYS) #TODO: Is MSYS true when MSVC is true?
-    target_link_libraries(http_examples ws2_32 wsock32)
-    if(OPENSSL_FOUND)
-        target_link_libraries(https_examples ws2_32 wsock32)
+if(BUILD_TESTING OR BUILD_FUZZING)
+    if(BUILD_TESTING)
+        enable_testing()
     endif()
+    add_subdirectory(tests)
 endif()
-
-enable_testing()
-add_subdirectory(tests)
-
-install(FILES server_http.hpp client_http.hpp server_https.hpp client_https.hpp DESTINATION include/simple-web-server)
diff --git a/third_party/Simple-web-server/repo/LICENSE b/third_party/Simple-web-server/repo/LICENSE
index 7bfd646002..cecca18068 100644
--- a/third_party/Simple-web-server/repo/LICENSE
+++ b/third_party/Simple-web-server/repo/LICENSE
@@ -1,6 +1,6 @@
 The MIT License (MIT)
 
-Copyright (c) 2014-2016 Ole Christian Eidheim
+Copyright (c) 2014-2020 Ole Christian Eidheim
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
diff --git a/third_party/Simple-web-server/repo/README.md b/third_party/Simple-web-server/repo/README.md
index a7e15d72b3..de81503b45 100644
--- a/third_party/Simple-web-server/repo/README.md
+++ b/third_party/Simple-web-server/repo/README.md
@@ -1,54 +1,90 @@
-Simple-Web-Server [![Build Status](https://travis-ci.org/eidheim/Simple-Web-Server.svg?branch=master)](https://travis-ci.org/eidheim/Simple-Web-Server)
-=================
+# Simple-Web-Server
 
-A very simple, fast, multithreaded, platform independent HTTP and HTTPS server and client library implemented using C++11 and Boost.Asio. Created to be an easy way to make REST resources available from C++ applications. 
+A very simple, fast, multithreaded, platform independent HTTP and HTTPS server and client library implemented using C++11 and Asio (both Boost.Asio and standalone Asio can be used). Created to be an easy way to make REST resources available from C++ applications. 
 
-See https://github.com/eidheim/Simple-WebSocket-Server for an easy way to make WebSocket/WebSocket Secure endpoints in C++. Also, feel free to check out the new C++ IDE supporting C++11/14/17: https://github.com/cppit/jucipp. 
+See https://gitlab.com/eidheim/Simple-WebSocket-Server for an easy way to make WebSocket/WebSocket Secure endpoints in C++. Also, feel free to check out the new C++ IDE supporting C++11/14/17: https://gitlab.com/cppit/jucipp. 
 
-### Features
+## Features
 
 * Asynchronous request handling
 * Thread pool if needed
 * Platform independent
-* HTTPS support
-* HTTP persistent connection (for HTTP/1.1)
-* Client supports chunked transfer encoding
-* Timeouts, if any of Server::timeout_request and Server::timeout_content are >0 (default: Server::timeout_request=5 seconds, and Server::timeout_content=300 seconds)
-* Simple way to add REST resources using regex for path, and anonymous functions
+* HTTP/1.1 supported, including persistent connections
+* HTTPS supported
+* Chunked transfer encoding and server-sent events
+* Can set timeouts for request/response and content
+* Can set max request/response size
+* Sending outgoing messages is thread safe
+* Client creates necessary connections and perform reconnects when needed
 
-### Usage
+See also [benchmarks](https://gitlab.com/eidheim/Simple-Web-Server/blob/master/docs/benchmarks.md) for a performance comparisons to a few other HTTP libraries.
 
-See http_examples.cpp or https_examples.cpp for example usage. 
+## Usage
 
-See particularly the JSON-POST (using Boost.PropertyTree) and the GET /match/[number] examples, which are most relevant.
+See [http_examples.cpp](https://gitlab.com/eidheim/Simple-Web-Server/blob/master/http_examples.cpp) or
+[https_examples.cpp](https://gitlab.com/eidheim/Simple-Web-Server/blob/master/https_examples.cpp) for example usage.
+The following server resources are setup using regular expressions to match request paths:
+* `POST /string` - responds with the posted string.
+* `POST /json` - parses the request content as JSON, and responds with some of the parsed values.
+* `GET /info` - responds with information extracted from the request.
+* `GET /match/([0-9]+)` - matches for instance `/match/123` and responds with the matched number `123`.
+* `GET /work` - starts a thread, simulating heavy work, and responds when the work is done.
+* `GET` - a special default_resource handler is called when a request path does not match any of the above resources.
+This resource responds with the content of files in the `web/`-folder if the request path identifies one of these files.
 
-### Dependencies
+[Documentation](https://eidheim.gitlab.io/Simple-Web-Server/annotated.html) is also available, generated from the master branch.
 
-* Boost C++ libraries
-* For HTTPS: OpenSSL libraries 
+## Dependencies
 
-### Compile and run
+* Boost.Asio or standalone Asio
+* Boost is required to compile the examples
+* For HTTPS: OpenSSL libraries
+
+Installation instructions for the dependencies needed to compile the examples on a selection of platforms can be seen below.
+Default build with Boost.Asio is assumed. Turn on CMake option `USE_STANDALONE_ASIO` to instead use standalone Asio.
+
+### Debian based distributions
+
+```sh
+sudo apt-get install libssl-dev libboost-filesystem-dev libboost-thread-dev
+```
+
+### Arch Linux based distributions
+
+```sh
+sudo pacman -S boost
+```
+
+### MacOS
+
+```sh
+brew install openssl boost
+```
+
+## Compile and run
 
 Compile with a C++11 compliant compiler:
 ```sh
-mkdir build
-cd build
-cmake ..
-make
-cd ..
+cmake -H. -Bbuild
+cmake --build build
 ```
 
-#### HTTP
+### HTTP
 
 Run the server and client examples: `./build/http_examples`
 
 Direct your favorite browser to for instance http://localhost:8080/
 
-#### HTTPS
+### HTTPS
 
-Before running the server, an RSA private key (server.key) and an SSL certificate (server.crt) must be created. Follow, for instance, the instructions given here (for a self-signed certificate): http://www.akadia.com/services/ssh_test_certificate.html
+Before running the server, an RSA private key (server.key) and an SSL certificate (server.crt) must be created.
 
 Run the server and client examples: `./build/https_examples`
 
 Direct your favorite browser to for instance https://localhost:8080/
 
+## Contributing
+
+Contributions are welcome, either by creating an issue or a merge request.
+However, before you create a new issue or merge request, please search for previous similar issues or requests.
+A response will normally be given within a few days.
diff --git a/third_party/Simple-web-server/repo/asio_compatibility.hpp b/third_party/Simple-web-server/repo/asio_compatibility.hpp
new file mode 100644
index 0000000000..dc086531f0
--- /dev/null
+++ b/third_party/Simple-web-server/repo/asio_compatibility.hpp
@@ -0,0 +1,112 @@
+#ifndef SIMPLE_WEB_ASIO_COMPATIBILITY_HPP
+#define SIMPLE_WEB_ASIO_COMPATIBILITY_HPP
+
+#include <memory>
+
+#ifdef ASIO_STANDALONE
+#include <asio.hpp>
+#include <asio/steady_timer.hpp>
+namespace SimpleWeb {
+  namespace error = asio::error;
+  using error_code = std::error_code;
+  using errc = std::errc;
+  using system_error = std::system_error;
+  namespace make_error_code = std;
+} // namespace SimpleWeb
+#else
+#include <boost/asio.hpp>
+#include <boost/asio/steady_timer.hpp>
+namespace SimpleWeb {
+  namespace asio = boost::asio;
+  namespace error = asio::error;
+  using error_code = boost::system::error_code;
+  namespace errc = boost::system::errc;
+  using system_error = boost::system::system_error;
+  namespace make_error_code = boost::system::errc;
+} // namespace SimpleWeb
+#endif
+
+namespace SimpleWeb {
+#if(ASIO_STANDALONE && ASIO_VERSION >= 101300) || BOOST_ASIO_VERSION >= 101300
+  using io_context = asio::io_context;
+  using resolver_results = asio::ip::tcp::resolver::results_type;
+  using async_connect_endpoint = asio::ip::tcp::endpoint;
+
+#if(ASIO_STANDALONE && ASIO_VERSION >= 101800) || BOOST_ASIO_VERSION >= 101800
+  using strand = asio::strand<asio::any_io_executor>;
+#else
+  using strand = asio::strand<asio::executor>;
+#endif
+
+  template <typename handler_type>
+  inline void post(io_context &context, handler_type &&handler) {
+    asio::post(context, std::forward<handler_type>(handler));
+  }
+  inline void restart(io_context &context) noexcept {
+    context.restart();
+  }
+  inline asio::ip::address make_address(const std::string &str) noexcept {
+    return asio::ip::make_address(str);
+  }
+  template <typename socket_type, typename duration_type>
+  inline std::unique_ptr<asio::steady_timer> make_steady_timer(socket_type &socket, std::chrono::duration<duration_type> duration) {
+    return std::unique_ptr<asio::steady_timer>(new asio::steady_timer(socket.get_executor(), duration));
+  }
+  template <typename handler_type>
+  inline void async_resolve(asio::ip::tcp::resolver &resolver, const std::pair<std::string, std::string> &host_port, handler_type &&handler) {
+    resolver.async_resolve(host_port.first, host_port.second, std::forward<handler_type>(handler));
+  }
+  inline asio::executor_work_guard<io_context::executor_type> make_work_guard(io_context &context) {
+    return asio::make_work_guard(context);
+  }
+  template <typename socket_type>
+  inline asio::basic_socket<asio::ip::tcp>::executor_type get_executor(socket_type &socket) {
+    return socket.get_executor();
+  }
+  template <typename execution_context, typename handler_type>
+  inline asio::executor_binder<typename asio::decay<handler_type>::type, typename execution_context::executor_type> bind_executor(strand &strand, handler_type &&handler) {
+    return asio::bind_executor(strand, std::forward<handler_type>(handler));
+  }
+#else
+  using io_context = asio::io_service;
+  using resolver_results = asio::ip::tcp::resolver::iterator;
+  using async_connect_endpoint = asio::ip::tcp::resolver::iterator;
+  using strand = asio::io_service::strand;
+
+  template <typename handler_type>
+  inline void post(io_context &context, handler_type &&handler) {
+    context.post(std::forward<handler_type>(handler));
+  }
+  template <typename handler_type>
+  inline void post(strand &strand, handler_type &&handler) {
+    strand.post(std::forward<handler_type>(handler));
+  }
+  inline void restart(io_context &context) noexcept {
+    context.reset();
+  }
+  inline asio::ip::address make_address(const std::string &str) noexcept {
+    return asio::ip::address::from_string(str);
+  }
+  template <typename socket_type, typename duration_type>
+  inline std::unique_ptr<asio::steady_timer> make_steady_timer(socket_type &socket, std::chrono::duration<duration_type> duration) {
+    return std::unique_ptr<asio::steady_timer>(new asio::steady_timer(socket.get_io_service(), duration));
+  }
+  template <typename handler_type>
+  inline void async_resolve(asio::ip::tcp::resolver &resolver, const std::pair<std::string, std::string> &host_port, handler_type &&handler) {
+    resolver.async_resolve(asio::ip::tcp::resolver::query(host_port.first, host_port.second), std::forward<handler_type>(handler));
+  }
+  inline io_context::work make_work_guard(io_context &context) {
+    return io_context::work(context);
+  }
+  template <typename socket_type>
+  inline io_context &get_executor(socket_type &socket) {
+    return socket.get_io_service();
+  }
+  template <typename handler_type>
+  inline asio::detail::wrapped_handler<strand, handler_type, asio::detail::is_continuation_if_running> bind_executor(strand &strand, handler_type &&handler) {
+    return strand.wrap(std::forward<handler_type>(handler));
+  }
+#endif
+} // namespace SimpleWeb
+
+#endif /* SIMPLE_WEB_ASIO_COMPATIBILITY_HPP */
diff --git a/third_party/Simple-web-server/repo/client_http.hpp b/third_party/Simple-web-server/repo/client_http.hpp
index b77fae7596..e12fcd2290 100644
--- a/third_party/Simple-web-server/repo/client_http.hpp
+++ b/third_party/Simple-web-server/repo/client_http.hpp
@@ -1,440 +1,879 @@
-#ifndef CLIENT_HTTP_HPP
-#define	CLIENT_HTTP_HPP
+#ifndef SIMPLE_WEB_CLIENT_HTTP_HPP
+#define SIMPLE_WEB_CLIENT_HTTP_HPP
 
-#include <boost/asio.hpp>
-#include <boost/utility/string_ref.hpp>
-#include <boost/algorithm/string/predicate.hpp>
-#include <boost/functional/hash.hpp>
-
-#include <unordered_map>
-#include <map>
+#include "asio_compatibility.hpp"
+#include "mutex.hpp"
+#include "utility.hpp"
+#include <future>
+#include <limits>
 #include <random>
-#include <mutex>
-#include <type_traits>
-
-#ifndef CASE_INSENSITIVE_EQUALS_AND_HASH
-#define CASE_INSENSITIVE_EQUALS_AND_HASH
-//Based on http://www.boost.org/doc/libs/1_60_0/doc/html/unordered/hash_equality.html
-class case_insensitive_equals {
-public:
-  bool operator()(const std::string &key1, const std::string &key2) const {
-    return boost::algorithm::iequals(key1, key2);
-  }
-};
-class case_insensitive_hash {
-public:
-  size_t operator()(const std::string &key) const {
-    std::size_t seed=0;
-    for(auto &c: key)
-      boost::hash_combine(seed, std::tolower(c));
-    return seed;
-  }
-};
+#include <unordered_set>
+#include <vector>
+
+namespace SimpleWeb {
+  class HeaderEndMatch {
+    int crlfcrlf = 0;
+    int lflf = 0;
+
+  public:
+    /// Match condition for asio::read_until to match both standard and non-standard HTTP header endings.
+    std::pair<asio::buffers_iterator<asio::const_buffers_1>, bool> operator()(asio::buffers_iterator<asio::const_buffers_1> begin, asio::buffers_iterator<asio::const_buffers_1> end) {
+      auto it = begin;
+      for(; it != end; ++it) {
+        if(*it == '\n') {
+          if(crlfcrlf == 1)
+            ++crlfcrlf;
+          else if(crlfcrlf == 2)
+            crlfcrlf = 0;
+          else if(crlfcrlf == 3)
+            return {++it, true};
+          if(lflf == 0)
+            ++lflf;
+          else if(lflf == 1)
+            return {++it, true};
+        }
+        else if(*it == '\r') {
+          if(crlfcrlf == 0)
+            ++crlfcrlf;
+          else if(crlfcrlf == 2)
+            ++crlfcrlf;
+          else
+            crlfcrlf = 0;
+          lflf = 0;
+        }
+        else {
+          crlfcrlf = 0;
+          lflf = 0;
+        }
+      }
+      return {it, false};
+    }
+  };
+} // namespace SimpleWeb
+#ifndef ASIO_STANDALONE
+namespace boost {
+#endif
+  namespace asio {
+    template <>
+    struct is_match_condition<SimpleWeb::HeaderEndMatch> : public std::true_type {};
+  } // namespace asio
+#ifndef ASIO_STANDALONE
+} // namespace boost
 #endif
 
 namespace SimpleWeb {
-    template <class socket_type>
-    class Client;
-    
-    template <class socket_type>
-    class ClientBase {
+  template <class socket_type>
+  class Client;
+
+  template <class socket_type>
+  class ClientBase {
+  public:
+    class Content : public std::istream {
+      friend class ClientBase<socket_type>;
+
     public:
-        virtual ~ClientBase() {}
-
-        class Response {
-            friend class ClientBase<socket_type>;
-            friend class Client<socket_type>;
-        public:
-            std::string http_version, status_code;
-
-            std::istream content;
-
-            std::unordered_multimap<std::string, std::string, case_insensitive_hash, case_insensitive_equals> header;
-            
-        private:
-            boost::asio::streambuf content_buffer;
-            
-            Response(): content(&content_buffer) {}
-        };
-        
-        class Config {
-            friend class ClientBase<socket_type>;
-        private:
-            Config() {}
-        public:
-            /// Set timeout on requests in seconds. Default value: 0 (no timeout). 
-            size_t timeout=0;
-            /// Set connect timeout in seconds. Default value: 0 (Config::timeout is then used instead).
-            size_t timeout_connect=0;
-            /// Set proxy server (server:port)
-            std::string proxy_server;
-        };
-        
-        /// Set before calling request
-        Config config;
-        
-        std::shared_ptr<Response> request(const std::string& request_type, const std::string& path="/", boost::string_ref content="",
-                const std::map<std::string, std::string>& header=std::map<std::string, std::string>()) {
-            auto corrected_path=path;
-            if(corrected_path=="")
-                corrected_path="/";
-            if(!config.proxy_server.empty() && std::is_same<socket_type, boost::asio::ip::tcp::socket>::value)
-                corrected_path="http://"+host+':'+std::to_string(port)+corrected_path;
-            
-            boost::asio::streambuf write_buffer;
-            std::ostream write_stream(&write_buffer);
-            write_stream << request_type << " " << corrected_path << " HTTP/1.1\r\n";
-            write_stream << "Host: " << host << "\r\n";
-            for(auto& h: header) {
-                write_stream << h.first << ": " << h.second << "\r\n";
-            }
-            if(content.size()>0)
-                write_stream << "Content-Length: " << content.size() << "\r\n";
-            write_stream << "\r\n";
-            
-            connect();
-            
-            auto timer=get_timeout_timer();
-            boost::asio::async_write(*socket, write_buffer,
-                                     [this, &content, timer](const boost::system::error_code &ec, size_t /*bytes_transferred*/) {
-                if(timer)
-                    timer->cancel();
-                if(!ec) {
-                    if(!content.empty()) {
-                        auto timer=get_timeout_timer();
-                        boost::asio::async_write(*socket, boost::asio::buffer(content.data(), content.size()),
-                                             [this, timer](const boost::system::error_code &ec, size_t /*bytes_transferred*/) {
-                            if(timer)
-                                timer->cancel();
-                            if(ec) {
-                                std::lock_guard<std::mutex> lock(socket_mutex);
-                                this->socket=nullptr;
-                                throw boost::system::system_error(ec);
-                            }
-                        });
-                    }
-                }
-                else {
-                    std::lock_guard<std::mutex> lock(socket_mutex);
-                    socket=nullptr;
-                    throw boost::system::system_error(ec);
-                }
-            });
-            io_service.reset();
-            io_service.run();
-            
-            return request_read();
+      std::size_t size() noexcept {
+        return streambuf.size();
+      }
+      /// Convenience function to return content as a string.
+      std::string string() noexcept {
+        return std::string(asio::buffers_begin(streambuf.data()), asio::buffers_end(streambuf.data()));
+      }
+
+      /// When true, this is the last response content part from server for the current request.
+      bool end = true;
+
+    private:
+      asio::streambuf &streambuf;
+      Content(asio::streambuf &streambuf) noexcept : std::istream(&streambuf), streambuf(streambuf) {}
+    };
+
+  protected:
+    class Connection;
+
+  public:
+    class Response {
+      friend class ClientBase<socket_type>;
+      friend class Client<socket_type>;
+
+      class Shared {
+      public:
+        std::string http_version, status_code;
+
+        CaseInsensitiveMultimap header;
+      };
+
+      asio::streambuf streambuf;
+
+      std::shared_ptr<Shared> shared;
+
+      std::weak_ptr<Connection> connection_weak;
+
+      Response(std::size_t max_response_streambuf_size, const std::shared_ptr<Connection> &connection_) noexcept
+          : streambuf(max_response_streambuf_size), shared(new Shared()), connection_weak(connection_), http_version(shared->http_version), status_code(shared->status_code), header(shared->header), content(streambuf) {}
+
+      /// Constructs a response object that has empty content, but otherwise is equal to the response parameter
+      Response(const Response &response) noexcept
+          : streambuf(response.streambuf.max_size()), shared(response.shared), connection_weak(response.connection_weak), http_version(shared->http_version), status_code(shared->status_code), header(shared->header), content(streambuf) {}
+
+    public:
+      std::string &http_version, &status_code;
+
+      CaseInsensitiveMultimap &header;
+
+      Content content;
+
+      /// Closes the connection to the server, preventing further response content parts from server.
+      void close() noexcept {
+        if(auto connection = this->connection_weak.lock())
+          connection->close();
+      }
+    };
+
+    class Config {
+      friend class ClientBase<socket_type>;
+
+    private:
+      Config() noexcept {}
+
+    public:
+      /// Set timeout on requests in seconds. Default value: 0 (no timeout).
+      long timeout = 0;
+      /// Set connect timeout in seconds. Default value: 0 (Config::timeout is then used instead).
+      long timeout_connect = 0;
+      /// Maximum size of response stream buffer. Defaults to architecture maximum.
+      /// Reaching this limit will result in a message_size error code.
+      std::size_t max_response_streambuf_size = (std::numeric_limits<std::size_t>::max)();
+      /// Set proxy server (server:port)
+      std::string proxy_server;
+    };
+
+  protected:
+    class Connection : public std::enable_shared_from_this<Connection> {
+    public:
+      template <typename... Args>
+      Connection(std::shared_ptr<ScopeRunner> handler_runner_, Args &&...args) noexcept
+          : handler_runner(std::move(handler_runner_)), socket(new socket_type(std::forward<Args>(args)...)) {}
+
+      std::shared_ptr<ScopeRunner> handler_runner;
+
+      std::unique_ptr<socket_type> socket; // Socket must be unique_ptr since asio::ssl::stream<asio::ip::tcp::socket> is not movable
+      bool in_use = false;
+      bool attempt_reconnect = true;
+
+      std::unique_ptr<asio::steady_timer> timer;
+
+      void close() noexcept {
+        error_code ec;
+        socket->lowest_layer().shutdown(asio::ip::tcp::socket::shutdown_both, ec);
+        socket->lowest_layer().cancel(ec);
+      }
+
+      void set_timeout(long seconds) noexcept {
+        if(seconds == 0) {
+          timer = nullptr;
+          return;
         }
-        
-        std::shared_ptr<Response> request(const std::string& request_type, const std::string& path, std::iostream& content,
-                const std::map<std::string, std::string>& header=std::map<std::string, std::string>()) {
-            auto corrected_path=path;
-            if(corrected_path=="")
-                corrected_path="/";
-            if(!config.proxy_server.empty() && std::is_same<socket_type, boost::asio::ip::tcp::socket>::value)
-                corrected_path="http://"+host+':'+std::to_string(port)+corrected_path;
-            
-            content.seekp(0, std::ios::end);
-            auto content_length=content.tellp();
-            content.seekp(0, std::ios::beg);
-            
-            boost::asio::streambuf write_buffer;
-            std::ostream write_stream(&write_buffer);
-            write_stream << request_type << " " << corrected_path << " HTTP/1.1\r\n";
-            write_stream << "Host: " << host << "\r\n";
-            for(auto& h: header) {
-                write_stream << h.first << ": " << h.second << "\r\n";
-            }
-            if(content_length>0)
-                write_stream << "Content-Length: " << content_length << "\r\n";
-            write_stream << "\r\n";
-            if(content_length>0)
-                write_stream << content.rdbuf();
-            
-            connect();
-            
-            auto timer=get_timeout_timer();
-            boost::asio::async_write(*socket, write_buffer,
-                                     [this, timer](const boost::system::error_code &ec, size_t /*bytes_transferred*/) {
-                if(timer)
-                    timer->cancel();
-                if(ec) {
-                    std::lock_guard<std::mutex> lock(socket_mutex);
-                    socket=nullptr;
-                    throw boost::system::system_error(ec);
-                }
-            });
-            io_service.reset();
-            io_service.run();
-            
-            return request_read();
+        timer = make_steady_timer(*socket, std::chrono::seconds(seconds));
+        std::weak_ptr<Connection> self_weak(this->shared_from_this()); // To avoid keeping Connection instance alive longer than needed
+        timer->async_wait([self_weak](const error_code &ec) {
+          if(!ec) {
+            if(auto self = self_weak.lock())
+              self->close();
+          }
+        });
+      }
+
+      void cancel_timeout() noexcept {
+        if(timer) {
+          try {
+            timer->cancel();
+          }
+          catch(...) {
+          }
         }
-        
-        void close() {
-            std::lock_guard<std::mutex> lock(socket_mutex);
-            if(socket) {
-                boost::system::error_code ec;
-                socket->lowest_layer().shutdown(boost::asio::ip::tcp::socket::shutdown_both, ec);
-                socket->lowest_layer().close();
+      }
+    };
+
+    class Session {
+    public:
+      Session(std::size_t max_response_streambuf_size, std::shared_ptr<Connection> connection_, std::unique_ptr<asio::streambuf> request_streambuf_) noexcept
+          : connection(std::move(connection_)), request_streambuf(std::move(request_streambuf_)), response(new Response(max_response_streambuf_size, connection)) {}
+
+      std::shared_ptr<Connection> connection;
+      std::unique_ptr<asio::streambuf> request_streambuf;
+      std::shared_ptr<Response> response;
+      std::function<void(const error_code &)> callback;
+    };
+
+  public:
+    /// Set before calling a request function.
+    Config config;
+
+    /// If you want to reuse an already created asio::io_service, store its pointer here before calling a request function.
+    /// Do not set when using synchronous request functions.
+    std::shared_ptr<io_context> io_service;
+
+    /// Convenience function to perform synchronous request. The io_service is started in this function.
+    /// Should not be combined with asynchronous request functions.
+    /// If you reuse the io_service for other tasks, use the asynchronous request functions instead.
+    /// When requesting Server-Sent Events: will throw on error::eof, please use asynchronous request functions instead.
+    std::shared_ptr<Response> request(const std::string &method, const std::string &path = {"/"}, string_view content = {}, const CaseInsensitiveMultimap &header = CaseInsensitiveMultimap()) {
+      return sync_request(method, path, content, header);
+    }
+
+    /// Convenience function to perform synchronous request. The io_service is started in this function.
+    /// Should not be combined with asynchronous request functions.
+    /// If you reuse the io_service for other tasks, use the asynchronous request functions instead.
+    /// When requesting Server-Sent Events: will throw on error::eof, please use asynchronous request functions instead.
+    std::shared_ptr<Response> request(const std::string &method, const std::string &path, std::istream &content, const CaseInsensitiveMultimap &header = CaseInsensitiveMultimap()) {
+      return sync_request(method, path, content, header);
+    }
+
+    /// Asynchronous request where running Client's io_service is required.
+    /// Do not use concurrently with the synchronous request functions.
+    /// When requesting Server-Sent Events: request_callback might be called more than twice, first call with empty contents on open, and with ec = error::eof on last call
+    void request(const std::string &method, const std::string &path, string_view content, const CaseInsensitiveMultimap &header,
+                 std::function<void(std::shared_ptr<Response>, const error_code &)> &&request_callback_) {
+      auto session = std::make_shared<Session>(config.max_response_streambuf_size, get_connection(), create_request_header(method, path, header));
+      std::weak_ptr<Session> session_weak(session); // To avoid keeping session alive longer than needed
+      auto request_callback = std::make_shared<std::function<void(std::shared_ptr<Response>, const error_code &)>>(std::move(request_callback_));
+      session->callback = [this, session_weak, request_callback](const error_code &ec) {
+        if(auto session = session_weak.lock()) {
+          if(session->response->content.end) {
+            session->connection->cancel_timeout();
+            session->connection->in_use = false;
+          }
+          {
+            LockGuard lock(this->connections_mutex);
+
+            // Remove unused connections, but keep one open for HTTP persistent connection:
+            std::size_t unused_connections = 0;
+            for(auto it = this->connections.begin(); it != this->connections.end();) {
+              if(ec && session->connection == *it)
+                it = this->connections.erase(it);
+              else if((*it)->in_use)
+                ++it;
+              else {
+                ++unused_connections;
+                if(unused_connections > 1)
+                  it = this->connections.erase(it);
+                else
+                  ++it;
+              }
             }
+          }
+
+          if(*request_callback)
+            (*request_callback)(session->response, ec);
         }
-        
-    protected:
-        boost::asio::io_service io_service;
-        boost::asio::ip::tcp::resolver resolver;
-        
-        std::unique_ptr<socket_type> socket;
-        std::mutex socket_mutex;
-        
-        std::string host;
-        unsigned short port;
-                
-        ClientBase(const std::string& host_port, unsigned short default_port) : resolver(io_service) {
-            auto parsed_host_port=parse_host_port(host_port, default_port);
-            host=parsed_host_port.first;
-            port=parsed_host_port.second;
+      };
+
+      std::ostream write_stream(session->request_streambuf.get());
+      if(content.size() > 0) {
+        auto header_it = header.find("Content-Length");
+        if(header_it == header.end()) {
+          header_it = header.find("Transfer-Encoding");
+          if(header_it == header.end() || header_it->second != "chunked")
+            write_stream << "Content-Length: " << content.size() << "\r\n";
         }
-        
-        std::pair<std::string, unsigned short> parse_host_port(const std::string &host_port, unsigned short default_port) {
-            std::pair<std::string, unsigned short> parsed_host_port;
-            size_t host_end=host_port.find(':');
-            if(host_end==std::string::npos) {
-                parsed_host_port.first=host_port;
-                parsed_host_port.second=default_port;
-            }
-            else {
-                parsed_host_port.first=host_port.substr(0, host_end);
-                parsed_host_port.second=static_cast<unsigned short>(stoul(host_port.substr(host_end+1)));
+      }
+      write_stream << "\r\n";
+      write_stream.write(content.data(), static_cast<std::streamsize>(content.size()));
+
+      connect(session);
+    }
+
+    /// Asynchronous request where running Client's io_service is required.
+    /// Do not use concurrently with the synchronous request functions.
+    /// When requesting Server-Sent Events: request_callback might be called more than twice, first call with empty contents on open, and with ec = error::eof on last call
+    void request(const std::string &method, const std::string &path, string_view content,
+                 std::function<void(std::shared_ptr<Response>, const error_code &)> &&request_callback_) {
+      request(method, path, content, CaseInsensitiveMultimap(), std::move(request_callback_));
+    }
+
+    /// Asynchronous request where running Client's io_service is required.
+    /// Do not use concurrently with the synchronous request functions.
+    /// When requesting Server-Sent Events: request_callback might be called more than twice, first call with empty contents on open, and with ec = error::eof on last call
+    void request(const std::string &method, const std::string &path,
+                 std::function<void(std::shared_ptr<Response>, const error_code &)> &&request_callback_) {
+      request(method, path, std::string(), CaseInsensitiveMultimap(), std::move(request_callback_));
+    }
+
+    /// Asynchronous request where running Client's io_service is required.
+    /// Do not use concurrently with the synchronous request functions.
+    /// When requesting Server-Sent Events: request_callback might be called more than twice, first call with empty contents on open, and with ec = error::eof on last call
+    void request(const std::string &method, std::function<void(std::shared_ptr<Response>, const error_code &)> &&request_callback_) {
+      request(method, std::string("/"), std::string(), CaseInsensitiveMultimap(), std::move(request_callback_));
+    }
+
+    /// Asynchronous request where running Client's io_service is required.
+    /// Do not use concurrently with the synchronous request functions.
+    /// When requesting Server-Sent Events: request_callback might be called more than twice, first call with empty contents on open, and with ec = error::eof on last call
+    void request(const std::string &method, const std::string &path, std::istream &content, const CaseInsensitiveMultimap &header,
+                 std::function<void(std::shared_ptr<Response>, const error_code &)> &&request_callback_) {
+      auto session = std::make_shared<Session>(config.max_response_streambuf_size, get_connection(), create_request_header(method, path, header));
+      std::weak_ptr<Session> session_weak(session); // To avoid keeping session alive longer than needed
+      auto request_callback = std::make_shared<std::function<void(std::shared_ptr<Response>, const error_code &)>>(std::move(request_callback_));
+      session->callback = [this, session_weak, request_callback](const error_code &ec) {
+        if(auto session = session_weak.lock()) {
+          if(session->response->content.end) {
+            session->connection->cancel_timeout();
+            session->connection->in_use = false;
+          }
+          {
+            LockGuard lock(this->connections_mutex);
+
+            // Remove unused connections, but keep one open for HTTP persistent connection:
+            std::size_t unused_connections = 0;
+            for(auto it = this->connections.begin(); it != this->connections.end();) {
+              if(ec && session->connection == *it)
+                it = this->connections.erase(it);
+              else if((*it)->in_use)
+                ++it;
+              else {
+                ++unused_connections;
+                if(unused_connections > 1)
+                  it = this->connections.erase(it);
+                else
+                  ++it;
+              }
             }
-            return parsed_host_port;
+          }
+
+          if(*request_callback)
+            (*request_callback)(session->response, ec);
         }
-        
-        virtual void connect()=0;
-        
-        std::shared_ptr<boost::asio::deadline_timer> get_timeout_timer(size_t timeout=0) {
-            if(timeout==0)
-                timeout=config.timeout;
-            if(timeout==0)
-                return nullptr;
-            
-            auto timer=std::make_shared<boost::asio::deadline_timer>(io_service);
-            timer->expires_from_now(boost::posix_time::seconds(timeout));
-            timer->async_wait([this](const boost::system::error_code& ec) {
-                if(!ec) {
-                    close();
-                }
-            });
-            return timer;
+      };
+
+      content.seekg(0, std::ios::end);
+      auto content_length = content.tellg();
+      content.seekg(0, std::ios::beg);
+      std::ostream write_stream(session->request_streambuf.get());
+      if(content_length > 0) {
+        auto header_it = header.find("Content-Length");
+        if(header_it == header.end()) {
+          header_it = header.find("Transfer-Encoding");
+          if(header_it == header.end() || header_it->second != "chunked")
+            write_stream << "Content-Length: " << content_length << "\r\n";
         }
-        
-        void parse_response_header(const std::shared_ptr<Response> &response) const {
-            std::string line;
-            getline(response->content, line);
-            size_t version_end=line.find(' ');
-            if(version_end!=std::string::npos) {
-                if(5<line.size())
-                    response->http_version=line.substr(5, version_end-5);
-                if((version_end+1)<line.size())
-                    response->status_code=line.substr(version_end+1, line.size()-(version_end+1)-1);
-
-                getline(response->content, line);
-                size_t param_end;
-                while((param_end=line.find(':'))!=std::string::npos) {
-                    size_t value_start=param_end+1;
-                    if((value_start)<line.size()) {
-                        if(line[value_start]==' ')
-                            value_start++;
-                        if(value_start<line.size())
-                            response->header.insert(std::make_pair(line.substr(0, param_end), line.substr(value_start, line.size()-value_start-1)));
-                    }
-
-                    getline(response->content, line);
-                }
-            }
+      }
+      write_stream << "\r\n";
+      if(content_length > 0)
+        write_stream << content.rdbuf();
+
+      connect(session);
+    }
+
+    /// Asynchronous request where running Client's io_service is required.
+    /// Do not use concurrently with the synchronous request functions.
+    /// When requesting Server-Sent Events: request_callback might be called more than twice, first call with empty contents on open, and with ec = error::eof on last call
+    void request(const std::string &method, const std::string &path, std::istream &content,
+                 std::function<void(std::shared_ptr<Response>, const error_code &)> &&request_callback_) {
+      request(method, path, content, CaseInsensitiveMultimap(), std::move(request_callback_));
+    }
+
+    /// Close connections.
+    void stop() noexcept {
+      LockGuard lock(connections_mutex);
+      for(auto it = connections.begin(); it != connections.end();) {
+        (*it)->close();
+        it = connections.erase(it);
+      }
+    }
+
+    virtual ~ClientBase() noexcept {
+      handler_runner->stop();
+      stop();
+      if(internal_io_service)
+        io_service->stop();
+    }
+
+  protected:
+    bool internal_io_service = false;
+
+    std::string host;
+    unsigned short port;
+    unsigned short default_port;
+
+    std::unique_ptr<std::pair<std::string, std::string>> host_port;
+
+    Mutex connections_mutex;
+    std::unordered_set<std::shared_ptr<Connection>> connections GUARDED_BY(connections_mutex);
+
+    std::shared_ptr<ScopeRunner> handler_runner;
+
+    Mutex synchronous_request_mutex;
+    bool synchronous_request_called GUARDED_BY(synchronous_request_mutex) = false;
+
+    ClientBase(const std::string &host_port, unsigned short default_port) noexcept : default_port(default_port), handler_runner(new ScopeRunner()) {
+      auto parsed_host_port = parse_host_port(host_port, default_port);
+      host = parsed_host_port.first;
+      port = parsed_host_port.second;
+    }
+
+    template <typename ContentType>
+    std::shared_ptr<Response> sync_request(const std::string &method, const std::string &path, ContentType &content, const CaseInsensitiveMultimap &header) {
+      {
+        LockGuard lock(synchronous_request_mutex);
+        if(!synchronous_request_called) {
+          if(io_service) // Throw if io_service already set
+            throw make_error_code::make_error_code(errc::operation_not_permitted);
+          io_service = std::make_shared<io_context>();
+          internal_io_service = true;
+          auto io_service_ = io_service;
+          std::thread thread([io_service_] {
+            auto work = make_work_guard(*io_service_);
+            io_service_->run();
+          });
+          thread.detach();
+          synchronous_request_called = true;
         }
-        
-        std::shared_ptr<Response> request_read() {
-            std::shared_ptr<Response> response(new Response());
-            
-            boost::asio::streambuf chunked_streambuf;
-            
-            auto timer=get_timeout_timer();
-            boost::asio::async_read_until(*socket, response->content_buffer, "\r\n\r\n",
-                                          [this, &response, &chunked_streambuf, timer](const boost::system::error_code& ec, size_t bytes_transferred) {
-                if(timer)
-                    timer->cancel();
-                if(!ec) {
-                    size_t num_additional_bytes=response->content_buffer.size()-bytes_transferred;
-                    
-                    parse_response_header(response);
-                                        
-                    auto header_it=response->header.find("Content-Length");
-                    if(header_it!=response->header.end()) {
-                        auto content_length=stoull(header_it->second);
-                        if(content_length>num_additional_bytes) {
-                            auto timer=get_timeout_timer();
-                            boost::asio::async_read(*socket, response->content_buffer,
-                                                    boost::asio::transfer_exactly(content_length-num_additional_bytes),
-                                                    [this, timer](const boost::system::error_code& ec, size_t /*bytes_transferred*/) {
-                                if(timer)
-                                    timer->cancel();
-                                if(ec) {
-                                    std::lock_guard<std::mutex> lock(socket_mutex);
-                                    this->socket=nullptr;
-                                    throw boost::system::system_error(ec);
-                                }
-                            });
-                        }
-                    }
-                    else if((header_it=response->header.find("Transfer-Encoding"))!=response->header.end() && header_it->second=="chunked") {
-                        request_read_chunked(response, chunked_streambuf);
-                    }
-                    else if(response->http_version<"1.1" || ((header_it=response->header.find("Connection"))!=response->header.end() && header_it->second=="close")) {
-                        auto timer=get_timeout_timer();
-                        boost::asio::async_read(*socket, response->content_buffer,
-                                                [this, timer](const boost::system::error_code& ec, size_t /*bytes_transferred*/) {
-                            if(timer)
-                                    timer->cancel();
-                            if(ec) {
-                                std::lock_guard<std::mutex> lock(socket_mutex);
-                                this->socket=nullptr;
-                                if(ec!=boost::asio::error::eof)
-                                    throw boost::system::system_error(ec);
-                            }
-                        });
-                    }
-                }
-                else {
-                    std::lock_guard<std::mutex> lock(socket_mutex);
-                    socket=nullptr;
-                    throw boost::system::system_error(ec);
-                }
-            });
-            io_service.reset();
-            io_service.run();
-            
-            return response;
+      }
+
+      std::shared_ptr<Response> response;
+      std::promise<std::shared_ptr<Response>> response_promise;
+      auto stop_future_handlers = std::make_shared<bool>(false);
+      request(method, path, content, header, [&response, &response_promise, stop_future_handlers](std::shared_ptr<Response> response_, error_code ec) {
+        if(*stop_future_handlers)
+          return;
+
+        if(!response)
+          response = response_;
+        else if(!ec) {
+          if(response_->streambuf.size() + response->streambuf.size() > response->streambuf.max_size()) {
+            ec = make_error_code::make_error_code(errc::message_size);
+            response->close();
+          }
+          else {
+            // Move partial response_ content to response:
+            auto &source = response_->streambuf;
+            auto &target = response->streambuf;
+            target.commit(asio::buffer_copy(target.prepare(source.size()), source.data()));
+            source.consume(source.size());
+          }
         }
-        
-        void request_read_chunked(const std::shared_ptr<Response> &response, boost::asio::streambuf &streambuf) {
-            auto timer=get_timeout_timer();
-            boost::asio::async_read_until(*socket, response->content_buffer, "\r\n",
-                                      [this, &response, &streambuf, timer](const boost::system::error_code& ec, size_t bytes_transferred) {
-                if(timer)
-                    timer->cancel();
-                if(!ec) {
-                    std::string line;
-                    getline(response->content, line);
-                    bytes_transferred-=line.size()+1;
-                    line.pop_back();
-                    std::streamsize length=stol(line, 0, 16);
-                    
-                    auto num_additional_bytes=static_cast<std::streamsize>(response->content_buffer.size()-bytes_transferred);
-                    
-                    auto post_process=[this, &response, &streambuf, length] {
-                        std::ostream stream(&streambuf);
-                        if(length>0) {
-                            std::vector<char> buffer(static_cast<size_t>(length));
-                            response->content.read(&buffer[0], length);
-                            stream.write(&buffer[0], length);
-                        }
-                        
-                        //Remove "\r\n"
-                        response->content.get();
-                        response->content.get();
-                        
-                        if(length>0)
-                            request_read_chunked(response, streambuf);
-                        else {
-                            std::ostream response_stream(&response->content_buffer);
-                            response_stream << stream.rdbuf();
-                        }
-                    };
-                    
-                    if((2+length)>num_additional_bytes) {
-                        auto timer=get_timeout_timer();
-                        boost::asio::async_read(*socket, response->content_buffer,
-                                                boost::asio::transfer_exactly(2+length-num_additional_bytes),
-                                                [this, post_process, timer](const boost::system::error_code& ec, size_t /*bytes_transferred*/) {
-                            if(timer)
-                                timer->cancel();
-                            if(!ec) {
-                                post_process();
-                            }
-                            else {
-                                std::lock_guard<std::mutex> lock(socket_mutex);
-                                this->socket=nullptr;
-                                throw boost::system::system_error(ec);
-                            }
-                        });
-                    }
-                    else
-                        post_process();
-                }
-                else {
-                    std::lock_guard<std::mutex> lock(socket_mutex);
-                    socket=nullptr;
-                    throw boost::system::system_error(ec);
-                }
-            });
+
+        if(ec) {
+          response_promise.set_exception(std::make_exception_ptr(system_error(ec)));
+          *stop_future_handlers = true;
         }
-    };
-    
-    template<class socket_type>
-    class Client : public ClientBase<socket_type> {};
-    
-    typedef boost::asio::ip::tcp::socket HTTP;
-    
-    template<>
-    class Client<HTTP> : public ClientBase<HTTP> {
-    public:
-        Client(const std::string& server_port_path) : ClientBase<HTTP>::ClientBase(server_port_path, 80) {}
-        
-    protected:
-        void connect() {
-            if(!socket || !socket->is_open()) {
-                std::unique_ptr<boost::asio::ip::tcp::resolver::query> query;
-                if(config.proxy_server.empty())
-                    query=std::unique_ptr<boost::asio::ip::tcp::resolver::query>(new boost::asio::ip::tcp::resolver::query(host, std::to_string(port)));
-                else {
-                    auto proxy_host_port=parse_host_port(config.proxy_server, 8080);
-                    query=std::unique_ptr<boost::asio::ip::tcp::resolver::query>(new boost::asio::ip::tcp::resolver::query(proxy_host_port.first, std::to_string(proxy_host_port.second)));
-                }
-                resolver.async_resolve(*query, [this](const boost::system::error_code &ec,
-                                                     boost::asio::ip::tcp::resolver::iterator it){
-                    if(!ec) {
-                        {
-                            std::lock_guard<std::mutex> lock(socket_mutex);
-                            socket=std::unique_ptr<HTTP>(new HTTP(io_service));
-                        }
-                        
-                        auto timer=get_timeout_timer(config.timeout_connect);
-                        boost::asio::async_connect(*socket, it, [this, timer]
-                                (const boost::system::error_code &ec, boost::asio::ip::tcp::resolver::iterator /*it*/){
-                            if(timer)
-                                timer->cancel();
-                            if(!ec) {
-                                boost::asio::ip::tcp::no_delay option(true);
-                                this->socket->set_option(option);
-                            }
-                            else {
-                                std::lock_guard<std::mutex> lock(socket_mutex);
-                                this->socket=nullptr;
-                                throw boost::system::system_error(ec);
-                            }
-                        });
-                    }
-                    else {
-                        std::lock_guard<std::mutex> lock(socket_mutex);
-                        socket=nullptr;
-                        throw boost::system::system_error(ec);
-                    }
+        else if(response_->content.end)
+          response_promise.set_value(response);
+      });
+
+      return response_promise.get_future().get();
+    }
+
+    std::shared_ptr<Connection> get_connection() noexcept {
+      std::shared_ptr<Connection> connection;
+      LockGuard lock(connections_mutex);
+
+      if(!io_service) {
+        io_service = std::make_shared<io_context>();
+        internal_io_service = true;
+      }
+
+      for(auto it = connections.begin(); it != connections.end(); ++it) {
+        if(!(*it)->in_use) {
+          connection = *it;
+          break;
+        }
+      }
+      if(!connection) {
+        connection = create_connection();
+        connections.emplace(connection);
+      }
+      connection->attempt_reconnect = true;
+      connection->in_use = true;
+
+      if(!host_port) {
+        if(config.proxy_server.empty())
+          host_port = std::unique_ptr<std::pair<std::string, std::string>>(new std::pair<std::string, std::string>(host, std::to_string(port)));
+        else {
+          auto proxy_host_port = parse_host_port(config.proxy_server, 8080);
+          host_port = std::unique_ptr<std::pair<std::string, std::string>>(new std::pair<std::string, std::string>(proxy_host_port.first, std::to_string(proxy_host_port.second)));
+        }
+      }
+
+      return connection;
+    }
+
+    std::pair<std::string, unsigned short> parse_host_port(const std::string &host_port, unsigned short default_port) const noexcept {
+      std::string host, port;
+      host.reserve(host_port.size());
+      bool parse_port = false;
+      int square_count = 0; // To parse IPv6 addresses
+      for(auto chr : host_port) {
+        if(chr == '[')
+          ++square_count;
+        else if(chr == ']')
+          --square_count;
+        else if(square_count == 0 && chr == ':')
+          parse_port = true;
+        else if(!parse_port)
+          host += chr;
+        else
+          port += chr;
+      }
+
+      if(port.empty())
+        return {std::move(host), default_port};
+      else {
+        try {
+          return {std::move(host), static_cast<unsigned short>(std::stoul(port))};
+        }
+        catch(...) {
+          return {std::move(host), default_port};
+        }
+      }
+    }
+
+    virtual std::shared_ptr<Connection> create_connection() noexcept = 0;
+    virtual void connect(const std::shared_ptr<Session> &) = 0;
+
+    std::unique_ptr<asio::streambuf> create_request_header(const std::string &method, const std::string &path, const CaseInsensitiveMultimap &header) const {
+      auto corrected_path = path;
+      if(corrected_path == "")
+        corrected_path = "/";
+      if(!config.proxy_server.empty() && std::is_same<socket_type, asio::ip::tcp::socket>::value)
+        corrected_path = "http://" + host + ':' + std::to_string(port) + corrected_path;
+
+      std::unique_ptr<asio::streambuf> streambuf(new asio::streambuf());
+      std::ostream write_stream(streambuf.get());
+      write_stream << method << " " << corrected_path << " HTTP/1.1\r\n";
+      write_stream << "Host: " << host;
+      if(port != default_port)
+        write_stream << ':' << std::to_string(port);
+      write_stream << "\r\n";
+      for(auto &h : header)
+        write_stream << h.first << ": " << h.second << "\r\n";
+      return streambuf;
+    }
+
+    void write(const std::shared_ptr<Session> &session) {
+      session->connection->set_timeout(config.timeout);
+      asio::async_write(*session->connection->socket, session->request_streambuf->data(), [this, session](const error_code &ec, std::size_t /*bytes_transferred*/) {
+        auto lock = session->connection->handler_runner->continue_lock();
+        if(!lock)
+          return;
+        if(!ec)
+          this->read(session);
+        else {
+          if(session->connection->attempt_reconnect && ec != error::operation_aborted)
+            reconnect(session, ec);
+          else
+            session->callback(ec);
+        }
+      });
+    }
+
+    void read(const std::shared_ptr<Session> &session) {
+      asio::async_read_until(*session->connection->socket, session->response->streambuf, HeaderEndMatch(), [this, session](const error_code &ec, std::size_t bytes_transferred) {
+        auto lock = session->connection->handler_runner->continue_lock();
+        if(!lock)
+          return;
+
+        if(!ec) {
+          session->connection->attempt_reconnect = true;
+          std::size_t num_additional_bytes = session->response->streambuf.size() - bytes_transferred;
+
+          if(!ResponseMessage::parse(session->response->content, session->response->http_version, session->response->status_code, session->response->header)) {
+            session->callback(make_error_code::make_error_code(errc::protocol_error));
+            return;
+          }
+
+          auto header_it = session->response->header.find("Content-Length");
+          if(header_it != session->response->header.end()) {
+            auto content_length = std::stoull(header_it->second);
+            if(content_length > num_additional_bytes)
+              this->read_content(session, content_length - num_additional_bytes);
+            else
+              session->callback(ec);
+          }
+          else if((header_it = session->response->header.find("Transfer-Encoding")) != session->response->header.end() && header_it->second == "chunked") {
+            // Expect hex number to not exceed 16 bytes (64-bit number), but take into account previous additional read bytes
+            auto chunk_size_streambuf = std::make_shared<asio::streambuf>(std::max<std::size_t>(16 + 2, session->response->streambuf.size()));
+
+            // Move leftover bytes
+            auto &source = session->response->streambuf;
+            auto &target = *chunk_size_streambuf;
+            target.commit(asio::buffer_copy(target.prepare(source.size()), source.data()));
+            source.consume(source.size());
+
+            this->read_chunked_transfer_encoded(session, chunk_size_streambuf);
+          }
+          else if(session->response->http_version < "1.1" || ((header_it = session->response->header.find("Connection")) != session->response->header.end() && header_it->second == "close"))
+            read_content(session);
+          else if(((header_it = session->response->header.find("Content-Type")) != session->response->header.end() && header_it->second == "text/event-stream")) {
+            auto events_streambuf = std::make_shared<asio::streambuf>(this->config.max_response_streambuf_size);
+
+            // Move leftover bytes
+            auto &source = session->response->streambuf;
+            auto &target = *events_streambuf;
+            target.commit(asio::buffer_copy(target.prepare(source.size()), source.data()));
+            source.consume(source.size());
+
+            session->callback(ec); // Connection to a Server-Sent Events resource is opened
+
+            this->read_server_sent_event(session, events_streambuf);
+          }
+          else
+            session->callback(ec);
+        }
+        else {
+          if(session->connection->attempt_reconnect && ec != error::operation_aborted)
+            reconnect(session, ec);
+          else
+            session->callback(ec);
+        }
+      });
+    }
+
+    void reconnect(const std::shared_ptr<Session> &session, const error_code &ec) {
+      LockGuard lock(connections_mutex);
+      auto it = connections.find(session->connection);
+      if(it != connections.end()) {
+        connections.erase(it);
+        session->connection = create_connection();
+        session->connection->attempt_reconnect = false;
+        session->connection->in_use = true;
+        session->response = std::shared_ptr<Response>(new Response(this->config.max_response_streambuf_size, session->connection));
+        connections.emplace(session->connection);
+        lock.unlock();
+        this->connect(session);
+      }
+      else {
+        lock.unlock();
+        session->callback(ec);
+      }
+    }
+
+    void read_content(const std::shared_ptr<Session> &session, std::size_t remaining_length) {
+      asio::async_read(*session->connection->socket, session->response->streambuf, asio::transfer_exactly(remaining_length), [this, session, remaining_length](const error_code &ec, std::size_t bytes_transferred) {
+        auto lock = session->connection->handler_runner->continue_lock();
+        if(!lock)
+          return;
+
+        if(!ec) {
+          if(session->response->streambuf.size() == session->response->streambuf.max_size() && remaining_length > bytes_transferred) {
+            session->response->content.end = false;
+            session->callback(ec);
+            session->response = std::shared_ptr<Response>(new Response(*session->response));
+            this->read_content(session, remaining_length - bytes_transferred);
+          }
+          else
+            session->callback(ec);
+        }
+        else
+          session->callback(ec);
+      });
+    }
+
+    /// Ignore end of file error codes
+    virtual error_code clean_error_code(const error_code &ec) {
+      return ec == error::eof ? error_code() : ec;
+    }
+
+    void read_content(const std::shared_ptr<Session> &session) {
+      asio::async_read(*session->connection->socket, session->response->streambuf, [this, session](const error_code &ec_, std::size_t /*bytes_transferred*/) {
+        auto lock = session->connection->handler_runner->continue_lock();
+        if(!lock)
+          return;
+
+        auto ec = clean_error_code(ec_);
+
+        if(!ec) {
+          {
+            LockGuard lock(this->connections_mutex);
+            this->connections.erase(session->connection);
+          }
+          if(session->response->streambuf.size() == session->response->streambuf.max_size()) {
+            session->response->content.end = false;
+            session->callback(ec);
+            session->response = std::shared_ptr<Response>(new Response(*session->response));
+            this->read_content(session);
+          }
+          else
+            session->callback(ec);
+        }
+        else
+          session->callback(ec);
+      });
+    }
+
+    void read_chunked_transfer_encoded(const std::shared_ptr<Session> &session, const std::shared_ptr<asio::streambuf> &chunk_size_streambuf) {
+      asio::async_read_until(*session->connection->socket, *chunk_size_streambuf, "\r\n", [this, session, chunk_size_streambuf](const error_code &ec, size_t bytes_transferred) {
+        auto lock = session->connection->handler_runner->continue_lock();
+        if(!lock)
+          return;
+
+        if(!ec) {
+          std::istream istream(chunk_size_streambuf.get());
+          std::string line;
+          std::getline(istream, line);
+          bytes_transferred -= line.size() + 1;
+          unsigned long chunk_size = 0;
+          try {
+            chunk_size = std::stoul(line, 0, 16);
+          }
+          catch(...) {
+            session->callback(make_error_code::make_error_code(errc::protocol_error));
+            return;
+          }
+
+          if(chunk_size == 0) {
+            session->callback(error_code());
+            return;
+          }
+
+          if(chunk_size + session->response->streambuf.size() > session->response->streambuf.max_size()) {
+            session->response->content.end = false;
+            session->callback(ec);
+            session->response = std::shared_ptr<Response>(new Response(*session->response));
+          }
+
+          auto num_additional_bytes = chunk_size_streambuf->size() - bytes_transferred;
+
+          auto bytes_to_move = std::min<std::size_t>(chunk_size, num_additional_bytes);
+          if(bytes_to_move > 0) {
+            auto &source = *chunk_size_streambuf;
+            auto &target = session->response->streambuf;
+            target.commit(asio::buffer_copy(target.prepare(bytes_to_move), source.data(), bytes_to_move));
+            source.consume(bytes_to_move);
+          }
+
+          if(chunk_size > num_additional_bytes) {
+            asio::async_read(*session->connection->socket, session->response->streambuf, asio::transfer_exactly(chunk_size - num_additional_bytes), [this, session, chunk_size_streambuf](const error_code &ec, size_t /*bytes_transferred*/) {
+              auto lock = session->connection->handler_runner->continue_lock();
+              if(!lock)
+                return;
+
+              if(!ec) {
+                // Remove "\r\n"
+                auto null_buffer = std::make_shared<asio::streambuf>(2);
+                asio::async_read(*session->connection->socket, *null_buffer, asio::transfer_exactly(2), [this, session, chunk_size_streambuf, null_buffer](const error_code &ec, size_t /*bytes_transferred*/) {
+                  auto lock = session->connection->handler_runner->continue_lock();
+                  if(!lock)
+                    return;
+                  if(!ec)
+                    read_chunked_transfer_encoded(session, chunk_size_streambuf);
+                  else
+                    session->callback(ec);
                 });
-                io_service.reset();
-                io_service.run();
-            }
+              }
+              else
+                session->callback(ec);
+            });
+          }
+          else if(2 + chunk_size > num_additional_bytes) { // If only end of chunk remains unread (\n or \r\n)
+            // Remove "\r\n"
+            if(2 + chunk_size - num_additional_bytes == 1)
+              istream.get();
+            auto null_buffer = std::make_shared<asio::streambuf>(2);
+            asio::async_read(*session->connection->socket, *null_buffer, asio::transfer_exactly(2 + chunk_size - num_additional_bytes), [this, session, chunk_size_streambuf, null_buffer](const error_code &ec, size_t /*bytes_transferred*/) {
+              auto lock = session->connection->handler_runner->continue_lock();
+              if(!lock)
+                return;
+              if(!ec)
+                read_chunked_transfer_encoded(session, chunk_size_streambuf);
+              else
+                session->callback(ec);
+            });
+          }
+          else {
+            // Remove "\r\n"
+            istream.get();
+            istream.get();
+
+            read_chunked_transfer_encoded(session, chunk_size_streambuf);
+          }
         }
-    };
-}
+        else
+          session->callback(ec);
+      });
+    }
+
+    void read_server_sent_event(const std::shared_ptr<Session> &session, const std::shared_ptr<asio::streambuf> &events_streambuf) {
+      asio::async_read_until(*session->connection->socket, *events_streambuf, HeaderEndMatch(), [this, session, events_streambuf](const error_code &ec, std::size_t /*bytes_transferred*/) {
+        auto lock = session->connection->handler_runner->continue_lock();
+        if(!lock)
+          return;
+
+        if(!ec) {
+          session->response->content.end = false;
+          std::istream istream(events_streambuf.get());
+          std::ostream ostream(&session->response->streambuf);
+          std::string line;
+          while(std::getline(istream, line) && !line.empty() && !(line.back() == '\r' && line.size() == 1)) {
+            ostream.write(line.data(), static_cast<std::streamsize>(line.size() - (line.back() == '\r' ? 1 : 0)));
+            ostream.put('\n');
+          }
+
+          session->callback(ec);
+          session->response = std::shared_ptr<Response>(new Response(*session->response));
+          read_server_sent_event(session, events_streambuf);
+        }
+        else
+          session->callback(ec);
+      });
+    }
+  };
+
+  template <class socket_type>
+  class Client : public ClientBase<socket_type> {};
+
+  using HTTP = asio::ip::tcp::socket;
+
+  template <>
+  class Client<HTTP> : public ClientBase<HTTP> {
+  public:
+    /**
+     * Constructs a client object.
+     *
+     * @param server_port_path Server resource given by host[:port][/path]
+     */
+    Client(const std::string &server_port_path) noexcept : ClientBase<HTTP>::ClientBase(server_port_path, 80) {}
+
+  protected:
+    std::shared_ptr<Connection> create_connection() noexcept override {
+      return std::make_shared<Connection>(handler_runner, *io_service);
+    }
+
+    void connect(const std::shared_ptr<Session> &session) override {
+      if(!session->connection->socket->lowest_layer().is_open()) {
+        auto resolver = std::make_shared<asio::ip::tcp::resolver>(*io_service);
+        session->connection->set_timeout(config.timeout_connect);
+        async_resolve(*resolver, *host_port, [this, session, resolver](const error_code &ec, resolver_results results) {
+          session->connection->cancel_timeout();
+          auto lock = session->connection->handler_runner->continue_lock();
+          if(!lock)
+            return;
+          if(!ec) {
+            session->connection->set_timeout(config.timeout_connect);
+            asio::async_connect(*session->connection->socket, results, [this, session, resolver](const error_code &ec, async_connect_endpoint /*endpoint*/) {
+              session->connection->cancel_timeout();
+              auto lock = session->connection->handler_runner->continue_lock();
+              if(!lock)
+                return;
+              if(!ec) {
+                asio::ip::tcp::no_delay option(true);
+                error_code ec;
+                session->connection->socket->set_option(option, ec);
+                this->write(session);
+              }
+              else
+                session->callback(ec);
+            });
+          }
+          else
+            session->callback(ec);
+        });
+      }
+      else
+        write(session);
+    }
+  };
+} // namespace SimpleWeb
 
-#endif	/* CLIENT_HTTP_HPP */
+#endif /* SIMPLE_WEB_CLIENT_HTTP_HPP */
diff --git a/third_party/Simple-web-server/repo/client_https.hpp b/third_party/Simple-web-server/repo/client_https.hpp
index 248f5b1ca9..94587236c2 100644
--- a/third_party/Simple-web-server/repo/client_https.hpp
+++ b/third_party/Simple-web-server/repo/client_https.hpp
@@ -1,140 +1,166 @@
-#ifndef CLIENT_HTTPS_HPP
-#define	CLIENT_HTTPS_HPP
+#ifndef SIMPLE_WEB_CLIENT_HTTPS_HPP
+#define SIMPLE_WEB_CLIENT_HTTPS_HPP
 
 #include "client_http.hpp"
+
+#ifdef ASIO_STANDALONE
+#include <asio/ssl.hpp>
+#else
 #include <boost/asio/ssl.hpp>
+#endif
 
 namespace SimpleWeb {
-    typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> HTTPS;
-    
-    template<>
-    class Client<HTTPS> : public ClientBase<HTTPS> {
-    public:
-        Client(const std::string& server_port_path, bool verify_certificate=true, 
-                const std::string& cert_file=std::string(), const std::string& private_key_file=std::string(), 
-                const std::string& verify_file=std::string()) : 
-                ClientBase<HTTPS>::ClientBase(server_port_path, 443), context(boost::asio::ssl::context::tlsv12) {
-            if(cert_file.size()>0 && private_key_file.size()>0) {
-                context.use_certificate_chain_file(cert_file);
-                context.use_private_key_file(private_key_file, boost::asio::ssl::context::pem);
-            }
-            
-            if(verify_certificate)
-                context.set_verify_callback(boost::asio::ssl::rfc2818_verification(host));
-            
-            if(verify_file.size()>0)
-                context.load_verify_file(verify_file);
-            else
-                context.set_default_verify_paths();
-            
-            if(verify_file.size()>0 || verify_certificate)
-                context.set_verify_mode(boost::asio::ssl::verify_peer);
-            else
-                context.set_verify_mode(boost::asio::ssl::verify_none);
-        }
-
-    protected:
-        boost::asio::ssl::context context;
-        
-        void connect() {
-            if(!socket || !socket->lowest_layer().is_open()) {
-                std::unique_ptr<boost::asio::ip::tcp::resolver::query> query;
-                if(config.proxy_server.empty())
-                    query=std::unique_ptr<boost::asio::ip::tcp::resolver::query>(new boost::asio::ip::tcp::resolver::query(host, std::to_string(port)));
-                else {
-                    auto proxy_host_port=parse_host_port(config.proxy_server, 8080);
-                    query=std::unique_ptr<boost::asio::ip::tcp::resolver::query>(new boost::asio::ip::tcp::resolver::query(proxy_host_port.first, std::to_string(proxy_host_port.second)));
-                }
-                resolver.async_resolve(*query, [this]
-                                       (const boost::system::error_code &ec, boost::asio::ip::tcp::resolver::iterator it){
+  using HTTPS = asio::ssl::stream<asio::ip::tcp::socket>;
+
+  template <>
+  class Client<HTTPS> : public ClientBase<HTTPS> {
+  public:
+    /**
+     * Constructs a client object.
+     *
+     * @param server_port_path   Server resource given by host[:port][/path]
+     * @param verify_certificate Set to true (default) to verify the server's certificate and hostname according to RFC 2818.
+     * @param certification_file If non-empty, sends the given certification file to server. Requires private_key_file.
+     * @param private_key_file   If non-empty, specifies the file containing the private key for certification_file. Requires certification_file.
+     * @param verify_file        If non-empty, use this certificate authority file to perform verification.
+     */
+    Client(const std::string &server_port_path, bool verify_certificate = true, const std::string &certification_file = std::string(),
+           const std::string &private_key_file = std::string(), const std::string &verify_file = std::string())
+        : ClientBase<HTTPS>::ClientBase(server_port_path, 443),
+#if(ASIO_STANDALONE && ASIO_VERSION >= 101300) || BOOST_ASIO_VERSION >= 101300
+          context(asio::ssl::context::tls_client) {
+      // Disabling TLS 1.0 and 1.1 (see RFC 8996)
+      context.set_options(asio::ssl::context::no_tlsv1);
+      context.set_options(asio::ssl::context::no_tlsv1_1);
+#else
+          context(asio::ssl::context::tlsv12) {
+#endif
+      if(certification_file.size() > 0 && private_key_file.size() > 0) {
+        context.use_certificate_chain_file(certification_file);
+        context.use_private_key_file(private_key_file, asio::ssl::context::pem);
+      }
+
+      if(verify_certificate)
+        context.set_verify_callback(asio::ssl::rfc2818_verification(host));
+
+      if(verify_file.size() > 0)
+        context.load_verify_file(verify_file);
+      else
+        context.set_default_verify_paths();
+
+      if(verify_certificate)
+        context.set_verify_mode(asio::ssl::verify_peer);
+      else
+        context.set_verify_mode(asio::ssl::verify_none);
+    }
+
+  protected:
+    asio::ssl::context context;
+
+    /// Ignore for end of file and SSL_R_SHORT_READ error codes
+    error_code clean_error_code(const error_code &ec) override {
+      return ec == error::eof || ec == asio::ssl::error::stream_truncated ? error_code() : ec;
+    }
+
+    std::shared_ptr<Connection> create_connection() noexcept override {
+      return std::make_shared<Connection>(handler_runner, *io_service, context);
+    }
+
+    void connect(const std::shared_ptr<Session> &session) override {
+      if(!session->connection->socket->lowest_layer().is_open()) {
+        auto resolver = std::make_shared<asio::ip::tcp::resolver>(*io_service);
+        session->connection->set_timeout(this->config.timeout_connect);
+        async_resolve(*resolver, *host_port, [this, session, resolver](const error_code &ec, resolver_results results) {
+          session->connection->cancel_timeout();
+          auto lock = session->connection->handler_runner->continue_lock();
+          if(!lock)
+            return;
+          if(!ec) {
+            session->connection->set_timeout(this->config.timeout_connect);
+            asio::async_connect(session->connection->socket->lowest_layer(), results, [this, session, resolver](const error_code &ec, async_connect_endpoint /*endpoint*/) {
+              session->connection->cancel_timeout();
+              auto lock = session->connection->handler_runner->continue_lock();
+              if(!lock)
+                return;
+              if(!ec) {
+                asio::ip::tcp::no_delay option(true);
+                error_code ec;
+                session->connection->socket->lowest_layer().set_option(option, ec);
+
+                if(!this->config.proxy_server.empty()) {
+                  auto write_buffer = std::make_shared<asio::streambuf>();
+                  std::ostream write_stream(write_buffer.get());
+                  auto host_port = this->host + ':' + std::to_string(this->port);
+                  write_stream << "CONNECT " + host_port + " HTTP/1.1\r\n"
+                               << "Host: " << host_port << "\r\n\r\n";
+                  session->connection->set_timeout(this->config.timeout_connect);
+                  asio::async_write(session->connection->socket->next_layer(), *write_buffer, [this, session, write_buffer](const error_code &ec, std::size_t /*bytes_transferred*/) {
+                    session->connection->cancel_timeout();
+                    auto lock = session->connection->handler_runner->continue_lock();
+                    if(!lock)
+                      return;
                     if(!ec) {
-                        {
-                            std::lock_guard<std::mutex> lock(socket_mutex);
-                            socket=std::unique_ptr<HTTPS>(new HTTPS(io_service, context));
+                      std::shared_ptr<Response> response(new Response(this->config.max_response_streambuf_size, session->connection));
+                      session->connection->set_timeout(this->config.timeout_connect);
+                      asio::async_read_until(session->connection->socket->next_layer(), response->streambuf, "\r\n\r\n", [this, session, response](const error_code &ec, std::size_t /*bytes_transferred*/) {
+                        session->connection->cancel_timeout();
+                        auto lock = session->connection->handler_runner->continue_lock();
+                        if(!lock)
+                          return;
+                        if(response->streambuf.size() == response->streambuf.max_size()) {
+                          session->callback(make_error_code::make_error_code(errc::message_size));
+                          return;
                         }
-                        
-                        auto timer=get_timeout_timer(config.timeout_connect);
-                        boost::asio::async_connect(socket->lowest_layer(), it, [this, timer]
-                                                   (const boost::system::error_code &ec, boost::asio::ip::tcp::resolver::iterator /*it*/){
-                            if(timer)
-                                timer->cancel();
-                            if(!ec) {
-                                boost::asio::ip::tcp::no_delay option(true);
-                                this->socket->lowest_layer().set_option(option);
-                            }
-                            else {
-                                std::lock_guard<std::mutex> lock(socket_mutex);
-                                this->socket=nullptr;
-                                throw boost::system::system_error(ec);
-                            }
-                        });
-                    }
-                    else {
-                        std::lock_guard<std::mutex> lock(socket_mutex);
-                        socket=nullptr;
-                        throw boost::system::system_error(ec);
-                    }
-                });
-                io_service.reset();
-                io_service.run();
-                
-                if(!config.proxy_server.empty()) {
-                    boost::asio::streambuf write_buffer;
-                    std::ostream write_stream(&write_buffer);
-                    auto host_port=host+':'+std::to_string(port);
-                    write_stream << "CONNECT "+host_port+" HTTP/1.1\r\n" << "Host: " << host_port << "\r\n\r\n";
-                    auto timer=get_timeout_timer();
-                    boost::asio::async_write(socket->next_layer(), write_buffer,
-                                             [this, timer](const boost::system::error_code &ec, size_t /*bytes_transferred*/) {
-                        if(timer)
-                            timer->cancel();
-                        if(ec) {
-                            std::lock_guard<std::mutex> lock(socket_mutex);
-                            socket=nullptr;
-                            throw boost::system::system_error(ec);
-                        }
-                    });
-                    io_service.reset();
-                    io_service.run();
-                    
-                    std::shared_ptr<Response> response(new Response());
-                    timer=get_timeout_timer();
-                    boost::asio::async_read_until(socket->next_layer(), response->content_buffer, "\r\n\r\n",
-                                                  [this, timer](const boost::system::error_code& ec, size_t /*bytes_transferred*/) {
-                        if(timer)
-                            timer->cancel();
-                        if(ec) {
-                            std::lock_guard<std::mutex> lock(socket_mutex);
-                            socket=nullptr;
-                            throw boost::system::system_error(ec);
+
+                        if(!ec) {
+                          if(!ResponseMessage::parse(response->content, response->http_version, response->status_code, response->header))
+                            session->callback(make_error_code::make_error_code(errc::protocol_error));
+                          else {
+                            if(response->status_code.compare(0, 3, "200") != 0)
+                              session->callback(make_error_code::make_error_code(errc::permission_denied));
+                            else
+                              this->handshake(session);
+                          }
                         }
-                    });
-                    io_service.reset();
-                    io_service.run();
-                    parse_response_header(response);
-                    if (response->status_code.empty() || response->status_code.compare(0, 3, "200") != 0) {
-                        std::lock_guard<std::mutex> lock(socket_mutex);
-                        socket=nullptr;
-                        throw boost::system::system_error(boost::system::error_code(boost::system::errc::permission_denied, boost::system::generic_category()));
+                        else
+                          session->callback(ec);
+                      });
                     }
+                    else
+                      session->callback(ec);
+                  });
                 }
-                
-                auto timer=get_timeout_timer();
-                this->socket->async_handshake(boost::asio::ssl::stream_base::client,
-                                              [this, timer](const boost::system::error_code& ec) {
-                    if(timer)
-                        timer->cancel();
-                    if(ec) {
-                        std::lock_guard<std::mutex> lock(socket_mutex);
-                        socket=nullptr;
-                        throw boost::system::system_error(ec);
-                    }
-                });
-                io_service.reset();
-                io_service.run();
-            }
-        }
-    };
-}
-
-#endif	/* CLIENT_HTTPS_HPP */
+                else
+                  this->handshake(session);
+              }
+              else
+                session->callback(ec);
+            });
+          }
+          else
+            session->callback(ec);
+        });
+      }
+      else
+        write(session);
+    }
+
+    void handshake(const std::shared_ptr<Session> &session) {
+      SSL_set_tlsext_host_name(session->connection->socket->native_handle(), this->host.c_str());
+
+      session->connection->set_timeout(this->config.timeout_connect);
+      session->connection->socket->async_handshake(asio::ssl::stream_base::client, [this, session](const error_code &ec) {
+        session->connection->cancel_timeout();
+        auto lock = session->connection->handler_runner->continue_lock();
+        if(!lock)
+          return;
+        if(!ec)
+          this->write(session);
+        else
+          session->callback(ec);
+      });
+    }
+  };
+} // namespace SimpleWeb
+
+#endif /* SIMPLE_WEB_CLIENT_HTTPS_HPP */
diff --git a/third_party/Simple-web-server/repo/crypto.hpp b/third_party/Simple-web-server/repo/crypto.hpp
index 268950d7e8..362959891f 100644
--- a/third_party/Simple-web-server/repo/crypto.hpp
+++ b/third_party/Simple-web-server/repo/crypto.hpp
@@ -1,220 +1,223 @@
-#ifndef CRYPTO_HPP
-#define	CRYPTO_HPP
+#ifndef SIMPLE_WEB_CRYPTO_HPP
+#define SIMPLE_WEB_CRYPTO_HPP
 
-#include <string>
 #include <cmath>
-#include <sstream>
 #include <iomanip>
 #include <istream>
+#include <memory>
+#include <sstream>
+#include <string>
 #include <vector>
 
-//Moving these to a seperate namespace for minimal global namespace cluttering does not work with clang++
-#include <openssl/evp.h>
 #include <openssl/buffer.h>
-#include <openssl/sha.h>
+#include <openssl/evp.h>
 #include <openssl/md5.h>
+#include <openssl/sha.h>
 
 namespace SimpleWeb {
-    //TODO 2017: remove workaround for MSVS 2012
-    #if _MSC_VER == 1700 //MSVS 2012 has no definition for round()
-        inline double round(double x) { //custom definition of round() for positive numbers
-            return floor(x + 0.5);
-        }
-    #endif
-
-    class Crypto {
-        const static size_t buffer_size=131072;
+// TODO 2017: remove workaround for MSVS 2012
+#if _MSC_VER == 1700                       // MSVS 2012 has no definition for round()
+  inline double round(double x) noexcept { // Custom definition of round() for positive numbers
+    return floor(x + 0.5);
+  }
+#endif
+
+  class Crypto {
+    const static std::size_t buffer_size = 131072;
+
+  public:
+    class Base64 {
     public:
-        class Base64 {
-        public:
-            static std::string encode(const std::string &ascii) {
-                std::string base64;
-                
-                BIO *bio, *b64;
-                BUF_MEM *bptr=BUF_MEM_new();
-
-                b64 = BIO_new(BIO_f_base64());
-                BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
-                bio = BIO_new(BIO_s_mem());
-                BIO_push(b64, bio);
-                BIO_set_mem_buf(b64, bptr, BIO_CLOSE);
-                
-                //Write directly to base64-buffer to avoid copy
-                int base64_length=static_cast<int>(round(4*ceil((double)ascii.size()/3.0)));
-                base64.resize(base64_length);
-                bptr->length=0;
-                bptr->max=base64_length+1;
-                bptr->data=(char*)&base64[0];
-
-                BIO_write(b64, &ascii[0], static_cast<int>(ascii.size()));
-                BIO_flush(b64);
-
-                //To keep &base64[0] through BIO_free_all(b64)
-                bptr->length=0;
-                bptr->max=0;
-                bptr->data=nullptr;
-
-                BIO_free_all(b64);
-                
-                return base64;
-            }
-            
-            static std::string decode(const std::string &base64) {
-                std::string ascii;
-                
-                //Resize ascii, however, the size is a up to two bytes too large.
-                ascii.resize((6*base64.size())/8);
-                BIO *b64, *bio;
-
-                b64 = BIO_new(BIO_f_base64());
-                BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
-                bio = BIO_new_mem_buf((char*)&base64[0], static_cast<int>(base64.size()));
-                bio = BIO_push(b64, bio);
-
-                int decoded_length = BIO_read(bio, &ascii[0], static_cast<int>(ascii.size()));
-                ascii.resize(decoded_length);
-
-                BIO_free_all(b64);
-                
-                return ascii;
-            }
-        };
-        
-        /// Return hex string from bytes in input string.
-        static std::string to_hex_string(const std::string &input) {
-          std::stringstream hex_stream;
-          hex_stream << std::hex << std::internal << std::setfill('0');
-          for (auto &byte : input)
-            hex_stream << std::setw(2) << static_cast<int>(static_cast<unsigned char>(byte));
-          return hex_stream.str();
-        }
-        
-        static std::string md5(const std::string &input, size_t iterations=1) {
-            std::string hash;
-            
-            hash.resize(128 / 8);
-            MD5(reinterpret_cast<const unsigned char*>(&input[0]), input.size(), reinterpret_cast<unsigned char*>(&hash[0]));
-            
-            for (size_t c = 1; c < iterations; ++c)
-              MD5(reinterpret_cast<const unsigned char*>(&hash[0]), hash.size(), reinterpret_cast<unsigned char*>(&hash[0]));
-            
-            return hash;
-        }
-        
-        static std::string md5(std::istream &stream, size_t iterations=1) {
-            MD5_CTX context;
-            MD5_Init(&context);
-            std::streamsize read_length;
-            std::vector<char> buffer(buffer_size);
-            while((read_length=stream.read(&buffer[0], buffer_size).gcount())>0)
-                MD5_Update(&context, buffer.data(), read_length);
-            std::string hash;
-            hash.resize(128 / 8);
-            MD5_Final(reinterpret_cast<unsigned char*>(&hash[0]), &context);
-            
-            for (size_t c = 1; c < iterations; ++c)
-              MD5(reinterpret_cast<const unsigned char*>(&hash[0]), hash.size(), reinterpret_cast<unsigned char*>(&hash[0]));
-            
-            return hash;
-        }
-
-        static std::string sha1(const std::string &input, size_t iterations=1) {
-            std::string hash;
-            
-            hash.resize(160 / 8);
-            SHA1(reinterpret_cast<const unsigned char*>(&input[0]), input.size(), reinterpret_cast<unsigned char*>(&hash[0]));
-            
-            for (size_t c = 1; c < iterations; ++c)
-              SHA1(reinterpret_cast<const unsigned char*>(&hash[0]), hash.size(), reinterpret_cast<unsigned char*>(&hash[0]));
-            
-            return hash;
-        }
-        
-        static std::string sha1(std::istream &stream, size_t iterations=1) {
-            SHA_CTX context;
-            SHA1_Init(&context);
-            std::streamsize read_length;
-            std::vector<char> buffer(buffer_size);
-            while((read_length=stream.read(&buffer[0], buffer_size).gcount())>0)
-                SHA1_Update(&context, buffer.data(), read_length);
-            std::string hash;
-            hash.resize(160 / 8);
-            SHA1_Final(reinterpret_cast<unsigned char*>(&hash[0]), &context);
-            
-            for (size_t c = 1; c < iterations; ++c)
-              SHA1(reinterpret_cast<const unsigned char*>(&hash[0]), hash.size(), reinterpret_cast<unsigned char*>(&hash[0]));
-            
-            return hash;
-        }
-
-        static std::string sha256(const std::string &input, size_t iterations=1) {
-            std::string hash;
-            
-            hash.resize(256 / 8);
-            SHA256(reinterpret_cast<const unsigned char*>(&input[0]), input.size(), reinterpret_cast<unsigned char*>(&hash[0]));
-            
-            for (size_t c = 1; c < iterations; ++c)
-              SHA256(reinterpret_cast<const unsigned char*>(&hash[0]), hash.size(), reinterpret_cast<unsigned char*>(&hash[0]));
-            
-            return hash;
-        }
-        
-        static std::string sha256(std::istream &stream, size_t iterations=1) {
-            SHA256_CTX context;
-            SHA256_Init(&context);
-            std::streamsize read_length;
-            std::vector<char> buffer(buffer_size);
-            while((read_length=stream.read(&buffer[0], buffer_size).gcount())>0)
-                SHA256_Update(&context, buffer.data(), read_length);
-            std::string hash;
-            hash.resize(256 / 8);
-            SHA256_Final(reinterpret_cast<unsigned char*>(&hash[0]), &context);
-            
-            for (size_t c = 1; c < iterations; ++c)
-              SHA256(reinterpret_cast<const unsigned char*>(&hash[0]), hash.size(), reinterpret_cast<unsigned char*>(&hash[0]));
-            
-            return hash;
-        }
-
-        static std::string sha512(const std::string &input, size_t iterations=1) {
-            std::string hash;
-            
-            hash.resize(512 / 8);
-            SHA512(reinterpret_cast<const unsigned char*>(&input[0]), input.size(), reinterpret_cast<unsigned char*>(&hash[0]));
-            
-            for (size_t c = 1; c < iterations; ++c)
-              SHA512(reinterpret_cast<const unsigned char*>(&hash[0]), hash.size(), reinterpret_cast<unsigned char*>(&hash[0]));
-            
-            return hash;
-        }
-        
-        static std::string sha512(std::istream &stream, size_t iterations=1) {
-            SHA512_CTX context;
-            SHA512_Init(&context);
-            std::streamsize read_length;
-            std::vector<char> buffer(buffer_size);
-            while((read_length=stream.read(&buffer[0], buffer_size).gcount())>0)
-                SHA512_Update(&context, buffer.data(), read_length);
-            std::string hash;
-            hash.resize(512 / 8);
-            SHA512_Final(reinterpret_cast<unsigned char*>(&hash[0]), &context);
-            
-            for (size_t c = 1; c < iterations; ++c)
-              SHA512(reinterpret_cast<const unsigned char*>(&hash[0]), hash.size(), reinterpret_cast<unsigned char*>(&hash[0]));
-            
-            return hash;
-        }
-        
-        /// key_size is number of bytes of the returned key.
-        static std::string pbkdf2(const std::string &password, const std::string &salt, int iterations, int key_size) {
-          std::string key;
-          key.resize(key_size);
-          PKCS5_PBKDF2_HMAC_SHA1(password.c_str(), password.size(),
-                                 reinterpret_cast<const unsigned char*>(salt.c_str()), salt.size(), iterations,
-                                 key_size, reinterpret_cast<unsigned char*>(&key[0]));
-          return key;
-        }
+      /// Returns Base64 encoded string from input string.
+      static std::string encode(const std::string &input) noexcept {
+        std::string base64;
+
+        BIO *bio, *b64;
+        auto bptr = BUF_MEM_new();
+
+        b64 = BIO_new(BIO_f_base64());
+        BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
+        bio = BIO_new(BIO_s_mem());
+        BIO_push(b64, bio);
+        BIO_set_mem_buf(b64, bptr, BIO_CLOSE);
+
+        // Write directly to base64-buffer to avoid copy
+        auto base64_length = static_cast<std::size_t>(round(4 * ceil(static_cast<double>(input.size()) / 3.0)));
+        base64.resize(base64_length);
+        bptr->length = 0;
+        bptr->max = base64_length + 1;
+        bptr->data = &base64[0];
+
+        if(BIO_write(b64, &input[0], static_cast<int>(input.size())) <= 0 || BIO_flush(b64) <= 0)
+          base64.clear();
+
+        // To keep &base64[0] through BIO_free_all(b64)
+        bptr->length = 0;
+        bptr->max = 0;
+        bptr->data = nullptr;
+
+        BIO_free_all(b64);
+
+        return base64;
+      }
+
+      /// Returns Base64 decoded string from base64 input.
+      static std::string decode(const std::string &base64) noexcept {
+        std::string ascii((6 * base64.size()) / 8, '\0'); // The size is a up to two bytes too large.
+
+        BIO *b64, *bio;
+
+        b64 = BIO_new(BIO_f_base64());
+        BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
+// TODO: Remove in 2022 or later
+#if(defined(OPENSSL_VERSION_NUMBER) && OPENSSL_VERSION_NUMBER < 0x1000214fL) || (defined(LIBRESSL_VERSION_NUMBER) && LIBRESSL_VERSION_NUMBER < 0x2080000fL)
+        bio = BIO_new_mem_buf(const_cast<char *>(&base64[0]), static_cast<int>(base64.size()));
+#else
+        bio = BIO_new_mem_buf(&base64[0], static_cast<int>(base64.size()));
+#endif
+        bio = BIO_push(b64, bio);
+
+        auto decoded_length = BIO_read(bio, &ascii[0], static_cast<int>(ascii.size()));
+        if(decoded_length > 0)
+          ascii.resize(static_cast<std::size_t>(decoded_length));
+        else
+          ascii.clear();
+
+        BIO_free_all(b64);
+
+        return ascii;
+      }
     };
-}
-#endif	/* CRYPTO_HPP */
 
+    /// Returns hex string from bytes in input string.
+    static std::string to_hex_string(const std::string &input) noexcept {
+      std::stringstream hex_stream;
+      hex_stream << std::hex << std::internal << std::setfill('0');
+      for(auto &byte : input)
+        hex_stream << std::setw(2) << static_cast<int>(static_cast<unsigned char>(byte));
+      return hex_stream.str();
+    }
+
+    /// Return hash value using specific EVP_MD from input string.
+    static std::string message_digest(const std::string &str, const EVP_MD *evp_md, std::size_t digest_length) noexcept {
+      std::string md(digest_length, '\0');
+
+      auto ctx = EVP_MD_CTX_create();
+      EVP_MD_CTX_init(ctx);
+      EVP_DigestInit_ex(ctx, evp_md, nullptr);
+      EVP_DigestUpdate(ctx, str.data(), str.size());
+      EVP_DigestFinal_ex(ctx, reinterpret_cast<unsigned char *>(&md[0]), nullptr);
+      EVP_MD_CTX_destroy(ctx);
+
+      return md;
+    }
+
+    /// Return hash value using specific EVP_MD from input stream.
+    static std::string stream_digest(std::istream &stream, const EVP_MD *evp_md, std::size_t digest_length) noexcept {
+      std::string md(digest_length, '\0');
+      std::unique_ptr<char[]> buffer(new char[buffer_size]);
+      std::streamsize read_length;
+
+      auto ctx = EVP_MD_CTX_create();
+      EVP_MD_CTX_init(ctx);
+      EVP_DigestInit_ex(ctx, evp_md, nullptr);
+      while((read_length = stream.read(buffer.get(), buffer_size).gcount()) > 0)
+        EVP_DigestUpdate(ctx, buffer.get(), static_cast<std::size_t>(read_length));
+      EVP_DigestFinal_ex(ctx, reinterpret_cast<unsigned char *>(&md[0]), nullptr);
+      EVP_MD_CTX_destroy(ctx);
+
+      return md;
+    }
+
+    /// Returns md5 hash value from input string.
+    static std::string md5(const std::string &input, std::size_t iterations = 1) noexcept {
+      auto evp_md = EVP_md5();
+      auto hash = message_digest(input, evp_md, MD5_DIGEST_LENGTH);
+      for(std::size_t i = 1; i < iterations; ++i)
+        hash = message_digest(hash, evp_md, MD5_DIGEST_LENGTH);
+      return hash;
+    }
+
+    /// Returns md5 hash value from input stream.
+    static std::string md5(std::istream &stream, std::size_t iterations = 1) noexcept {
+      auto evp_md = EVP_md5();
+      auto hash = stream_digest(stream, evp_md, MD5_DIGEST_LENGTH);
+      for(std::size_t i = 1; i < iterations; ++i)
+        hash = message_digest(hash, evp_md, MD5_DIGEST_LENGTH);
+      return hash;
+    }
+
+    /// Returns sha1 hash value from input string.
+    static std::string sha1(const std::string &input, std::size_t iterations = 1) noexcept {
+      auto evp_md = EVP_sha1();
+      auto hash = message_digest(input, evp_md, SHA_DIGEST_LENGTH);
+      for(std::size_t i = 1; i < iterations; ++i)
+        hash = message_digest(hash, evp_md, SHA_DIGEST_LENGTH);
+      return hash;
+    }
+
+    /// Returns sha1 hash value from input stream.
+    static std::string sha1(std::istream &stream, std::size_t iterations = 1) noexcept {
+      auto evp_md = EVP_sha1();
+      auto hash = stream_digest(stream, evp_md, SHA_DIGEST_LENGTH);
+      for(std::size_t i = 1; i < iterations; ++i)
+        hash = message_digest(hash, evp_md, SHA_DIGEST_LENGTH);
+      return hash;
+    }
+
+    /// Returns sha256 hash value from input string.
+    static std::string sha256(const std::string &input, std::size_t iterations = 1) noexcept {
+      auto evp_md = EVP_sha256();
+      auto hash = message_digest(input, evp_md, SHA256_DIGEST_LENGTH);
+      for(std::size_t i = 1; i < iterations; ++i)
+        hash = message_digest(hash, evp_md, SHA256_DIGEST_LENGTH);
+      return hash;
+    }
+
+    /// Returns sha256 hash value from input stream.
+    static std::string sha256(std::istream &stream, std::size_t iterations = 1) noexcept {
+      auto evp_md = EVP_sha256();
+      auto hash = stream_digest(stream, evp_md, SHA256_DIGEST_LENGTH);
+      for(std::size_t i = 1; i < iterations; ++i)
+        hash = message_digest(hash, evp_md, SHA256_DIGEST_LENGTH);
+      return hash;
+    }
+
+    /// Returns sha512 hash value from input string.
+    static std::string sha512(const std::string &input, std::size_t iterations = 1) noexcept {
+      auto evp_md = EVP_sha512();
+      auto hash = message_digest(input, evp_md, SHA512_DIGEST_LENGTH);
+      for(std::size_t i = 1; i < iterations; ++i)
+        hash = message_digest(hash, evp_md, SHA512_DIGEST_LENGTH);
+      return hash;
+    }
+
+    /// Returns sha512 hash value from input stream.
+    static std::string sha512(std::istream &stream, std::size_t iterations = 1) noexcept {
+      auto evp_md = EVP_sha512();
+      auto hash = stream_digest(stream, evp_md, SHA512_DIGEST_LENGTH);
+      for(std::size_t i = 1; i < iterations; ++i)
+        hash = message_digest(hash, evp_md, SHA512_DIGEST_LENGTH);
+      return hash;
+    }
+
+    /**
+     * Returns PBKDF2 derived key from the given password.
+     *
+     * @param password   The password to derive key from.
+     * @param salt       The salt to be used in the algorithm.
+     * @param iterations Number of iterations to be used in the algorithm.
+     * @param key_size   Number of bytes of the returned key.
+     *
+     * @return The PBKDF2 derived key.
+     */
+    static std::string pbkdf2(const std::string &password, const std::string &salt, int iterations, int key_size) noexcept {
+      std::string key(static_cast<std::size_t>(key_size), '\0');
+      PKCS5_PBKDF2_HMAC_SHA1(password.c_str(), password.size(),
+                             reinterpret_cast<const unsigned char *>(salt.c_str()), salt.size(), iterations,
+                             key_size, reinterpret_cast<unsigned char *>(&key[0]));
+      return key;
+    }
+  };
+} // namespace SimpleWeb
+#endif /* SIMPLE_WEB_CRYPTO_HPP */
diff --git a/third_party/Simple-web-server/repo/docs/Doxyfile b/third_party/Simple-web-server/repo/docs/Doxyfile
new file mode 100644
index 0000000000..cc2a188ae8
--- /dev/null
+++ b/third_party/Simple-web-server/repo/docs/Doxyfile
@@ -0,0 +1,2537 @@
+# Doxyfile 1.8.15
+
+# This file describes the settings to be used by the documentation system
+# doxygen (www.doxygen.org) for a project.
+#
+# All text after a double hash (##) is considered a comment and is placed in
+# front of the TAG it is preceding.
+#
+# All text after a single hash (#) is considered a comment and will be ignored.
+# The format is:
+# TAG = value [value, ...]
+# For lists, items can also be appended using:
+# TAG += value [value, ...]
+# Values that contain spaces should be placed between quotes (\" \").
+
+#---------------------------------------------------------------------------
+# Project related configuration options
+#---------------------------------------------------------------------------
+
+# This tag specifies the encoding used for all characters in the configuration
+# file that follow. The default is UTF-8 which is also the encoding used for all
+# text before the first occurrence of this tag. Doxygen uses libiconv (or the
+# iconv built into libc) for the transcoding. See
+# https://www.gnu.org/software/libiconv/ for the list of possible encodings.
+# The default value is: UTF-8.
+
+DOXYFILE_ENCODING      = UTF-8
+
+# The PROJECT_NAME tag is a single word (or a sequence of words surrounded by
+# double-quotes, unless you are using Doxywizard) that should identify the
+# project for which the documentation is generated. This name is used in the
+# title of most generated pages and in a few other places.
+# The default value is: My Project.
+
+PROJECT_NAME           = "Simple-Web-Server"
+
+# The PROJECT_NUMBER tag can be used to enter a project or revision number. This
+# could be handy for archiving the generated documentation or if some version
+# control system is used.
+
+PROJECT_NUMBER         =
+
+# Using the PROJECT_BRIEF tag one can provide an optional one line description
+# for a project that appears at the top of each page and should give viewer a
+# quick idea about the purpose of the project. Keep the description short.
+
+PROJECT_BRIEF          =
+
+# With the PROJECT_LOGO tag one can specify a logo or an icon that is included
+# in the documentation. The maximum height of the logo should not exceed 55
+# pixels and the maximum width should not exceed 200 pixels. Doxygen will copy
+# the logo to the output directory.
+
+PROJECT_LOGO           =
+
+# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) path
+# into which the generated documentation will be written. If a relative path is
+# entered, it will be relative to the location where doxygen was started. If
+# left blank the current directory will be used.
+
+OUTPUT_DIRECTORY       = doxygen_output
+
+# If the CREATE_SUBDIRS tag is set to YES then doxygen will create 4096 sub-
+# directories (in 2 levels) under the output directory of each output format and
+# will distribute the generated files over these directories. Enabling this
+# option can be useful when feeding doxygen a huge amount of source files, where
+# putting all generated files in the same directory would otherwise causes
+# performance problems for the file system.
+# The default value is: NO.
+
+CREATE_SUBDIRS         = NO
+
+# If the ALLOW_UNICODE_NAMES tag is set to YES, doxygen will allow non-ASCII
+# characters to appear in the names of generated files. If set to NO, non-ASCII
+# characters will be escaped, for example _xE3_x81_x84 will be used for Unicode
+# U+3044.
+# The default value is: NO.
+
+ALLOW_UNICODE_NAMES    = NO
+
+# The OUTPUT_LANGUAGE tag is used to specify the language in which all
+# documentation generated by doxygen is written. Doxygen will use this
+# information to generate all constant output in the proper language.
+# Possible values are: Afrikaans, Arabic, Armenian, Brazilian, Catalan, Chinese,
+# Chinese-Traditional, Croatian, Czech, Danish, Dutch, English (United States),
+# Esperanto, Farsi (Persian), Finnish, French, German, Greek, Hungarian,
+# Indonesian, Italian, Japanese, Japanese-en (Japanese with English messages),
+# Korean, Korean-en (Korean with English messages), Latvian, Lithuanian,
+# Macedonian, Norwegian, Persian (Farsi), Polish, Portuguese, Romanian, Russian,
+# Serbian, Serbian-Cyrillic, Slovak, Slovene, Spanish, Swedish, Turkish,
+# Ukrainian and Vietnamese.
+# The default value is: English.
+
+OUTPUT_LANGUAGE        = English
+
+# The OUTPUT_TEXT_DIRECTION tag is used to specify the direction in which all
+# documentation generated by doxygen is written. Doxygen will use this
+# information to generate all generated output in the proper direction.
+# Possible values are: None, LTR, RTL and Context.
+# The default value is: None.
+
+OUTPUT_TEXT_DIRECTION  = None
+
+# If the BRIEF_MEMBER_DESC tag is set to YES, doxygen will include brief member
+# descriptions after the members that are listed in the file and class
+# documentation (similar to Javadoc). Set to NO to disable this.
+# The default value is: YES.
+
+BRIEF_MEMBER_DESC      = YES
+
+# If the REPEAT_BRIEF tag is set to YES, doxygen will prepend the brief
+# description of a member or function before the detailed description
+#
+# Note: If both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the
+# brief descriptions will be completely suppressed.
+# The default value is: YES.
+
+REPEAT_BRIEF           = YES
+
+# This tag implements a quasi-intelligent brief description abbreviator that is
+# used to form the text in various listings. Each string in this list, if found
+# as the leading text of the brief description, will be stripped from the text
+# and the result, after processing the whole list, is used as the annotated
+# text. Otherwise, the brief description is used as-is. If left blank, the
+# following values are used ($name is automatically replaced with the name of
+# the entity):The $name class, The $name widget, The $name file, is, provides,
+# specifies, contains, represents, a, an and the.
+
+ABBREVIATE_BRIEF       = "The $name class" \
+                         "The $name widget" \
+                         "The $name file" \
+                         is \
+                         provides \
+                         specifies \
+                         contains \
+                         represents \
+                         a \
+                         an \
+                         the
+
+# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then
+# doxygen will generate a detailed section even if there is only a brief
+# description.
+# The default value is: NO.
+
+ALWAYS_DETAILED_SEC    = NO
+
+# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all
+# inherited members of a class in the documentation of that class as if those
+# members were ordinary class members. Constructors, destructors and assignment
+# operators of the base classes will not be shown.
+# The default value is: NO.
+
+INLINE_INHERITED_MEMB  = NO
+
+# If the FULL_PATH_NAMES tag is set to YES, doxygen will prepend the full path
+# before files name in the file list and in the header files. If set to NO the
+# shortest path that makes the file name unique will be used
+# The default value is: YES.
+
+FULL_PATH_NAMES        = YES
+
+# The STRIP_FROM_PATH tag can be used to strip a user-defined part of the path.
+# Stripping is only done if one of the specified strings matches the left-hand
+# part of the path. The tag can be used to show relative paths in the file list.
+# If left blank the directory from which doxygen is run is used as the path to
+# strip.
+#
+# Note that you can specify absolute paths here, but also relative paths, which
+# will be relative from the directory where doxygen is started.
+# This tag requires that the tag FULL_PATH_NAMES is set to YES.
+
+STRIP_FROM_PATH        =
+
+# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of the
+# path mentioned in the documentation of a class, which tells the reader which
+# header file to include in order to use a class. If left blank only the name of
+# the header file containing the class definition is used. Otherwise one should
+# specify the list of include paths that are normally passed to the compiler
+# using the -I flag.
+
+STRIP_FROM_INC_PATH    =
+
+# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter (but
+# less readable) file names. This can be useful is your file systems doesn't
+# support long names like on DOS, Mac, or CD-ROM.
+# The default value is: NO.
+
+SHORT_NAMES            = NO
+
+# If the JAVADOC_AUTOBRIEF tag is set to YES then doxygen will interpret the
+# first line (until the first dot) of a Javadoc-style comment as the brief
+# description. If set to NO, the Javadoc-style will behave just like regular Qt-
+# style comments (thus requiring an explicit @brief command for a brief
+# description.)
+# The default value is: NO.
+
+JAVADOC_AUTOBRIEF      = NO
+
+# If the QT_AUTOBRIEF tag is set to YES then doxygen will interpret the first
+# line (until the first dot) of a Qt-style comment as the brief description. If
+# set to NO, the Qt-style will behave just like regular Qt-style comments (thus
+# requiring an explicit \brief command for a brief description.)
+# The default value is: NO.
+
+QT_AUTOBRIEF           = NO
+
+# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make doxygen treat a
+# multi-line C++ special comment block (i.e. a block of //! or /// comments) as
+# a brief description. This used to be the default behavior. The new default is
+# to treat a multi-line C++ comment block as a detailed description. Set this
+# tag to YES if you prefer the old behavior instead.
+#
+# Note that setting this tag to YES also means that rational rose comments are
+# not recognized any more.
+# The default value is: NO.
+
+MULTILINE_CPP_IS_BRIEF = YES
+
+# If the INHERIT_DOCS tag is set to YES then an undocumented member inherits the
+# documentation from any documented member that it re-implements.
+# The default value is: YES.
+
+INHERIT_DOCS           = YES
+
+# If the SEPARATE_MEMBER_PAGES tag is set to YES then doxygen will produce a new
+# page for each member. If set to NO, the documentation of a member will be part
+# of the file/class/namespace that contains it.
+# The default value is: NO.
+
+SEPARATE_MEMBER_PAGES  = NO
+
+# The TAB_SIZE tag can be used to set the number of spaces in a tab. Doxygen
+# uses this value to replace tabs by spaces in code fragments.
+# Minimum value: 1, maximum value: 16, default value: 4.
+
+TAB_SIZE               = 4
+
+# This tag can be used to specify a number of aliases that act as commands in
+# the documentation. An alias has the form:
+# name=value
+# For example adding
+# "sideeffect=@par Side Effects:\n"
+# will allow you to put the command \sideeffect (or @sideeffect) in the
+# documentation, which will result in a user-defined paragraph with heading
+# "Side Effects:". You can put \n's in the value part of an alias to insert
+# newlines (in the resulting output). You can put ^^ in the value part of an
+# alias to insert a newline as if a physical newline was in the original file.
+# When you need a literal { or } or , in the value part of an alias you have to
+# escape them by means of a backslash (\), this can lead to conflicts with the
+# commands \{ and \} for these it is advised to use the version @{ and @} or use
+# a double escape (\\{ and \\})
+
+ALIASES                =
+
+# This tag can be used to specify a number of word-keyword mappings (TCL only).
+# A mapping has the form "name=value". For example adding "class=itcl::class"
+# will allow you to use the command class in the itcl::class meaning.
+
+TCL_SUBST              =
+
+# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C sources
+# only. Doxygen will then generate output that is more tailored for C. For
+# instance, some of the names that are used will be different. The list of all
+# members will be omitted, etc.
+# The default value is: NO.
+
+OPTIMIZE_OUTPUT_FOR_C  = NO
+
+# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java or
+# Python sources only. Doxygen will then generate output that is more tailored
+# for that language. For instance, namespaces will be presented as packages,
+# qualified scopes will look different, etc.
+# The default value is: NO.
+
+OPTIMIZE_OUTPUT_JAVA   = NO
+
+# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran
+# sources. Doxygen will then generate output that is tailored for Fortran.
+# The default value is: NO.
+
+OPTIMIZE_FOR_FORTRAN   = NO
+
+# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL
+# sources. Doxygen will then generate output that is tailored for VHDL.
+# The default value is: NO.
+
+OPTIMIZE_OUTPUT_VHDL   = NO
+
+# Set the OPTIMIZE_OUTPUT_SLICE tag to YES if your project consists of Slice
+# sources only. Doxygen will then generate output that is more tailored for that
+# language. For instance, namespaces will be presented as modules, types will be
+# separated into more groups, etc.
+# The default value is: NO.
+
+OPTIMIZE_OUTPUT_SLICE  = NO
+
+# Doxygen selects the parser to use depending on the extension of the files it
+# parses. With this tag you can assign which parser to use for a given
+# extension. Doxygen has a built-in mapping, but you can override or extend it
+# using this tag. The format is ext=language, where ext is a file extension, and
+# language is one of the parsers supported by doxygen: IDL, Java, Javascript,
+# Csharp (C#), C, C++, D, PHP, md (Markdown), Objective-C, Python, Slice,
+# Fortran (fixed format Fortran: FortranFixed, free formatted Fortran:
+# FortranFree, unknown formatted Fortran: Fortran. In the later case the parser
+# tries to guess whether the code is fixed or free formatted code, this is the
+# default for Fortran type files), VHDL, tcl. For instance to make doxygen treat
+# .inc files as Fortran files (default is PHP), and .f files as C (default is
+# Fortran), use: inc=Fortran f=C.
+#
+# Note: For files without extension you can use no_extension as a placeholder.
+#
+# Note that for custom extensions you also need to set FILE_PATTERNS otherwise
+# the files are not read by doxygen.
+
+EXTENSION_MAPPING      =
+
+# If the MARKDOWN_SUPPORT tag is enabled then doxygen pre-processes all comments
+# according to the Markdown format, which allows for more readable
+# documentation. See https://daringfireball.net/projects/markdown/ for details.
+# The output of markdown processing is further processed by doxygen, so you can
+# mix doxygen, HTML, and XML commands with Markdown formatting. Disable only in
+# case of backward compatibilities issues.
+# The default value is: YES.
+
+MARKDOWN_SUPPORT       = YES
+
+# When the TOC_INCLUDE_HEADINGS tag is set to a non-zero value, all headings up
+# to that level are automatically included in the table of contents, even if
+# they do not have an id attribute.
+# Note: This feature currently applies only to Markdown headings.
+# Minimum value: 0, maximum value: 99, default value: 0.
+# This tag requires that the tag MARKDOWN_SUPPORT is set to YES.
+
+TOC_INCLUDE_HEADINGS   = 0
+
+# When enabled doxygen tries to link words that correspond to documented
+# classes, or namespaces to their corresponding documentation. Such a link can
+# be prevented in individual cases by putting a % sign in front of the word or
+# globally by setting AUTOLINK_SUPPORT to NO.
+# The default value is: YES.
+
+AUTOLINK_SUPPORT       = YES
+
+# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want
+# to include (a tag file for) the STL sources as input, then you should set this
+# tag to YES in order to let doxygen match functions declarations and
+# definitions whose arguments contain STL classes (e.g. func(std::string);
+# versus func(std::string) {}). This also make the inheritance and collaboration
+# diagrams that involve STL classes more complete and accurate.
+# The default value is: NO.
+
+BUILTIN_STL_SUPPORT    = NO
+
+# If you use Microsoft's C++/CLI language, you should set this option to YES to
+# enable parsing support.
+# The default value is: NO.
+
+CPP_CLI_SUPPORT        = NO
+
+# Set the SIP_SUPPORT tag to YES if your project consists of sip (see:
+# https://www.riverbankcomputing.com/software/sip/intro) sources only. Doxygen
+# will parse them like normal C++ but will assume all classes use public instead
+# of private inheritance when no explicit protection keyword is present.
+# The default value is: NO.
+
+SIP_SUPPORT            = NO
+
+# For Microsoft's IDL there are propget and propput attributes to indicate
+# getter and setter methods for a property. Setting this option to YES will make
+# doxygen to replace the get and set methods by a property in the documentation.
+# This will only work if the methods are indeed getting or setting a simple
+# type. If this is not the case, or you want to show the methods anyway, you
+# should set this option to NO.
+# The default value is: YES.
+
+IDL_PROPERTY_SUPPORT   = YES
+
+# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC
+# tag is set to YES then doxygen will reuse the documentation of the first
+# member in the group (if any) for the other members of the group. By default
+# all members of a group must be documented explicitly.
+# The default value is: NO.
+
+DISTRIBUTE_GROUP_DOC   = NO
+
+# If one adds a struct or class to a group and this option is enabled, then also
+# any nested class or struct is added to the same group. By default this option
+# is disabled and one has to add nested compounds explicitly via \ingroup.
+# The default value is: NO.
+
+GROUP_NESTED_COMPOUNDS = NO
+
+# Set the SUBGROUPING tag to YES to allow class member groups of the same type
+# (for instance a group of public functions) to be put as a subgroup of that
+# type (e.g. under the Public Functions section). Set it to NO to prevent
+# subgrouping. Alternatively, this can be done per class using the
+# \nosubgrouping command.
+# The default value is: YES.
+
+SUBGROUPING            = YES
+
+# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and unions
+# are shown inside the group in which they are included (e.g. using \ingroup)
+# instead of on a separate page (for HTML and Man pages) or section (for LaTeX
+# and RTF).
+#
+# Note that this feature does not work in combination with
+# SEPARATE_MEMBER_PAGES.
+# The default value is: NO.
+
+INLINE_GROUPED_CLASSES = NO
+
+# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and unions
+# with only public data fields or simple typedef fields will be shown inline in
+# the documentation of the scope in which they are defined (i.e. file,
+# namespace, or group documentation), provided this scope is documented. If set
+# to NO, structs, classes, and unions are shown on a separate page (for HTML and
+# Man pages) or section (for LaTeX and RTF).
+# The default value is: NO.
+
+INLINE_SIMPLE_STRUCTS  = NO
+
+# When TYPEDEF_HIDES_STRUCT tag is enabled, a typedef of a struct, union, or
+# enum is documented as struct, union, or enum with the name of the typedef. So
+# typedef struct TypeS {} TypeT, will appear in the documentation as a struct
+# with name TypeT. When disabled the typedef will appear as a member of a file,
+# namespace, or class. And the struct will be named TypeS. This can typically be
+# useful for C code in case the coding convention dictates that all compound
+# types are typedef'ed and only the typedef is referenced, never the tag name.
+# The default value is: NO.
+
+TYPEDEF_HIDES_STRUCT   = NO
+
+# The size of the symbol lookup cache can be set using LOOKUP_CACHE_SIZE. This
+# cache is used to resolve symbols given their name and scope. Since this can be
+# an expensive process and often the same symbol appears multiple times in the
+# code, doxygen keeps a cache of pre-resolved symbols. If the cache is too small
+# doxygen will become slower. If the cache is too large, memory is wasted. The
+# cache size is given by this formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range
+# is 0..9, the default is 0, corresponding to a cache size of 2^16=65536
+# symbols. At the end of a run doxygen will report the cache usage and suggest
+# the optimal cache size from a speed point of view.
+# Minimum value: 0, maximum value: 9, default value: 0.
+
+LOOKUP_CACHE_SIZE      = 0
+
+#---------------------------------------------------------------------------
+# Build related configuration options
+#---------------------------------------------------------------------------
+
+# If the EXTRACT_ALL tag is set to YES, doxygen will assume all entities in
+# documentation are documented, even if no documentation was available. Private
+# class members and static file members will be hidden unless the
+# EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES.
+# Note: This will also disable the warnings about undocumented members that are
+# normally produced when WARNINGS is set to YES.
+# The default value is: NO.
+
+EXTRACT_ALL            = YES
+
+# If the EXTRACT_PRIVATE tag is set to YES, all private members of a class will
+# be included in the documentation.
+# The default value is: NO.
+
+EXTRACT_PRIVATE        = NO
+
+# If the EXTRACT_PACKAGE tag is set to YES, all members with package or internal
+# scope will be included in the documentation.
+# The default value is: NO.
+
+EXTRACT_PACKAGE        = NO
+
+# If the EXTRACT_STATIC tag is set to YES, all static members of a file will be
+# included in the documentation.
+# The default value is: NO.
+
+EXTRACT_STATIC         = NO
+
+# If the EXTRACT_LOCAL_CLASSES tag is set to YES, classes (and structs) defined
+# locally in source files will be included in the documentation. If set to NO,
+# only classes defined in header files are included. Does not have any effect
+# for Java sources.
+# The default value is: YES.
+
+EXTRACT_LOCAL_CLASSES  = YES
+
+# This flag is only useful for Objective-C code. If set to YES, local methods,
+# which are defined in the implementation section but not in the interface are
+# included in the documentation. If set to NO, only methods in the interface are
+# included.
+# The default value is: NO.
+
+EXTRACT_LOCAL_METHODS  = NO
+
+# If this flag is set to YES, the members of anonymous namespaces will be
+# extracted and appear in the documentation as a namespace called
+# 'anonymous_namespace{file}', where file will be replaced with the base name of
+# the file that contains the anonymous namespace. By default anonymous namespace
+# are hidden.
+# The default value is: NO.
+
+EXTRACT_ANON_NSPACES   = NO
+
+# If the HIDE_UNDOC_MEMBERS tag is set to YES, doxygen will hide all
+# undocumented members inside documented classes or files. If set to NO these
+# members will be included in the various overviews, but no documentation
+# section is generated. This option has no effect if EXTRACT_ALL is enabled.
+# The default value is: NO.
+
+HIDE_UNDOC_MEMBERS     = NO
+
+# If the HIDE_UNDOC_CLASSES tag is set to YES, doxygen will hide all
+# undocumented classes that are normally visible in the class hierarchy. If set
+# to NO, these classes will be included in the various overviews. This option
+# has no effect if EXTRACT_ALL is enabled.
+# The default value is: NO.
+
+HIDE_UNDOC_CLASSES     = NO
+
+# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, doxygen will hide all friend
+# (class|struct|union) declarations. If set to NO, these declarations will be
+# included in the documentation.
+# The default value is: NO.
+
+HIDE_FRIEND_COMPOUNDS  = NO
+
+# If the HIDE_IN_BODY_DOCS tag is set to YES, doxygen will hide any
+# documentation blocks found inside the body of a function. If set to NO, these
+# blocks will be appended to the function's detailed documentation block.
+# The default value is: NO.
+
+HIDE_IN_BODY_DOCS      = NO
+
+# The INTERNAL_DOCS tag determines if documentation that is typed after a
+# \internal command is included. If the tag is set to NO then the documentation
+# will be excluded. Set it to YES to include the internal documentation.
+# The default value is: NO.
+
+INTERNAL_DOCS          = NO
+
+# If the CASE_SENSE_NAMES tag is set to NO then doxygen will only generate file
+# names in lower-case letters. If set to YES, upper-case letters are also
+# allowed. This is useful if you have classes or files whose names only differ
+# in case and if your file system supports case sensitive file names. Windows
+# and Mac users are advised to set this option to NO.
+# The default value is: system dependent.
+
+CASE_SENSE_NAMES       = NO
+
+# If the HIDE_SCOPE_NAMES tag is set to NO then doxygen will show members with
+# their full class and namespace scopes in the documentation. If set to YES, the
+# scope will be hidden.
+# The default value is: NO.
+
+HIDE_SCOPE_NAMES       = NO
+
+# If the HIDE_COMPOUND_REFERENCE tag is set to NO (default) then doxygen will
+# append additional text to a page's title, such as Class Reference. If set to
+# YES the compound reference will be hidden.
+# The default value is: NO.
+
+HIDE_COMPOUND_REFERENCE= NO
+
+# If the SHOW_INCLUDE_FILES tag is set to YES then doxygen will put a list of
+# the files that are included by a file in the documentation of that file.
+# The default value is: YES.
+
+SHOW_INCLUDE_FILES     = YES
+
+# If the SHOW_GROUPED_MEMB_INC tag is set to YES then Doxygen will add for each
+# grouped member an include statement to the documentation, telling the reader
+# which file to include in order to use the member.
+# The default value is: NO.
+
+SHOW_GROUPED_MEMB_INC  = NO
+
+# If the FORCE_LOCAL_INCLUDES tag is set to YES then doxygen will list include
+# files with double quotes in the documentation rather than with sharp brackets.
+# The default value is: NO.
+
+FORCE_LOCAL_INCLUDES   = NO
+
+# If the INLINE_INFO tag is set to YES then a tag [inline] is inserted in the
+# documentation for inline members.
+# The default value is: YES.
+
+INLINE_INFO            = YES
+
+# If the SORT_MEMBER_DOCS tag is set to YES then doxygen will sort the
+# (detailed) documentation of file and class members alphabetically by member
+# name. If set to NO, the members will appear in declaration order.
+# The default value is: YES.
+
+SORT_MEMBER_DOCS       = YES
+
+# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the brief
+# descriptions of file, namespace and class members alphabetically by member
+# name. If set to NO, the members will appear in declaration order. Note that
+# this will also influence the order of the classes in the class list.
+# The default value is: NO.
+
+SORT_BRIEF_DOCS        = NO
+
+# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the
+# (brief and detailed) documentation of class members so that constructors and
+# destructors are listed first. If set to NO the constructors will appear in the
+# respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.
+# Note: If SORT_BRIEF_DOCS is set to NO this option is ignored for sorting brief
+# member documentation.
+# Note: If SORT_MEMBER_DOCS is set to NO this option is ignored for sorting
+# detailed member documentation.
+# The default value is: NO.
+
+SORT_MEMBERS_CTORS_1ST = NO
+
+# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the hierarchy
+# of group names into alphabetical order. If set to NO the group names will
+# appear in their defined order.
+# The default value is: NO.
+
+SORT_GROUP_NAMES       = NO
+
+# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be sorted by
+# fully-qualified names, including namespaces. If set to NO, the class list will
+# be sorted only by class name, not including the namespace part.
+# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.
+# Note: This option applies only to the class list, not to the alphabetical
+# list.
+# The default value is: NO.
+
+SORT_BY_SCOPE_NAME     = NO
+
+# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to do proper
+# type resolution of all parameters of a function it will reject a match between
+# the prototype and the implementation of a member function even if there is
+# only one candidate or it is obvious which candidate to choose by doing a
+# simple string match. By disabling STRICT_PROTO_MATCHING doxygen will still
+# accept a match between prototype and implementation in such cases.
+# The default value is: NO.
+
+STRICT_PROTO_MATCHING  = NO
+
+# The GENERATE_TODOLIST tag can be used to enable (YES) or disable (NO) the todo
+# list. This list is created by putting \todo commands in the documentation.
+# The default value is: YES.
+
+GENERATE_TODOLIST      = YES
+
+# The GENERATE_TESTLIST tag can be used to enable (YES) or disable (NO) the test
+# list. This list is created by putting \test commands in the documentation.
+# The default value is: YES.
+
+GENERATE_TESTLIST      = YES
+
+# The GENERATE_BUGLIST tag can be used to enable (YES) or disable (NO) the bug
+# list. This list is created by putting \bug commands in the documentation.
+# The default value is: YES.
+
+GENERATE_BUGLIST       = YES
+
+# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or disable (NO)
+# the deprecated list. This list is created by putting \deprecated commands in
+# the documentation.
+# The default value is: YES.
+
+GENERATE_DEPRECATEDLIST= YES
+
+# The ENABLED_SECTIONS tag can be used to enable conditional documentation
+# sections, marked by \if <section_label> ... \endif and \cond <section_label>
+# ... \endcond blocks.
+
+ENABLED_SECTIONS       =
+
+# The MAX_INITIALIZER_LINES tag determines the maximum number of lines that the
+# initial value of a variable or macro / define can have for it to appear in the
+# documentation. If the initializer consists of more lines than specified here
+# it will be hidden. Use a value of 0 to hide initializers completely. The
+# appearance of the value of individual variables and macros / defines can be
+# controlled using \showinitializer or \hideinitializer command in the
+# documentation regardless of this setting.
+# Minimum value: 0, maximum value: 10000, default value: 30.
+
+MAX_INITIALIZER_LINES  = 30
+
+# Set the SHOW_USED_FILES tag to NO to disable the list of files generated at
+# the bottom of the documentation of classes and structs. If set to YES, the
+# list will mention the files that were used to generate the documentation.
+# The default value is: YES.
+
+SHOW_USED_FILES        = YES
+
+# Set the SHOW_FILES tag to NO to disable the generation of the Files page. This
+# will remove the Files entry from the Quick Index and from the Folder Tree View
+# (if specified).
+# The default value is: YES.
+
+SHOW_FILES             = YES
+
+# Set the SHOW_NAMESPACES tag to NO to disable the generation of the Namespaces
+# page. This will remove the Namespaces entry from the Quick Index and from the
+# Folder Tree View (if specified).
+# The default value is: YES.
+
+SHOW_NAMESPACES        = NO
+
+# The FILE_VERSION_FILTER tag can be used to specify a program or script that
+# doxygen should invoke to get the current version for each file (typically from
+# the version control system). Doxygen will invoke the program by executing (via
+# popen()) the command command input-file, where command is the value of the
+# FILE_VERSION_FILTER tag, and input-file is the name of an input file provided
+# by doxygen. Whatever the program writes to standard output is used as the file
+# version. For an example see the documentation.
+
+FILE_VERSION_FILTER    =
+
+# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed
+# by doxygen. The layout file controls the global structure of the generated
+# output files in an output format independent way. To create the layout file
+# that represents doxygen's defaults, run doxygen with the -l option. You can
+# optionally specify a file name after the option, if omitted DoxygenLayout.xml
+# will be used as the name of the layout file.
+#
+# Note that if you run doxygen from a directory containing a file called
+# DoxygenLayout.xml, doxygen will parse it automatically even if the LAYOUT_FILE
+# tag is left empty.
+
+LAYOUT_FILE            =
+
+# The CITE_BIB_FILES tag can be used to specify one or more bib files containing
+# the reference definitions. This must be a list of .bib files. The .bib
+# extension is automatically appended if omitted. This requires the bibtex tool
+# to be installed. See also https://en.wikipedia.org/wiki/BibTeX for more info.
+# For LaTeX the style of the bibliography can be controlled using
+# LATEX_BIB_STYLE. To use this feature you need bibtex and perl available in the
+# search path. See also \cite for info how to create references.
+
+CITE_BIB_FILES         =
+
+#---------------------------------------------------------------------------
+# Configuration options related to warning and progress messages
+#---------------------------------------------------------------------------
+
+# The QUIET tag can be used to turn on/off the messages that are generated to
+# standard output by doxygen. If QUIET is set to YES this implies that the
+# messages are off.
+# The default value is: NO.
+
+QUIET                  = NO
+
+# The WARNINGS tag can be used to turn on/off the warning messages that are
+# generated to standard error (stderr) by doxygen. If WARNINGS is set to YES
+# this implies that the warnings are on.
+#
+# Tip: Turn warnings on while writing the documentation.
+# The default value is: YES.
+
+WARNINGS               = YES
+
+# If the WARN_IF_UNDOCUMENTED tag is set to YES then doxygen will generate
+# warnings for undocumented members. If EXTRACT_ALL is set to YES then this flag
+# will automatically be disabled.
+# The default value is: YES.
+
+WARN_IF_UNDOCUMENTED   = YES
+
+# If the WARN_IF_DOC_ERROR tag is set to YES, doxygen will generate warnings for
+# potential errors in the documentation, such as not documenting some parameters
+# in a documented function, or documenting parameters that don't exist or using
+# markup commands wrongly.
+# The default value is: YES.
+
+WARN_IF_DOC_ERROR      = YES
+
+# This WARN_NO_PARAMDOC option can be enabled to get warnings for functions that
+# are documented, but have no documentation for their parameters or return
+# value. If set to NO, doxygen will only warn about wrong or incomplete
+# parameter documentation, but not about the absence of documentation. If
+# EXTRACT_ALL is set to YES then this flag will automatically be disabled.
+# The default value is: NO.
+
+WARN_NO_PARAMDOC       = NO
+
+# If the WARN_AS_ERROR tag is set to YES then doxygen will immediately stop when
+# a warning is encountered.
+# The default value is: NO.
+
+WARN_AS_ERROR          = NO
+
+# The WARN_FORMAT tag determines the format of the warning messages that doxygen
+# can produce. The string should contain the $file, $line, and $text tags, which
+# will be replaced by the file and line number from which the warning originated
+# and the warning text. Optionally the format may contain $version, which will
+# be replaced by the version of the file (if it could be obtained via
+# FILE_VERSION_FILTER)
+# The default value is: $file:$line: $text.
+
+WARN_FORMAT            = "$file:$line: $text"
+
+# The WARN_LOGFILE tag can be used to specify a file to which warning and error
+# messages should be written. If left blank the output is written to standard
+# error (stderr).
+
+WARN_LOGFILE           =
+
+#---------------------------------------------------------------------------
+# Configuration options related to the input files
+#---------------------------------------------------------------------------
+
+# The INPUT tag is used to specify the files and/or directories that contain
+# documented source files. You may enter file names like myfile.cpp or
+# directories like /usr/src/myproject. Separate the files or directories with
+# spaces. See also FILE_PATTERNS and EXTENSION_MAPPING
+# Note: If this tag is empty the current directory is searched.
+
+INPUT                  =
+
+# This tag can be used to specify the character encoding of the source files
+# that doxygen parses. Internally doxygen uses the UTF-8 encoding. Doxygen uses
+# libiconv (or the iconv built into libc) for the transcoding. See the libiconv
+# documentation (see: https://www.gnu.org/software/libiconv/) for the list of
+# possible encodings.
+# The default value is: UTF-8.
+
+INPUT_ENCODING         = UTF-8
+
+# If the value of the INPUT tag contains directories, you can use the
+# FILE_PATTERNS tag to specify one or more wildcard patterns (like *.cpp and
+# *.h) to filter out the source-files in the directories.
+#
+# Note that for custom extensions or not directly supported extensions you also
+# need to set EXTENSION_MAPPING for the extension otherwise the files are not
+# read by doxygen.
+#
+# If left blank the following patterns are tested:*.c, *.cc, *.cxx, *.cpp,
+# *.c++, *.java, *.ii, *.ixx, *.ipp, *.i++, *.inl, *.idl, *.ddl, *.odl, *.h,
+# *.hh, *.hxx, *.hpp, *.h++, *.cs, *.d, *.php, *.php4, *.php5, *.phtml, *.inc,
+# *.m, *.markdown, *.md, *.mm, *.dox, *.py, *.pyw, *.f90, *.f95, *.f03, *.f08,
+# *.f, *.for, *.tcl, *.vhd, *.vhdl, *.ucf, *.qsf and *.ice.
+
+FILE_PATTERNS          = *.c \
+                         *.cc \
+                         *.cxx \
+                         *.cpp \
+                         *.c++ \
+                         *.java \
+                         *.ii \
+                         *.ixx \
+                         *.ipp \
+                         *.i++ \
+                         *.inl \
+                         *.idl \
+                         *.ddl \
+                         *.odl \
+                         *.h \
+                         *.hh \
+                         *.hxx \
+                         *.hpp \
+                         *.h++ \
+                         *.cs \
+                         *.d \
+                         *.php \
+                         *.php4 \
+                         *.php5 \
+                         *.phtml \
+                         *.inc \
+                         *.m \
+                         *.markdown \
+                         *.md \
+                         *.mm \
+                         *.dox \
+                         *.py \
+                         *.pyw \
+                         *.f90 \
+                         *.f95 \
+                         *.f03 \
+                         *.f08 \
+                         *.f \
+                         *.for \
+                         *.tcl \
+                         *.vhd \
+                         *.vhdl \
+                         *.ucf \
+                         *.qsf \
+                         *.ice
+
+# The RECURSIVE tag can be used to specify whether or not subdirectories should
+# be searched for input files as well.
+# The default value is: NO.
+
+RECURSIVE              = NO
+
+# The EXCLUDE tag can be used to specify files and/or directories that should be
+# excluded from the INPUT source files. This way you can easily exclude a
+# subdirectory from a directory tree whose root is specified with the INPUT tag.
+#
+# Note that relative paths are relative to the directory from which doxygen is
+# run.
+
+EXCLUDE                =
+
+# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or
+# directories that are symbolic links (a Unix file system feature) are excluded
+# from the input.
+# The default value is: NO.
+
+EXCLUDE_SYMLINKS       = NO
+
+# If the value of the INPUT tag contains directories, you can use the
+# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude
+# certain files from those directories.
+#
+# Note that the wildcards are matched against the file with absolute path, so to
+# exclude all test directories for example use the pattern */test/*
+
+EXCLUDE_PATTERNS       =
+
+# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names
+# (namespaces, classes, functions, etc.) that should be excluded from the
+# output. The symbol name can be a fully qualified name, a word, or if the
+# wildcard * is used, a substring. Examples: ANamespace, AClass,
+# AClass::ANamespace, ANamespace::*Test
+#
+# Note that the wildcards are matched against the file with absolute path, so to
+# exclude all test directories use the pattern */test/*
+
+EXCLUDE_SYMBOLS        =
+
+# The EXAMPLE_PATH tag can be used to specify one or more files or directories
+# that contain example code fragments that are included (see the \include
+# command).
+
+EXAMPLE_PATH           =
+
+# If the value of the EXAMPLE_PATH tag contains directories, you can use the
+# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp and
+# *.h) to filter out the source-files in the directories. If left blank all
+# files are included.
+
+EXAMPLE_PATTERNS       = *
+
+# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be
+# searched for input files to be used with the \include or \dontinclude commands
+# irrespective of the value of the RECURSIVE tag.
+# The default value is: NO.
+
+EXAMPLE_RECURSIVE      = NO
+
+# The IMAGE_PATH tag can be used to specify one or more files or directories
+# that contain images that are to be included in the documentation (see the
+# \image command).
+
+IMAGE_PATH             =
+
+# The INPUT_FILTER tag can be used to specify a program that doxygen should
+# invoke to filter for each input file. Doxygen will invoke the filter program
+# by executing (via popen()) the command:
+#
+# <filter> <input-file>
+#
+# where <filter> is the value of the INPUT_FILTER tag, and <input-file> is the
+# name of an input file. Doxygen will then use the output that the filter
+# program writes to standard output. If FILTER_PATTERNS is specified, this tag
+# will be ignored.
+#
+# Note that the filter must not add or remove lines; it is applied before the
+# code is scanned, but not when the output code is generated. If lines are added
+# or removed, the anchors will not be placed correctly.
+#
+# Note that for custom extensions or not directly supported extensions you also
+# need to set EXTENSION_MAPPING for the extension otherwise the files are not
+# properly processed by doxygen.
+
+INPUT_FILTER           =
+
+# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern
+# basis. Doxygen will compare the file name with each pattern and apply the
+# filter if there is a match. The filters are a list of the form: pattern=filter
+# (like *.cpp=my_cpp_filter). See INPUT_FILTER for further information on how
+# filters are used. If the FILTER_PATTERNS tag is empty or if none of the
+# patterns match the file name, INPUT_FILTER is applied.
+#
+# Note that for custom extensions or not directly supported extensions you also
+# need to set EXTENSION_MAPPING for the extension otherwise the files are not
+# properly processed by doxygen.
+
+FILTER_PATTERNS        =
+
+# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using
+# INPUT_FILTER) will also be used to filter the input files that are used for
+# producing the source files to browse (i.e. when SOURCE_BROWSER is set to YES).
+# The default value is: NO.
+
+FILTER_SOURCE_FILES    = NO
+
+# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file
+# pattern. A pattern will override the setting for FILTER_PATTERN (if any) and
+# it is also possible to disable source filtering for a specific pattern using
+# *.ext= (so without naming a filter).
+# This tag requires that the tag FILTER_SOURCE_FILES is set to YES.
+
+FILTER_SOURCE_PATTERNS =
+
+# If the USE_MDFILE_AS_MAINPAGE tag refers to the name of a markdown file that
+# is part of the input, its contents will be placed on the main page
+# (index.html). This can be useful if you have a project on for instance GitHub
+# and want to reuse the introduction page also for the doxygen output.
+
+USE_MDFILE_AS_MAINPAGE = README.md
+
+#---------------------------------------------------------------------------
+# Configuration options related to source browsing
+#---------------------------------------------------------------------------
+
+# If the SOURCE_BROWSER tag is set to YES then a list of source files will be
+# generated. Documented entities will be cross-referenced with these sources.
+#
+# Note: To get rid of all source code in the generated output, make sure that
+# also VERBATIM_HEADERS is set to NO.
+# The default value is: NO.
+
+SOURCE_BROWSER         = NO
+
+# Setting the INLINE_SOURCES tag to YES will include the body of functions,
+# classes and enums directly into the documentation.
+# The default value is: NO.
+
+INLINE_SOURCES         = NO
+
+# Setting the STRIP_CODE_COMMENTS tag to YES will instruct doxygen to hide any
+# special comment blocks from generated source code fragments. Normal C, C++ and
+# Fortran comments will always remain visible.
+# The default value is: YES.
+
+STRIP_CODE_COMMENTS    = YES
+
+# If the REFERENCED_BY_RELATION tag is set to YES then for each documented
+# entity all documented functions referencing it will be listed.
+# The default value is: NO.
+
+REFERENCED_BY_RELATION = NO
+
+# If the REFERENCES_RELATION tag is set to YES then for each documented function
+# all documented entities called/used by that function will be listed.
+# The default value is: NO.
+
+REFERENCES_RELATION    = NO
+
+# If the REFERENCES_LINK_SOURCE tag is set to YES and SOURCE_BROWSER tag is set
+# to YES then the hyperlinks from functions in REFERENCES_RELATION and
+# REFERENCED_BY_RELATION lists will link to the source code. Otherwise they will
+# link to the documentation.
+# The default value is: YES.
+
+REFERENCES_LINK_SOURCE = YES
+
+# If SOURCE_TOOLTIPS is enabled (the default) then hovering a hyperlink in the
+# source code will show a tooltip with additional information such as prototype,
+# brief description and links to the definition and documentation. Since this
+# will make the HTML file larger and loading of large files a bit slower, you
+# can opt to disable this feature.
+# The default value is: YES.
+# This tag requires that the tag SOURCE_BROWSER is set to YES.
+
+SOURCE_TOOLTIPS        = YES
+
+# If the USE_HTAGS tag is set to YES then the references to source code will
+# point to the HTML generated by the htags(1) tool instead of doxygen built-in
+# source browser. The htags tool is part of GNU's global source tagging system
+# (see https://www.gnu.org/software/global/global.html). You will need version
+# 4.8.6 or higher.
+#
+# To use it do the following:
+# - Install the latest version of global
+# - Enable SOURCE_BROWSER and USE_HTAGS in the configuration file
+# - Make sure the INPUT points to the root of the source tree
+# - Run doxygen as normal
+#
+# Doxygen will invoke htags (and that will in turn invoke gtags), so these
+# tools must be available from the command line (i.e. in the search path).
+#
+# The result: instead of the source browser generated by doxygen, the links to
+# source code will now point to the output of htags.
+# The default value is: NO.
+# This tag requires that the tag SOURCE_BROWSER is set to YES.
+
+USE_HTAGS              = NO
+
+# If the VERBATIM_HEADERS tag is set the YES then doxygen will generate a
+# verbatim copy of the header file for each class for which an include is
+# specified. Set to NO to disable this.
+# See also: Section \class.
+# The default value is: YES.
+
+VERBATIM_HEADERS       = YES
+
+#---------------------------------------------------------------------------
+# Configuration options related to the alphabetical class index
+#---------------------------------------------------------------------------
+
+# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index of all
+# compounds will be generated. Enable this if the project contains a lot of
+# classes, structs, unions or interfaces.
+# The default value is: YES.
+
+ALPHABETICAL_INDEX     = YES
+
+# The COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns in
+# which the alphabetical index list will be split.
+# Minimum value: 1, maximum value: 20, default value: 5.
+# This tag requires that the tag ALPHABETICAL_INDEX is set to YES.
+
+COLS_IN_ALPHA_INDEX    = 5
+
+# In case all classes in a project start with a common prefix, all classes will
+# be put under the same header in the alphabetical index. The IGNORE_PREFIX tag
+# can be used to specify a prefix (or a list of prefixes) that should be ignored
+# while generating the index headers.
+# This tag requires that the tag ALPHABETICAL_INDEX is set to YES.
+
+IGNORE_PREFIX          =
+
+#---------------------------------------------------------------------------
+# Configuration options related to the HTML output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_HTML tag is set to YES, doxygen will generate HTML output
+# The default value is: YES.
+
+GENERATE_HTML          = YES
+
+# The HTML_OUTPUT tag is used to specify where the HTML docs will be put. If a
+# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of
+# it.
+# The default directory is: html.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_OUTPUT            = html
+
+# The HTML_FILE_EXTENSION tag can be used to specify the file extension for each
+# generated HTML page (for example: .htm, .php, .asp).
+# The default value is: .html.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_FILE_EXTENSION    = .html
+
+# The HTML_HEADER tag can be used to specify a user-defined HTML header file for
+# each generated HTML page. If the tag is left blank doxygen will generate a
+# standard header.
+#
+# To get valid HTML the header file that includes any scripts and style sheets
+# that doxygen needs, which is dependent on the configuration options used (e.g.
+# the setting GENERATE_TREEVIEW). It is highly recommended to start with a
+# default header using
+# doxygen -w html new_header.html new_footer.html new_stylesheet.css
+# YourConfigFile
+# and then modify the file new_header.html. See also section "Doxygen usage"
+# for information on how to generate the default header that doxygen normally
+# uses.
+# Note: The header is subject to change so you typically have to regenerate the
+# default header when upgrading to a newer version of doxygen. For a description
+# of the possible markers and block names see the documentation.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_HEADER            =
+
+# The HTML_FOOTER tag can be used to specify a user-defined HTML footer for each
+# generated HTML page. If the tag is left blank doxygen will generate a standard
+# footer. See HTML_HEADER for more information on how to generate a default
+# footer and what special commands can be used inside the footer. See also
+# section "Doxygen usage" for information on how to generate the default footer
+# that doxygen normally uses.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_FOOTER            =
+
+# The HTML_STYLESHEET tag can be used to specify a user-defined cascading style
+# sheet that is used by each HTML page. It can be used to fine-tune the look of
+# the HTML output. If left blank doxygen will generate a default style sheet.
+# See also section "Doxygen usage" for information on how to generate the style
+# sheet that doxygen normally uses.
+# Note: It is recommended to use HTML_EXTRA_STYLESHEET instead of this tag, as
+# it is more robust and this tag (HTML_STYLESHEET) will in the future become
+# obsolete.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_STYLESHEET        =
+
+# The HTML_EXTRA_STYLESHEET tag can be used to specify additional user-defined
+# cascading style sheets that are included after the standard style sheets
+# created by doxygen. Using this option one can overrule certain style aspects.
+# This is preferred over using HTML_STYLESHEET since it does not replace the
+# standard style sheet and is therefore more robust against future updates.
+# Doxygen will copy the style sheet files to the output directory.
+# Note: The order of the extra style sheet files is of importance (e.g. the last
+# style sheet in the list overrules the setting of the previous ones in the
+# list). For an example see the documentation.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_EXTRA_STYLESHEET  =
+
+# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or
+# other source files which should be copied to the HTML output directory. Note
+# that these files will be copied to the base HTML output directory. Use the
+# $relpath^ marker in the HTML_HEADER and/or HTML_FOOTER files to load these
+# files. In the HTML_STYLESHEET file, use the file name only. Also note that the
+# files will be copied as-is; there are no commands or markers available.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_EXTRA_FILES       =
+
+# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output. Doxygen
+# will adjust the colors in the style sheet and background images according to
+# this color. Hue is specified as an angle on a colorwheel, see
+# https://en.wikipedia.org/wiki/Hue for more information. For instance the value
+# 0 represents red, 60 is yellow, 120 is green, 180 is cyan, 240 is blue, 300
+# purple, and 360 is red again.
+# Minimum value: 0, maximum value: 359, default value: 220.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_COLORSTYLE_HUE    = 220
+
+# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of the colors
+# in the HTML output. For a value of 0 the output will use grayscales only. A
+# value of 255 will produce the most vivid colors.
+# Minimum value: 0, maximum value: 255, default value: 100.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_COLORSTYLE_SAT    = 100
+
+# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to the
+# luminance component of the colors in the HTML output. Values below 100
+# gradually make the output lighter, whereas values above 100 make the output
+# darker. The value divided by 100 is the actual gamma applied, so 80 represents
+# a gamma of 0.8, The value 220 represents a gamma of 2.2, and 100 does not
+# change the gamma.
+# Minimum value: 40, maximum value: 240, default value: 80.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_COLORSTYLE_GAMMA  = 80
+
+# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML
+# page will contain the date and time when the page was generated. Setting this
+# to YES can help to show when doxygen was last run and thus if the
+# documentation is up to date.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_TIMESTAMP         = NO
+
+# If the HTML_DYNAMIC_MENUS tag is set to YES then the generated HTML
+# documentation will contain a main index with vertical navigation menus that
+# are dynamically created via Javascript. If disabled, the navigation index will
+# consists of multiple levels of tabs that are statically embedded in every HTML
+# page. Disable this option to support browsers that do not have Javascript,
+# like the Qt help browser.
+# The default value is: YES.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_DYNAMIC_MENUS     = YES
+
+# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML
+# documentation will contain sections that can be hidden and shown after the
+# page has loaded.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_DYNAMIC_SECTIONS  = NO
+
+# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries
+# shown in the various tree structured indices initially; the user can expand
+# and collapse entries dynamically later on. Doxygen will expand the tree to
+# such a level that at most the specified number of entries are visible (unless
+# a fully collapsed tree already exceeds this amount). So setting the number of
+# entries 1 will produce a full collapsed tree by default. 0 is a special value
+# representing an infinite number of entries and will result in a full expanded
+# tree by default.
+# Minimum value: 0, maximum value: 9999, default value: 100.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+HTML_INDEX_NUM_ENTRIES = 100
+
+# If the GENERATE_DOCSET tag is set to YES, additional index files will be
+# generated that can be used as input for Apple's Xcode 3 integrated development
+# environment (see: https://developer.apple.com/xcode/), introduced with OSX
+# 10.5 (Leopard). To create a documentation set, doxygen will generate a
+# Makefile in the HTML output directory. Running make will produce the docset in
+# that directory and running make install will install the docset in
+# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find it at
+# startup. See https://developer.apple.com/library/archive/featuredarticles/Doxy
+# genXcode/_index.html for more information.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+GENERATE_DOCSET        = NO
+
+# This tag determines the name of the docset feed. A documentation feed provides
+# an umbrella under which multiple documentation sets from a single provider
+# (such as a company or product suite) can be grouped.
+# The default value is: Doxygen generated docs.
+# This tag requires that the tag GENERATE_DOCSET is set to YES.
+
+DOCSET_FEEDNAME        = "Doxygen generated docs"
+
+# This tag specifies a string that should uniquely identify the documentation
+# set bundle. This should be a reverse domain-name style string, e.g.
+# com.mycompany.MyDocSet. Doxygen will append .docset to the name.
+# The default value is: org.doxygen.Project.
+# This tag requires that the tag GENERATE_DOCSET is set to YES.
+
+DOCSET_BUNDLE_ID       = org.doxygen.Project
+
+# The DOCSET_PUBLISHER_ID tag specifies a string that should uniquely identify
+# the documentation publisher. This should be a reverse domain-name style
+# string, e.g. com.mycompany.MyDocSet.documentation.
+# The default value is: org.doxygen.Publisher.
+# This tag requires that the tag GENERATE_DOCSET is set to YES.
+
+DOCSET_PUBLISHER_ID    = org.doxygen.Publisher
+
+# The DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.
+# The default value is: Publisher.
+# This tag requires that the tag GENERATE_DOCSET is set to YES.
+
+DOCSET_PUBLISHER_NAME  = Publisher
+
+# If the GENERATE_HTMLHELP tag is set to YES then doxygen generates three
+# additional HTML index files: index.hhp, index.hhc, and index.hhk. The
+# index.hhp is a project file that can be read by Microsoft's HTML Help Workshop
+# (see: https://www.microsoft.com/en-us/download/details.aspx?id=21138) on
+# Windows.
+#
+# The HTML Help Workshop contains a compiler that can convert all HTML output
+# generated by doxygen into a single compiled HTML file (.chm). Compiled HTML
+# files are now used as the Windows 98 help format, and will replace the old
+# Windows help format (.hlp) on all Windows platforms in the future. Compressed
+# HTML files also contain an index, a table of contents, and you can search for
+# words in the documentation. The HTML workshop also contains a viewer for
+# compressed HTML files.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+GENERATE_HTMLHELP      = NO
+
+# The CHM_FILE tag can be used to specify the file name of the resulting .chm
+# file. You can add a path in front of the file if the result should not be
+# written to the html output directory.
+# This tag requires that the tag GENERATE_HTMLHELP is set to YES.
+
+CHM_FILE               =
+
+# The HHC_LOCATION tag can be used to specify the location (absolute path
+# including file name) of the HTML help compiler (hhc.exe). If non-empty,
+# doxygen will try to run the HTML help compiler on the generated index.hhp.
+# The file has to be specified with full path.
+# This tag requires that the tag GENERATE_HTMLHELP is set to YES.
+
+HHC_LOCATION           =
+
+# The GENERATE_CHI flag controls if a separate .chi index file is generated
+# (YES) or that it should be included in the master .chm file (NO).
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTMLHELP is set to YES.
+
+GENERATE_CHI           = NO
+
+# The CHM_INDEX_ENCODING is used to encode HtmlHelp index (hhk), content (hhc)
+# and project file content.
+# This tag requires that the tag GENERATE_HTMLHELP is set to YES.
+
+CHM_INDEX_ENCODING     =
+
+# The BINARY_TOC flag controls whether a binary table of contents is generated
+# (YES) or a normal table of contents (NO) in the .chm file. Furthermore it
+# enables the Previous and Next buttons.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTMLHELP is set to YES.
+
+BINARY_TOC             = NO
+
+# The TOC_EXPAND flag can be set to YES to add extra items for group members to
+# the table of contents of the HTML help documentation and to the tree view.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTMLHELP is set to YES.
+
+TOC_EXPAND             = NO
+
+# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and
+# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated that
+# can be used as input for Qt's qhelpgenerator to generate a Qt Compressed Help
+# (.qch) of the generated HTML documentation.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+GENERATE_QHP           = NO
+
+# If the QHG_LOCATION tag is specified, the QCH_FILE tag can be used to specify
+# the file name of the resulting .qch file. The path specified is relative to
+# the HTML output folder.
+# This tag requires that the tag GENERATE_QHP is set to YES.
+
+QCH_FILE               =
+
+# The QHP_NAMESPACE tag specifies the namespace to use when generating Qt Help
+# Project output. For more information please see Qt Help Project / Namespace
+# (see: http://doc.qt.io/archives/qt-4.8/qthelpproject.html#namespace).
+# The default value is: org.doxygen.Project.
+# This tag requires that the tag GENERATE_QHP is set to YES.
+
+QHP_NAMESPACE          = org.doxygen.Project
+
+# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating Qt
+# Help Project output. For more information please see Qt Help Project / Virtual
+# Folders (see: http://doc.qt.io/archives/qt-4.8/qthelpproject.html#virtual-
+# folders).
+# The default value is: doc.
+# This tag requires that the tag GENERATE_QHP is set to YES.
+
+QHP_VIRTUAL_FOLDER     = doc
+
+# If the QHP_CUST_FILTER_NAME tag is set, it specifies the name of a custom
+# filter to add. For more information please see Qt Help Project / Custom
+# Filters (see: http://doc.qt.io/archives/qt-4.8/qthelpproject.html#custom-
+# filters).
+# This tag requires that the tag GENERATE_QHP is set to YES.
+
+QHP_CUST_FILTER_NAME   =
+
+# The QHP_CUST_FILTER_ATTRS tag specifies the list of the attributes of the
+# custom filter to add. For more information please see Qt Help Project / Custom
+# Filters (see: http://doc.qt.io/archives/qt-4.8/qthelpproject.html#custom-
+# filters).
+# This tag requires that the tag GENERATE_QHP is set to YES.
+
+QHP_CUST_FILTER_ATTRS  =
+
+# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this
+# project's filter section matches. Qt Help Project / Filter Attributes (see:
+# http://doc.qt.io/archives/qt-4.8/qthelpproject.html#filter-attributes).
+# This tag requires that the tag GENERATE_QHP is set to YES.
+
+QHP_SECT_FILTER_ATTRS  =
+
+# The QHG_LOCATION tag can be used to specify the location of Qt's
+# qhelpgenerator. If non-empty doxygen will try to run qhelpgenerator on the
+# generated .qhp file.
+# This tag requires that the tag GENERATE_QHP is set to YES.
+
+QHG_LOCATION           =
+
+# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files will be
+# generated, together with the HTML files, they form an Eclipse help plugin. To
+# install this plugin and make it available under the help contents menu in
+# Eclipse, the contents of the directory containing the HTML and XML files needs
+# to be copied into the plugins directory of eclipse. The name of the directory
+# within the plugins directory should be the same as the ECLIPSE_DOC_ID value.
+# After copying Eclipse needs to be restarted before the help appears.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+GENERATE_ECLIPSEHELP   = NO
+
+# A unique identifier for the Eclipse help plugin. When installing the plugin
+# the directory name containing the HTML and XML files should also have this
+# name. Each documentation set should have its own identifier.
+# The default value is: org.doxygen.Project.
+# This tag requires that the tag GENERATE_ECLIPSEHELP is set to YES.
+
+ECLIPSE_DOC_ID         = org.doxygen.Project
+
+# If you want full control over the layout of the generated HTML pages it might
+# be necessary to disable the index and replace it with your own. The
+# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top
+# of each HTML page. A value of NO enables the index and the value YES disables
+# it. Since the tabs in the index contain the same information as the navigation
+# tree, you can set this option to YES if you also set GENERATE_TREEVIEW to YES.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+DISABLE_INDEX          = NO
+
+# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index
+# structure should be generated to display hierarchical information. If the tag
+# value is set to YES, a side panel will be generated containing a tree-like
+# index structure (just like the one that is generated for HTML Help). For this
+# to work a browser that supports JavaScript, DHTML, CSS and frames is required
+# (i.e. any modern browser). Windows users are probably better off using the
+# HTML help feature. Via custom style sheets (see HTML_EXTRA_STYLESHEET) one can
+# further fine-tune the look of the index. As an example, the default style
+# sheet generated by doxygen has an example that shows how to put an image at
+# the root of the tree instead of the PROJECT_NAME. Since the tree basically has
+# the same information as the tab index, you could consider setting
+# DISABLE_INDEX to YES when enabling this option.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+GENERATE_TREEVIEW      = NO
+
+# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values that
+# doxygen will group on one line in the generated HTML documentation.
+#
+# Note that a value of 0 will completely suppress the enum values from appearing
+# in the overview section.
+# Minimum value: 0, maximum value: 20, default value: 4.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+ENUM_VALUES_PER_LINE   = 4
+
+# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be used
+# to set the initial width (in pixels) of the frame in which the tree is shown.
+# Minimum value: 0, maximum value: 1500, default value: 250.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+TREEVIEW_WIDTH         = 250
+
+# If the EXT_LINKS_IN_WINDOW option is set to YES, doxygen will open links to
+# external symbols imported via tag files in a separate window.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+EXT_LINKS_IN_WINDOW    = NO
+
+# Use this tag to change the font size of LaTeX formulas included as images in
+# the HTML documentation. When you change the font size after a successful
+# doxygen run you need to manually remove any form_*.png images from the HTML
+# output directory to force them to be regenerated.
+# Minimum value: 8, maximum value: 50, default value: 10.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+FORMULA_FONTSIZE       = 10
+
+# Use the FORMULA_TRANSPARENT tag to determine whether or not the images
+# generated for formulas are transparent PNGs. Transparent PNGs are not
+# supported properly for IE 6.0, but are supported on all modern browsers.
+#
+# Note that when changing this option you need to delete any form_*.png files in
+# the HTML output directory before the changes have effect.
+# The default value is: YES.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+FORMULA_TRANSPARENT    = YES
+
+# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax (see
+# https://www.mathjax.org) which uses client side Javascript for the rendering
+# instead of using pre-rendered bitmaps. Use this if you do not have LaTeX
+# installed or if you want to formulas look prettier in the HTML output. When
+# enabled you may also need to install MathJax separately and configure the path
+# to it using the MATHJAX_RELPATH option.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+USE_MATHJAX            = NO
+
+# When MathJax is enabled you can set the default output format to be used for
+# the MathJax output. See the MathJax site (see:
+# http://docs.mathjax.org/en/latest/output.html) for more details.
+# Possible values are: HTML-CSS (which is slower, but has the best
+# compatibility), NativeMML (i.e. MathML) and SVG.
+# The default value is: HTML-CSS.
+# This tag requires that the tag USE_MATHJAX is set to YES.
+
+MATHJAX_FORMAT         = HTML-CSS
+
+# When MathJax is enabled you need to specify the location relative to the HTML
+# output directory using the MATHJAX_RELPATH option. The destination directory
+# should contain the MathJax.js script. For instance, if the mathjax directory
+# is located at the same level as the HTML output directory, then
+# MATHJAX_RELPATH should be ../mathjax. The default value points to the MathJax
+# Content Delivery Network so you can quickly see the result without installing
+# MathJax. However, it is strongly recommended to install a local copy of
+# MathJax from https://www.mathjax.org before deployment.
+# The default value is: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/.
+# This tag requires that the tag USE_MATHJAX is set to YES.
+
+MATHJAX_RELPATH        = https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/
+
+# The MATHJAX_EXTENSIONS tag can be used to specify one or more MathJax
+# extension names that should be enabled during MathJax rendering. For example
+# MATHJAX_EXTENSIONS = TeX/AMSmath TeX/AMSsymbols
+# This tag requires that the tag USE_MATHJAX is set to YES.
+
+MATHJAX_EXTENSIONS     =
+
+# The MATHJAX_CODEFILE tag can be used to specify a file with javascript pieces
+# of code that will be used on startup of the MathJax code. See the MathJax site
+# (see: http://docs.mathjax.org/en/latest/output.html) for more details. For an
+# example see the documentation.
+# This tag requires that the tag USE_MATHJAX is set to YES.
+
+MATHJAX_CODEFILE       =
+
+# When the SEARCHENGINE tag is enabled doxygen will generate a search box for
+# the HTML output. The underlying search engine uses javascript and DHTML and
+# should work on any modern browser. Note that when using HTML help
+# (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets (GENERATE_DOCSET)
+# there is already a search function so this one should typically be disabled.
+# For large projects the javascript based search engine can be slow, then
+# enabling SERVER_BASED_SEARCH may provide a better solution. It is possible to
+# search using the keyboard; to jump to the search box use <access key> + S
+# (what the <access key> is depends on the OS and browser, but it is typically
+# <CTRL>, <ALT>/<option>, or both). Inside the search box use the <cursor down
+# key> to jump into the search results window, the results can be navigated
+# using the <cursor keys>. Press <Enter> to select an item or <escape> to cancel
+# the search. The filter options can be selected when the cursor is inside the
+# search box by pressing <Shift>+<cursor down>. Also here use the <cursor keys>
+# to select a filter and <Enter> or <escape> to activate or cancel the filter
+# option.
+# The default value is: YES.
+# This tag requires that the tag GENERATE_HTML is set to YES.
+
+SEARCHENGINE           = YES
+
+# When the SERVER_BASED_SEARCH tag is enabled the search engine will be
+# implemented using a web server instead of a web client using Javascript. There
+# are two flavors of web server based searching depending on the EXTERNAL_SEARCH
+# setting. When disabled, doxygen will generate a PHP script for searching and
+# an index file used by the script. When EXTERNAL_SEARCH is enabled the indexing
+# and searching needs to be provided by external tools. See the section
+# "External Indexing and Searching" for details.
+# The default value is: NO.
+# This tag requires that the tag SEARCHENGINE is set to YES.
+
+SERVER_BASED_SEARCH    = NO
+
+# When EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP
+# script for searching. Instead the search results are written to an XML file
+# which needs to be processed by an external indexer. Doxygen will invoke an
+# external search engine pointed to by the SEARCHENGINE_URL option to obtain the
+# search results.
+#
+# Doxygen ships with an example indexer (doxyindexer) and search engine
+# (doxysearch.cgi) which are based on the open source search engine library
+# Xapian (see: https://xapian.org/).
+#
+# See the section "External Indexing and Searching" for details.
+# The default value is: NO.
+# This tag requires that the tag SEARCHENGINE is set to YES.
+
+EXTERNAL_SEARCH        = NO
+
+# The SEARCHENGINE_URL should point to a search engine hosted by a web server
+# which will return the search results when EXTERNAL_SEARCH is enabled.
+#
+# Doxygen ships with an example indexer (doxyindexer) and search engine
+# (doxysearch.cgi) which are based on the open source search engine library
+# Xapian (see: https://xapian.org/). See the section "External Indexing and
+# Searching" for details.
+# This tag requires that the tag SEARCHENGINE is set to YES.
+
+SEARCHENGINE_URL       =
+
+# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the unindexed
+# search data is written to a file for indexing by an external tool. With the
+# SEARCHDATA_FILE tag the name of this file can be specified.
+# The default file is: searchdata.xml.
+# This tag requires that the tag SEARCHENGINE is set to YES.
+
+SEARCHDATA_FILE        = searchdata.xml
+
+# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the
+# EXTERNAL_SEARCH_ID tag can be used as an identifier for the project. This is
+# useful in combination with EXTRA_SEARCH_MAPPINGS to search through multiple
+# projects and redirect the results back to the right project.
+# This tag requires that the tag SEARCHENGINE is set to YES.
+
+EXTERNAL_SEARCH_ID     =
+
+# The EXTRA_SEARCH_MAPPINGS tag can be used to enable searching through doxygen
+# projects other than the one defined by this configuration file, but that are
+# all added to the same external search index. Each project needs to have a
+# unique id set via EXTERNAL_SEARCH_ID. The search mapping then maps the id of
+# to a relative location where the documentation can be found. The format is:
+# EXTRA_SEARCH_MAPPINGS = tagname1=loc1 tagname2=loc2 ...
+# This tag requires that the tag SEARCHENGINE is set to YES.
+
+EXTRA_SEARCH_MAPPINGS  =
+
+#---------------------------------------------------------------------------
+# Configuration options related to the LaTeX output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_LATEX tag is set to YES, doxygen will generate LaTeX output.
+# The default value is: YES.
+
+GENERATE_LATEX         = NO
+
+# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. If a
+# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of
+# it.
+# The default directory is: latex.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_OUTPUT           = latex
+
+# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be
+# invoked.
+#
+# Note that when not enabling USE_PDFLATEX the default is latex when enabling
+# USE_PDFLATEX the default is pdflatex and when in the later case latex is
+# chosen this is overwritten by pdflatex. For specific output languages the
+# default can have been set differently, this depends on the implementation of
+# the output language.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_CMD_NAME         =
+
+# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to generate
+# index for LaTeX.
+# Note: This tag is used in the Makefile / make.bat.
+# See also: LATEX_MAKEINDEX_CMD for the part in the generated output file
+# (.tex).
+# The default file is: makeindex.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+MAKEINDEX_CMD_NAME     = makeindex
+
+# The LATEX_MAKEINDEX_CMD tag can be used to specify the command name to
+# generate index for LaTeX. In case there is no backslash (\) as first character
+# it will be automatically added in the LaTeX code.
+# Note: This tag is used in the generated output file (.tex).
+# See also: MAKEINDEX_CMD_NAME for the part in the Makefile / make.bat.
+# The default value is: makeindex.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_MAKEINDEX_CMD    = makeindex
+
+# If the COMPACT_LATEX tag is set to YES, doxygen generates more compact LaTeX
+# documents. This may be useful for small projects and may help to save some
+# trees in general.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+COMPACT_LATEX          = NO
+
+# The PAPER_TYPE tag can be used to set the paper type that is used by the
+# printer.
+# Possible values are: a4 (210 x 297 mm), letter (8.5 x 11 inches), legal (8.5 x
+# 14 inches) and executive (7.25 x 10.5 inches).
+# The default value is: a4.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+PAPER_TYPE             = a4
+
+# The EXTRA_PACKAGES tag can be used to specify one or more LaTeX package names
+# that should be included in the LaTeX output. The package can be specified just
+# by its name or with the correct syntax as to be used with the LaTeX
+# \usepackage command. To get the times font for instance you can specify :
+# EXTRA_PACKAGES=times or EXTRA_PACKAGES={times}
+# To use the option intlimits with the amsmath package you can specify:
+# EXTRA_PACKAGES=[intlimits]{amsmath}
+# If left blank no extra packages will be included.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+EXTRA_PACKAGES         =
+
+# The LATEX_HEADER tag can be used to specify a personal LaTeX header for the
+# generated LaTeX document. The header should contain everything until the first
+# chapter. If it is left blank doxygen will generate a standard header. See
+# section "Doxygen usage" for information on how to let doxygen write the
+# default header to a separate file.
+#
+# Note: Only use a user-defined header if you know what you are doing! The
+# following commands have a special meaning inside the header: $title,
+# $datetime, $date, $doxygenversion, $projectname, $projectnumber,
+# $projectbrief, $projectlogo. Doxygen will replace $title with the empty
+# string, for the replacement values of the other commands the user is referred
+# to HTML_HEADER.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_HEADER           =
+
+# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for the
+# generated LaTeX document. The footer should contain everything after the last
+# chapter. If it is left blank doxygen will generate a standard footer. See
+# LATEX_HEADER for more information on how to generate a default footer and what
+# special commands can be used inside the footer.
+#
+# Note: Only use a user-defined footer if you know what you are doing!
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_FOOTER           =
+
+# The LATEX_EXTRA_STYLESHEET tag can be used to specify additional user-defined
+# LaTeX style sheets that are included after the standard style sheets created
+# by doxygen. Using this option one can overrule certain style aspects. Doxygen
+# will copy the style sheet files to the output directory.
+# Note: The order of the extra style sheet files is of importance (e.g. the last
+# style sheet in the list overrules the setting of the previous ones in the
+# list).
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_EXTRA_STYLESHEET =
+
+# The LATEX_EXTRA_FILES tag can be used to specify one or more extra images or
+# other source files which should be copied to the LATEX_OUTPUT output
+# directory. Note that the files will be copied as-is; there are no commands or
+# markers available.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_EXTRA_FILES      =
+
+# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated is
+# prepared for conversion to PDF (using ps2pdf or pdflatex). The PDF file will
+# contain links (just like the HTML output) instead of page references. This
+# makes the output suitable for online browsing using a PDF viewer.
+# The default value is: YES.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+PDF_HYPERLINKS         = YES
+
+# If the USE_PDFLATEX tag is set to YES, doxygen will use pdflatex to generate
+# the PDF file directly from the LaTeX files. Set this option to YES, to get a
+# higher quality PDF documentation.
+# The default value is: YES.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+USE_PDFLATEX           = YES
+
+# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \batchmode
+# command to the generated LaTeX files. This will instruct LaTeX to keep running
+# if errors occur, instead of asking the user for help. This option is also used
+# when generating formulas in HTML.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_BATCHMODE        = NO
+
+# If the LATEX_HIDE_INDICES tag is set to YES then doxygen will not include the
+# index chapters (such as File Index, Compound Index, etc.) in the output.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_HIDE_INDICES     = NO
+
+# If the LATEX_SOURCE_CODE tag is set to YES then doxygen will include source
+# code with syntax highlighting in the LaTeX output.
+#
+# Note that which sources are shown also depends on other settings such as
+# SOURCE_BROWSER.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_SOURCE_CODE      = NO
+
+# The LATEX_BIB_STYLE tag can be used to specify the style to use for the
+# bibliography, e.g. plainnat, or ieeetr. See
+# https://en.wikipedia.org/wiki/BibTeX and \cite for more info.
+# The default value is: plain.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_BIB_STYLE        = plain
+
+# If the LATEX_TIMESTAMP tag is set to YES then the footer of each generated
+# page will contain the date and time when the page was generated. Setting this
+# to NO can help when comparing the output of multiple runs.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_TIMESTAMP        = NO
+
+# The LATEX_EMOJI_DIRECTORY tag is used to specify the (relative or absolute)
+# path from which the emoji images will be read. If a relative path is entered,
+# it will be relative to the LATEX_OUTPUT directory. If left blank the
+# LATEX_OUTPUT directory will be used.
+# This tag requires that the tag GENERATE_LATEX is set to YES.
+
+LATEX_EMOJI_DIRECTORY  =
+
+#---------------------------------------------------------------------------
+# Configuration options related to the RTF output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_RTF tag is set to YES, doxygen will generate RTF output. The
+# RTF output is optimized for Word 97 and may not look too pretty with other RTF
+# readers/editors.
+# The default value is: NO.
+
+GENERATE_RTF           = NO
+
+# The RTF_OUTPUT tag is used to specify where the RTF docs will be put. If a
+# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of
+# it.
+# The default directory is: rtf.
+# This tag requires that the tag GENERATE_RTF is set to YES.
+
+RTF_OUTPUT             = rtf
+
+# If the COMPACT_RTF tag is set to YES, doxygen generates more compact RTF
+# documents. This may be useful for small projects and may help to save some
+# trees in general.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_RTF is set to YES.
+
+COMPACT_RTF            = NO
+
+# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated will
+# contain hyperlink fields. The RTF file will contain links (just like the HTML
+# output) instead of page references. This makes the output suitable for online
+# browsing using Word or some other Word compatible readers that support those
+# fields.
+#
+# Note: WordPad (write) and others do not support links.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_RTF is set to YES.
+
+RTF_HYPERLINKS         = NO
+
+# Load stylesheet definitions from file. Syntax is similar to doxygen's
+# configuration file, i.e. a series of assignments. You only have to provide
+# replacements, missing definitions are set to their default value.
+#
+# See also section "Doxygen usage" for information on how to generate the
+# default style sheet that doxygen normally uses.
+# This tag requires that the tag GENERATE_RTF is set to YES.
+
+RTF_STYLESHEET_FILE    =
+
+# Set optional variables used in the generation of an RTF document. Syntax is
+# similar to doxygen's configuration file. A template extensions file can be
+# generated using doxygen -e rtf extensionFile.
+# This tag requires that the tag GENERATE_RTF is set to YES.
+
+RTF_EXTENSIONS_FILE    =
+
+# If the RTF_SOURCE_CODE tag is set to YES then doxygen will include source code
+# with syntax highlighting in the RTF output.
+#
+# Note that which sources are shown also depends on other settings such as
+# SOURCE_BROWSER.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_RTF is set to YES.
+
+RTF_SOURCE_CODE        = NO
+
+#---------------------------------------------------------------------------
+# Configuration options related to the man page output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_MAN tag is set to YES, doxygen will generate man pages for
+# classes and files.
+# The default value is: NO.
+
+GENERATE_MAN           = NO
+
+# The MAN_OUTPUT tag is used to specify where the man pages will be put. If a
+# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of
+# it. A directory man3 will be created inside the directory specified by
+# MAN_OUTPUT.
+# The default directory is: man.
+# This tag requires that the tag GENERATE_MAN is set to YES.
+
+MAN_OUTPUT             = man
+
+# The MAN_EXTENSION tag determines the extension that is added to the generated
+# man pages. In case the manual section does not start with a number, the number
+# 3 is prepended. The dot (.) at the beginning of the MAN_EXTENSION tag is
+# optional.
+# The default value is: .3.
+# This tag requires that the tag GENERATE_MAN is set to YES.
+
+MAN_EXTENSION          = .3
+
+# The MAN_SUBDIR tag determines the name of the directory created within
+# MAN_OUTPUT in which the man pages are placed. If defaults to man followed by
+# MAN_EXTENSION with the initial . removed.
+# This tag requires that the tag GENERATE_MAN is set to YES.
+
+MAN_SUBDIR             =
+
+# If the MAN_LINKS tag is set to YES and doxygen generates man output, then it
+# will generate one additional man file for each entity documented in the real
+# man page(s). These additional files only source the real man page, but without
+# them the man command would be unable to find the correct page.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_MAN is set to YES.
+
+MAN_LINKS              = NO
+
+#---------------------------------------------------------------------------
+# Configuration options related to the XML output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_XML tag is set to YES, doxygen will generate an XML file that
+# captures the structure of the code including all documentation.
+# The default value is: NO.
+
+GENERATE_XML           = NO
+
+# The XML_OUTPUT tag is used to specify where the XML pages will be put. If a
+# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of
+# it.
+# The default directory is: xml.
+# This tag requires that the tag GENERATE_XML is set to YES.
+
+XML_OUTPUT             = xml
+
+# If the XML_PROGRAMLISTING tag is set to YES, doxygen will dump the program
+# listings (including syntax highlighting and cross-referencing information) to
+# the XML output. Note that enabling this will significantly increase the size
+# of the XML output.
+# The default value is: YES.
+# This tag requires that the tag GENERATE_XML is set to YES.
+
+XML_PROGRAMLISTING     = YES
+
+# If the XML_NS_MEMB_FILE_SCOPE tag is set to YES, doxygen will include
+# namespace members in file scope as well, matching the HTML output.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_XML is set to YES.
+
+XML_NS_MEMB_FILE_SCOPE = NO
+
+#---------------------------------------------------------------------------
+# Configuration options related to the DOCBOOK output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_DOCBOOK tag is set to YES, doxygen will generate Docbook files
+# that can be used to generate PDF.
+# The default value is: NO.
+
+GENERATE_DOCBOOK       = NO
+
+# The DOCBOOK_OUTPUT tag is used to specify where the Docbook pages will be put.
+# If a relative path is entered the value of OUTPUT_DIRECTORY will be put in
+# front of it.
+# The default directory is: docbook.
+# This tag requires that the tag GENERATE_DOCBOOK is set to YES.
+
+DOCBOOK_OUTPUT         = docbook
+
+# If the DOCBOOK_PROGRAMLISTING tag is set to YES, doxygen will include the
+# program listings (including syntax highlighting and cross-referencing
+# information) to the DOCBOOK output. Note that enabling this will significantly
+# increase the size of the DOCBOOK output.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_DOCBOOK is set to YES.
+
+DOCBOOK_PROGRAMLISTING = NO
+
+#---------------------------------------------------------------------------
+# Configuration options for the AutoGen Definitions output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_AUTOGEN_DEF tag is set to YES, doxygen will generate an
+# AutoGen Definitions (see http://autogen.sourceforge.net/) file that captures
+# the structure of the code including all documentation. Note that this feature
+# is still experimental and incomplete at the moment.
+# The default value is: NO.
+
+GENERATE_AUTOGEN_DEF   = NO
+
+#---------------------------------------------------------------------------
+# Configuration options related to the Perl module output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module
+# file that captures the structure of the code including all documentation.
+#
+# Note that this feature is still experimental and incomplete at the moment.
+# The default value is: NO.
+
+GENERATE_PERLMOD       = NO
+
+# If the PERLMOD_LATEX tag is set to YES, doxygen will generate the necessary
+# Makefile rules, Perl scripts and LaTeX code to be able to generate PDF and DVI
+# output from the Perl module output.
+# The default value is: NO.
+# This tag requires that the tag GENERATE_PERLMOD is set to YES.
+
+PERLMOD_LATEX          = NO
+
+# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely
+# formatted so it can be parsed by a human reader. This is useful if you want to
+# understand what is going on. On the other hand, if this tag is set to NO, the
+# size of the Perl module output will be much smaller and Perl will parse it
+# just the same.
+# The default value is: YES.
+# This tag requires that the tag GENERATE_PERLMOD is set to YES.
+
+PERLMOD_PRETTY         = YES
+
+# The names of the make variables in the generated doxyrules.make file are
+# prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. This is useful
+# so different doxyrules.make files included by the same Makefile don't
+# overwrite each other's variables.
+# This tag requires that the tag GENERATE_PERLMOD is set to YES.
+
+PERLMOD_MAKEVAR_PREFIX =
+
+#---------------------------------------------------------------------------
+# Configuration options related to the preprocessor
+#---------------------------------------------------------------------------
+
+# If the ENABLE_PREPROCESSING tag is set to YES, doxygen will evaluate all
+# C-preprocessor directives found in the sources and include files.
+# The default value is: YES.
+
+ENABLE_PREPROCESSING   = YES
+
+# If the MACRO_EXPANSION tag is set to YES, doxygen will expand all macro names
+# in the source code. If set to NO, only conditional compilation will be
+# performed. Macro expansion can be done in a controlled way by setting
+# EXPAND_ONLY_PREDEF to YES.
+# The default value is: NO.
+# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
+
+MACRO_EXPANSION        = NO
+
+# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES then
+# the macro expansion is limited to the macros specified with the PREDEFINED and
+# EXPAND_AS_DEFINED tags.
+# The default value is: NO.
+# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
+
+EXPAND_ONLY_PREDEF     = NO
+
+# If the SEARCH_INCLUDES tag is set to YES, the include files in the
+# INCLUDE_PATH will be searched if a #include is found.
+# The default value is: YES.
+# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
+
+SEARCH_INCLUDES        = YES
+
+# The INCLUDE_PATH tag can be used to specify one or more directories that
+# contain include files that are not input files but should be processed by the
+# preprocessor.
+# This tag requires that the tag SEARCH_INCLUDES is set to YES.
+
+INCLUDE_PATH           =
+
+# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard
+# patterns (like *.h and *.hpp) to filter out the header-files in the
+# directories. If left blank, the patterns specified with FILE_PATTERNS will be
+# used.
+# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
+
+INCLUDE_FILE_PATTERNS  =
+
+# The PREDEFINED tag can be used to specify one or more macro names that are
+# defined before the preprocessor is started (similar to the -D option of e.g.
+# gcc). The argument of the tag is a list of macros of the form: name or
+# name=definition (no spaces). If the definition and the "=" are omitted, "=1"
+# is assumed. To prevent a macro definition from being undefined via #undef or
+# recursively expanded use the := operator instead of the = operator.
+# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
+
+PREDEFINED             =
+
+# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this
+# tag can be used to specify a list of macro names that should be expanded. The
+# macro definition that is found in the sources will be used. Use the PREDEFINED
+# tag if you want to use a different macro definition that overrules the
+# definition found in the source code.
+# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
+
+EXPAND_AS_DEFINED      =
+
+# If the SKIP_FUNCTION_MACROS tag is set to YES then doxygen's preprocessor will
+# remove all references to function-like macros that are alone on a line, have
+# an all uppercase name, and do not end with a semicolon. Such function macros
+# are typically used for boiler-plate code, and will confuse the parser if not
+# removed.
+# The default value is: YES.
+# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
+
+SKIP_FUNCTION_MACROS   = YES
+
+#---------------------------------------------------------------------------
+# Configuration options related to external references
+#---------------------------------------------------------------------------
+
+# The TAGFILES tag can be used to specify one or more tag files. For each tag
+# file the location of the external documentation should be added. The format of
+# a tag file without this location is as follows:
+# TAGFILES = file1 file2 ...
+# Adding location for the tag files is done as follows:
+# TAGFILES = file1=loc1 "file2 = loc2" ...
+# where loc1 and loc2 can be relative or absolute paths or URLs. See the
+# section "Linking to external documentation" for more information about the use
+# of tag files.
+# Note: Each tag file must have a unique name (where the name does NOT include
+# the path). If a tag file is not located in the directory in which doxygen is
+# run, you must also specify the path to the tagfile here.
+
+TAGFILES               =
+
+# When a file name is specified after GENERATE_TAGFILE, doxygen will create a
+# tag file that is based on the input files it reads. See section "Linking to
+# external documentation" for more information about the usage of tag files.
+
+GENERATE_TAGFILE       =
+
+# If the ALLEXTERNALS tag is set to YES, all external class will be listed in
+# the class index. If set to NO, only the inherited external classes will be
+# listed.
+# The default value is: NO.
+
+ALLEXTERNALS           = NO
+
+# If the EXTERNAL_GROUPS tag is set to YES, all external groups will be listed
+# in the modules index. If set to NO, only the current project's groups will be
+# listed.
+# The default value is: YES.
+
+EXTERNAL_GROUPS        = YES
+
+# If the EXTERNAL_PAGES tag is set to YES, all external pages will be listed in
+# the related pages index. If set to NO, only the current project's pages will
+# be listed.
+# The default value is: YES.
+
+EXTERNAL_PAGES         = YES
+
+# The PERL_PATH should be the absolute path and name of the perl script
+# interpreter (i.e. the result of 'which perl').
+# The default file (with absolute path) is: /usr/bin/perl.
+
+PERL_PATH              = /usr/bin/perl
+
+#---------------------------------------------------------------------------
+# Configuration options related to the dot tool
+#---------------------------------------------------------------------------
+
+# If the CLASS_DIAGRAMS tag is set to YES, doxygen will generate a class diagram
+# (in HTML and LaTeX) for classes with base or super classes. Setting the tag to
+# NO turns the diagrams off. Note that this option also works with HAVE_DOT
+# disabled, but it is recommended to install and use dot, since it yields more
+# powerful graphs.
+# The default value is: YES.
+
+CLASS_DIAGRAMS         = YES
+
+# You can define message sequence charts within doxygen comments using the \msc
+# command. Doxygen will then run the mscgen tool (see:
+# http://www.mcternan.me.uk/mscgen/)) to produce the chart and insert it in the
+# documentation. The MSCGEN_PATH tag allows you to specify the directory where
+# the mscgen tool resides. If left empty the tool is assumed to be found in the
+# default search path.
+
+MSCGEN_PATH            =
+
+# You can include diagrams made with dia in doxygen documentation. Doxygen will
+# then run dia to produce the diagram and insert it in the documentation. The
+# DIA_PATH tag allows you to specify the directory where the dia binary resides.
+# If left empty dia is assumed to be found in the default search path.
+
+DIA_PATH               =
+
+# If set to YES the inheritance and collaboration graphs will hide inheritance
+# and usage relations if the target is undocumented or is not a class.
+# The default value is: YES.
+
+HIDE_UNDOC_RELATIONS   = YES
+
+# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is
+# available from the path. This tool is part of Graphviz (see:
+# http://www.graphviz.org/), a graph visualization toolkit from AT&T and Lucent
+# Bell Labs. The other options in this section have no effect if this option is
+# set to NO
+# The default value is: NO.
+
+HAVE_DOT               = NO
+
+# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is allowed
+# to run in parallel. When set to 0 doxygen will base this on the number of
+# processors available in the system. You can set it explicitly to a value
+# larger than 0 to get control over the balance between CPU load and processing
+# speed.
+# Minimum value: 0, maximum value: 32, default value: 0.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_NUM_THREADS        = 0
+
+# When you want a differently looking font in the dot files that doxygen
+# generates you can specify the font name using DOT_FONTNAME. You need to make
+# sure dot is able to find the font, which can be done by putting it in a
+# standard location or by setting the DOTFONTPATH environment variable or by
+# setting DOT_FONTPATH to the directory containing the font.
+# The default value is: Helvetica.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_FONTNAME           = Helvetica
+
+# The DOT_FONTSIZE tag can be used to set the size (in points) of the font of
+# dot graphs.
+# Minimum value: 4, maximum value: 24, default value: 10.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_FONTSIZE           = 10
+
+# By default doxygen will tell dot to use the default font as specified with
+# DOT_FONTNAME. If you specify a different font using DOT_FONTNAME you can set
+# the path where dot can find it using this tag.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_FONTPATH           =
+
+# If the CLASS_GRAPH tag is set to YES then doxygen will generate a graph for
+# each documented class showing the direct and indirect inheritance relations.
+# Setting this tag to YES will force the CLASS_DIAGRAMS tag to NO.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+CLASS_GRAPH            = YES
+
+# If the COLLABORATION_GRAPH tag is set to YES then doxygen will generate a
+# graph for each documented class showing the direct and indirect implementation
+# dependencies (inheritance, containment, and class references variables) of the
+# class with other documented classes.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+COLLABORATION_GRAPH    = YES
+
+# If the GROUP_GRAPHS tag is set to YES then doxygen will generate a graph for
+# groups, showing the direct groups dependencies.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+GROUP_GRAPHS           = YES
+
+# If the UML_LOOK tag is set to YES, doxygen will generate inheritance and
+# collaboration diagrams in a style similar to the OMG's Unified Modeling
+# Language.
+# The default value is: NO.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+UML_LOOK               = NO
+
+# If the UML_LOOK tag is enabled, the fields and methods are shown inside the
+# class node. If there are many fields or methods and many nodes the graph may
+# become too big to be useful. The UML_LIMIT_NUM_FIELDS threshold limits the
+# number of items for each type to make the size more manageable. Set this to 0
+# for no limit. Note that the threshold may be exceeded by 50% before the limit
+# is enforced. So when you set the threshold to 10, up to 15 fields may appear,
+# but if the number exceeds 15, the total amount of fields shown is limited to
+# 10.
+# Minimum value: 0, maximum value: 100, default value: 10.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+UML_LIMIT_NUM_FIELDS   = 10
+
+# If the TEMPLATE_RELATIONS tag is set to YES then the inheritance and
+# collaboration graphs will show the relations between templates and their
+# instances.
+# The default value is: NO.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+TEMPLATE_RELATIONS     = NO
+
+# If the INCLUDE_GRAPH, ENABLE_PREPROCESSING and SEARCH_INCLUDES tags are set to
+# YES then doxygen will generate a graph for each documented file showing the
+# direct and indirect include dependencies of the file with other documented
+# files.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+INCLUDE_GRAPH          = YES
+
+# If the INCLUDED_BY_GRAPH, ENABLE_PREPROCESSING and SEARCH_INCLUDES tags are
+# set to YES then doxygen will generate a graph for each documented file showing
+# the direct and indirect include dependencies of the file with other documented
+# files.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+INCLUDED_BY_GRAPH      = YES
+
+# If the CALL_GRAPH tag is set to YES then doxygen will generate a call
+# dependency graph for every global function or class method.
+#
+# Note that enabling this option will significantly increase the time of a run.
+# So in most cases it will be better to enable call graphs for selected
+# functions only using the \callgraph command. Disabling a call graph can be
+# accomplished by means of the command \hidecallgraph.
+# The default value is: NO.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+CALL_GRAPH             = NO
+
+# If the CALLER_GRAPH tag is set to YES then doxygen will generate a caller
+# dependency graph for every global function or class method.
+#
+# Note that enabling this option will significantly increase the time of a run.
+# So in most cases it will be better to enable caller graphs for selected
+# functions only using the \callergraph command. Disabling a caller graph can be
+# accomplished by means of the command \hidecallergraph.
+# The default value is: NO.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+CALLER_GRAPH           = NO
+
+# If the GRAPHICAL_HIERARCHY tag is set to YES then doxygen will graphical
+# hierarchy of all classes instead of a textual one.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+GRAPHICAL_HIERARCHY    = YES
+
+# If the DIRECTORY_GRAPH tag is set to YES then doxygen will show the
+# dependencies a directory has on other directories in a graphical way. The
+# dependency relations are determined by the #include relations between the
+# files in the directories.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DIRECTORY_GRAPH        = YES
+
+# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images
+# generated by dot. For an explanation of the image formats see the section
+# output formats in the documentation of the dot tool (Graphviz (see:
+# http://www.graphviz.org/)).
+# Note: If you choose svg you need to set HTML_FILE_EXTENSION to xhtml in order
+# to make the SVG files visible in IE 9+ (other browsers do not have this
+# requirement).
+# Possible values are: png, jpg, gif, svg, png:gd, png:gd:gd, png:cairo,
+# png:cairo:gd, png:cairo:cairo, png:cairo:gdiplus, png:gdiplus and
+# png:gdiplus:gdiplus.
+# The default value is: png.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_IMAGE_FORMAT       = png
+
+# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to
+# enable generation of interactive SVG images that allow zooming and panning.
+#
+# Note that this requires a modern browser other than Internet Explorer. Tested
+# and working are Firefox, Chrome, Safari, and Opera.
+# Note: For IE 9+ you need to set HTML_FILE_EXTENSION to xhtml in order to make
+# the SVG files visible. Older versions of IE do not have SVG support.
+# The default value is: NO.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+INTERACTIVE_SVG        = NO
+
+# The DOT_PATH tag can be used to specify the path where the dot tool can be
+# found. If left blank, it is assumed the dot tool can be found in the path.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_PATH               =
+
+# The DOTFILE_DIRS tag can be used to specify one or more directories that
+# contain dot files that are included in the documentation (see the \dotfile
+# command).
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOTFILE_DIRS           =
+
+# The MSCFILE_DIRS tag can be used to specify one or more directories that
+# contain msc files that are included in the documentation (see the \mscfile
+# command).
+
+MSCFILE_DIRS           =
+
+# The DIAFILE_DIRS tag can be used to specify one or more directories that
+# contain dia files that are included in the documentation (see the \diafile
+# command).
+
+DIAFILE_DIRS           =
+
+# When using plantuml, the PLANTUML_JAR_PATH tag should be used to specify the
+# path where java can find the plantuml.jar file. If left blank, it is assumed
+# PlantUML is not used or called during a preprocessing step. Doxygen will
+# generate a warning when it encounters a \startuml command in this case and
+# will not generate output for the diagram.
+
+PLANTUML_JAR_PATH      =
+
+# When using plantuml, the PLANTUML_CFG_FILE tag can be used to specify a
+# configuration file for plantuml.
+
+PLANTUML_CFG_FILE      =
+
+# When using plantuml, the specified paths are searched for files specified by
+# the !include statement in a plantuml block.
+
+PLANTUML_INCLUDE_PATH  =
+
+# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of nodes
+# that will be shown in the graph. If the number of nodes in a graph becomes
+# larger than this value, doxygen will truncate the graph, which is visualized
+# by representing a node as a red box. Note that doxygen if the number of direct
+# children of the root node in a graph is already larger than
+# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that
+# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.
+# Minimum value: 0, maximum value: 10000, default value: 50.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_GRAPH_MAX_NODES    = 50
+
+# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the graphs
+# generated by dot. A depth value of 3 means that only nodes reachable from the
+# root by following a path via at most 3 edges will be shown. Nodes that lay
+# further from the root node will be omitted. Note that setting this option to 1
+# or 2 may greatly reduce the computation time needed for large code bases. Also
+# note that the size of a graph can be further restricted by
+# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.
+# Minimum value: 0, maximum value: 1000, default value: 0.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+MAX_DOT_GRAPH_DEPTH    = 0
+
+# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent
+# background. This is disabled by default, because dot on Windows does not seem
+# to support this out of the box.
+#
+# Warning: Depending on the platform used, enabling this option may lead to
+# badly anti-aliased labels on the edges of a graph (i.e. they become hard to
+# read).
+# The default value is: NO.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_TRANSPARENT        = NO
+
+# Set the DOT_MULTI_TARGETS tag to YES to allow dot to generate multiple output
+# files in one run (i.e. multiple -o and -T options on the command line). This
+# makes dot run faster, but since only newer versions of dot (>1.8.10) support
+# this, this feature is disabled by default.
+# The default value is: NO.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_MULTI_TARGETS      = NO
+
+# If the GENERATE_LEGEND tag is set to YES doxygen will generate a legend page
+# explaining the meaning of the various boxes and arrows in the dot generated
+# graphs.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+GENERATE_LEGEND        = YES
+
+# If the DOT_CLEANUP tag is set to YES, doxygen will remove the intermediate dot
+# files that are used to generate the various graphs.
+# The default value is: YES.
+# This tag requires that the tag HAVE_DOT is set to YES.
+
+DOT_CLEANUP            = YES
diff --git a/third_party/Simple-web-server/repo/docs/benchmarks.md b/third_party/Simple-web-server/repo/docs/benchmarks.md
new file mode 100644
index 0000000000..746a0a93ca
--- /dev/null
+++ b/third_party/Simple-web-server/repo/docs/benchmarks.md
@@ -0,0 +1,210 @@
+# Benchmarks
+
+A simple benchmark of Simple-Web-Server and a few similar web libraries.
+
+Details:
+* Linux distribution: Debian Testing (2019-07-29)
+* Linux kernel: 4.19.0-1-amd64
+* CPU: Intel(R) Core(TM) i7-2600 CPU @ 3.40GHz
+* CPU cores: 4
+* The HTTP load generator [httperf](https://github.com/httperf/httperf) is used
+to create the benchmark results, with the following arguments:
+```sh
+httperf --server=localhost --port=3000 --uri=/ --num-conns=20000 --num-calls=200
+```
+
+The response messages were made identical.
+
+## Express
+
+[Express](https://expressjs.com/) is a popular Node.js web framework.
+
+Versions:
+* Node: v10.15.2
+* Express: 4.17.1
+
+Code:
+```js
+const express = require('express');
+const app = express();
+
+app.get('/', (req, res) => {
+  res.removeHeader('X-Powered-By');
+  res.removeHeader('Connection');
+  res.end('Hello World!')
+});
+
+const port = 3000;
+app.listen(port, () => console.log(`Example app listening on port ${port}!`));
+```
+
+Execution:
+```sh
+NODE_ENV=production node index.js
+```
+
+Example results (13659.7 req/s):
+```sh
+httperf --client=0/1 --server=localhost --port=3000 --uri=/ --send-buffer=4096 --recv-buffer=16384 --num-conns=20000 --num-calls=200
+httperf: warning: open file limit > FD_SETSIZE; limiting max. # of open files to FD_SETSIZE
+Maximum connect burst length: 1
+
+Total: connections 20000 requests 40000 replies 20000 test-duration 2.928 s
+
+Connection rate: 6829.9 conn/s (0.1 ms/conn, <=1 concurrent connections)
+Connection time [ms]: min 0.1 avg 0.1 max 14.8 median 0.5 stddev 0.1
+Connection time [ms]: connect 0.0
+Connection length [replies/conn]: 1.000
+
+Request rate: 13659.7 req/s (0.1 ms/req)
+Request size [B]: 62.0
+
+Reply rate [replies/s]: min 0.0 avg 0.0 max 0.0 stddev 0.0 (0 samples)
+Reply time [ms]: response 0.1 transfer 0.0
+Reply size [B]: header 76.0 content 12.0 footer 0.0 (total 88.0)
+Reply status: 1xx=0 2xx=20000 3xx=0 4xx=0 5xx=0
+
+CPU time [s]: user 0.66 system 2.27 (user 22.4% system 77.5% total 99.9%)
+Net I/O: 1414.0 KB/s (11.6*10^6 bps)
+
+Errors: total 20000 client-timo 0 socket-timo 0 connrefused 0 connreset 20000
+Errors: fd-unavail 0 addrunavail 0 ftab-full 0 other 0
+```
+
+## Hyper
+
+[Hyper](https://hyper.rs/) is a Rust HTTP library that topped the
+[TechEmpower Web Framework Benchmarks results](https://www.techempower.com/benchmarks/#section=data-r18&hw=ph&test=plaintext) in 2019-07-09.
+
+Versions:
+* rustc: 1.38.0-nightly
+* hyper: 0.12
+
+Code (copied from
+https://github.com/hyperium/hyper/blob/0.12.x/examples/hello.rs, but removed `pretty_env_logger`
+calls due to compilation issues):
+```rust
+#![deny(warnings)]
+extern crate hyper;
+// extern crate pretty_env_logger;
+
+use hyper::{Body, Request, Response, Server};
+use hyper::service::service_fn_ok;
+use hyper::rt::{self, Future};
+
+fn main() {
+    // pretty_env_logger::init();
+    let addr = ([127, 0, 0, 1], 3000).into();
+
+    let server = Server::bind(&addr)
+        .serve(|| {
+            // This is the `Service` that will handle the connection.
+            // `service_fn_ok` is a helper to convert a function that
+            // returns a Response into a `Service`.
+            service_fn_ok(move |_: Request<Body>| {
+                Response::new(Body::from("Hello World!"))
+            })
+        })
+        .map_err(|e| eprintln!("server error: {}", e));
+
+    println!("Listening on http://{}", addr);
+
+    rt::run(server);
+}
+```
+
+Compilation and run:
+```sh
+cargo run --release
+```
+
+Example results (60712.3 req/s):
+```sh
+httperf --client=0/1 --server=localhost --port=3000 --uri=/ --send-buffer=4096 --recv-buffer=16384 --num-conns=20000 --num-calls=200
+httperf: warning: open file limit > FD_SETSIZE; limiting max. # of open files to FD_SETSIZE
+Maximum connect burst length: 1
+
+Total: connections 20000 requests 4000000 replies 4000000 test-duration 65.884 s
+
+Connection rate: 303.6 conn/s (3.3 ms/conn, <=1 concurrent connections)
+Connection time [ms]: min 3.0 avg 3.3 max 11.3 median 3.5 stddev 0.3
+Connection time [ms]: connect 0.0
+Connection length [replies/conn]: 200.000
+
+Request rate: 60712.3 req/s (0.0 ms/req)
+Request size [B]: 62.0
+
+Reply rate [replies/s]: min 58704.0 avg 60732.7 max 62587.7 stddev 1021.7 (13 samples)
+Reply time [ms]: response 0.0 transfer 0.0
+Reply size [B]: header 76.0 content 12.0 footer 0.0 (total 88.0)
+Reply status: 1xx=0 2xx=4000000 3xx=0 4xx=0 5xx=0
+
+CPU time [s]: user 15.91 system 49.97 (user 24.1% system 75.8% total 100.0%)
+Net I/O: 8893.4 KB/s (72.9*10^6 bps)
+
+Errors: total 0 client-timo 0 socket-timo 0 connrefused 0 connreset 0
+Errors: fd-unavail 0 addrunavail 0 ftab-full 0 other 0
+```
+
+## Simple-Web-Server
+
+In these simplistic tests, the performance of Simple-Web-Server is similar to
+the Hyper Rust HTTP library, although Hyper seems to be slightly faster more
+often than not.
+
+Versions:
+* g++: 9.1.0
+
+Code (modified `http_examples.cpp`):
+```c++
+#include "server_http.hpp"
+
+using HttpServer = SimpleWeb::Server<SimpleWeb::HTTP>;
+
+int main() {
+  HttpServer server;
+  server.config.port = 3000;
+
+  server.default_resource["GET"] = [](std::shared_ptr<HttpServer::Response> response, std::shared_ptr<HttpServer::Request> /*request*/) {
+    response->write("Hello World!", {{"Date", SimpleWeb::Date::to_string(std::chrono::system_clock::now())}});
+  };
+
+  server.start();
+}
+```
+
+Build, compilation and run:
+```sh
+mkdir build && cd build
+CXX=g++-9 CXXFLAGS="-O2 -DNDEBUG -flto" cmake ..
+make
+./http_examples
+```
+
+Example results (60596.3 req/s):
+```sh
+httperf --client=0/1 --server=localhost --port=3000 --uri=/ --send-buffer=4096 --recv-buffer=16384 --num-conns=20000 --num-calls=200
+httperf: warning: open file limit > FD_SETSIZE; limiting max. # of open files to FD_SETSIZE
+Maximum connect burst length: 1
+
+Total: connections 20000 requests 4000000 replies 4000000 test-duration 66.011 s
+
+Connection rate: 303.0 conn/s (3.3 ms/conn, <=1 concurrent connections)
+Connection time [ms]: min 3.2 avg 3.3 max 8.0 median 3.5 stddev 0.0
+Connection time [ms]: connect 0.0
+Connection length [replies/conn]: 200.000
+
+Request rate: 60596.3 req/s (0.0 ms/req)
+Request size [B]: 62.0
+
+Reply rate [replies/s]: min 60399.6 avg 60596.9 max 60803.8 stddev 130.9 (13 samples)
+Reply time [ms]: response 0.0 transfer 0.0
+Reply size [B]: header 76.0 content 12.0 footer 0.0 (total 88.0)
+Reply status: 1xx=0 2xx=4000000 3xx=0 4xx=0 5xx=0
+
+CPU time [s]: user 16.07 system 49.93 (user 24.3% system 75.6% total 100.0%)
+Net I/O: 8876.4 KB/s (72.7*10^6 bps)
+
+Errors: total 0 client-timo 0 socket-timo 0 connrefused 0 connreset 0
+Errors: fd-unavail 0 addrunavail 0 ftab-full 0 other 0
+```
diff --git a/third_party/Simple-web-server/repo/http_examples.cpp b/third_party/Simple-web-server/repo/http_examples.cpp
index 60d13111dd..847f1bbd83 100644
--- a/third_party/Simple-web-server/repo/http_examples.cpp
+++ b/third_party/Simple-web-server/repo/http_examples.cpp
@@ -1,220 +1,254 @@
-#include "server_http.hpp"
 #include "client_http.hpp"
+#include "server_http.hpp"
+#include <future>
 
-//Added for the json-example
+// Added for the json-example
 #define BOOST_SPIRIT_THREADSAFE
-#include <boost/property_tree/ptree.hpp>
 #include <boost/property_tree/json_parser.hpp>
+#include <boost/property_tree/ptree.hpp>
 
-//Added for the default_resource example
-#include <fstream>
+// Added for the default_resource example
+#include <algorithm>
 #include <boost/filesystem.hpp>
+#include <fstream>
 #include <vector>
-#include <algorithm>
 #ifdef HAVE_OPENSSL
 #include "crypto.hpp"
 #endif
 
 using namespace std;
-//Added for the json-example:
+// Added for the json-example:
 using namespace boost::property_tree;
 
-typedef SimpleWeb::Server<SimpleWeb::HTTP> HttpServer;
-typedef SimpleWeb::Client<SimpleWeb::HTTP> HttpClient;
-
-//Added for the default_resource example
-void default_resource_send(const HttpServer &server, const shared_ptr<HttpServer::Response> &response,
-                           const shared_ptr<ifstream> &ifs);
+using HttpServer = SimpleWeb::Server<SimpleWeb::HTTP>;
+using HttpClient = SimpleWeb::Client<SimpleWeb::HTTP>;
 
 int main() {
-    //HTTP-server at port 8080 using 1 thread
-    //Unless you do more heavy non-threaded processing in the resources,
-    //1 thread is usually faster than several threads
-    HttpServer server;
-    server.config.port=80;
-    
-    //Add resources using path-regex and method-string, and an anonymous function
-    //POST-example for the path /string, responds the posted string
-    server.resource["^/string$"]["POST"]=[](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
-        //Retrieve string:
-        auto content=request->content.string();
-        //request->content.string() is a convenience function for:
-        //stringstream ss;
-        //ss << request->content.rdbuf();
-        //string content=ss.str();
-        
-        *response << "HTTP/1.1 200 OK\r\nContent-Length: " << content.length() << "\r\n\r\n" << content;
-    };
-    
-    //POST-example for the path /json, responds firstName+" "+lastName from the posted json
-    //Responds with an appropriate error message if the posted json is not valid, or if firstName or lastName is missing
-    //Example posted json:
-    //{
-    //  "firstName": "John",
-    //  "lastName": "Smith",
-    //  "age": 25
-    //}
-    server.resource["^/json$"]["POST"]=[](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
-        try {
-            ptree pt;
-            read_json(request->content, pt);
-
-            string name=pt.get<string>("firstName")+" "+pt.get<string>("lastName");
-
-            *response << "HTTP/1.1 200 OK\r\n"
-                      << "Content-Type: application/json\r\n"
-                      << "Content-Length: " << name.length() << "\r\n\r\n"
-                      << name;
-        }
-        catch(exception& e) {
-            *response << "HTTP/1.1 400 Bad Request\r\nContent-Length: " << strlen(e.what()) << "\r\n\r\n" << e.what();
-        }
-    };
-
-    //GET-example for the path /info
-    //Responds with request-information
-    server.resource["^/info$"]["GET"]=[](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
-        stringstream content_stream;
-        content_stream << "<h1>Request from " << request->remote_endpoint_address << " (" << request->remote_endpoint_port << ")</h1>";
-        content_stream << request->method << " " << request->path << " HTTP/" << request->http_version << "<br>";
-        for(auto& header: request->header) {
-            content_stream << header.first << ": " << header.second << "<br>";
-        }
-        
-        //find length of content_stream (length received using content_stream.tellp())
-        content_stream.seekp(0, ios::end);
-        
-        *response <<  "HTTP/1.1 200 OK\r\nContent-Length: " << content_stream.tellp() << "\r\n\r\n" << content_stream.rdbuf();
-    };
-    
-    //GET-example for the path /match/[number], responds with the matched string in path (number)
-    //For instance a request GET /match/123 will receive: 123
-    server.resource["^/match/([0-9]+)$"]["GET"]=[&server](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
-        string number=request->path_match[1];
-        *response << "HTTP/1.1 200 OK\r\nContent-Length: " << number.length() << "\r\n\r\n" << number;
-    };
-    
-    //Get example simulating heavy work in a separate thread
-    server.resource["^/work$"]["GET"]=[&server](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> /*request*/) {
-        thread work_thread([response] {
-            this_thread::sleep_for(chrono::seconds(5));
-            string message="Work done";
-            *response << "HTTP/1.1 200 OK\r\nContent-Length: " << message.length() << "\r\n\r\n" << message;
-        });
-        work_thread.detach();
-    };
-
-    server.resource["^/getAvailableNetwork$"]["GET"]=[&server](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> /*request*/) {
-        thread work_thread([response] {
-            this_thread::sleep_for(chrono::seconds(5));
-            // string message="Work done";
-            string json_string="{\"result\":[{\"ch\":13,\"ha\":\"18B43000003D2785\",\"nn\":\"NEST-PAN-C1E7\",\"pi\":\"0xC19B\",\"xp\":\"EEA74CE1EDFA2E8A\"}]}";
-            // string json_string="{\"firstName\": \"John\",\"lastName\": \"Smith\",\"age\": 25}";
-            *response << "HTTP/1.1 200 OK\r\nContent-Length: " << json_string.length() << "\r\nContent-Type:application/json; charset=utf-8" << "\r\n\r\n" << json_string;
-        });
-        work_thread.detach();
-    };
-    
-    //Default GET-example. If no other matches, this anonymous function will be called. 
-    //Will respond with content in the web/-directory, and its subdirectories.
-    //Default file: index.html
-    //Can for instance be used to retrieve an HTML 5 client that uses REST-resources on this server
-    server.default_resource["GET"]=[&server](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
-        try {
-            auto web_root_path=boost::filesystem::canonical("web");
-            auto path=boost::filesystem::canonical(web_root_path/request->path);
-            //Check if path is within web_root_path
-            if(distance(web_root_path.begin(), web_root_path.end())>distance(path.begin(), path.end()) ||
-               !equal(web_root_path.begin(), web_root_path.end(), path.begin()))
-                throw invalid_argument("path must be within root path");
-            if(boost::filesystem::is_directory(path))
-                path/="index.html";
-            if(!(boost::filesystem::exists(path) && boost::filesystem::is_regular_file(path)))
-                throw invalid_argument("file does not exist");
-
-            std::string cache_control, etag;
-
-            // Uncomment the following line to enable Cache-Control
-            // cache_control="Cache-Control: max-age=86400\r\n";
+  // HTTP-server at port 8080 using 1 thread
+  // Unless you do more heavy non-threaded processing in the resources,
+  // 1 thread is usually faster than several threads
+  HttpServer server;
+  server.config.port = 8080;
+
+  // Add resources using path-regex and method-string, and an anonymous function
+  // POST-example for the path /string, responds the posted string
+  server.resource["^/string$"]["POST"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    // Retrieve string:
+    auto content = request->content.string();
+    // request->content.string() is a convenience function for:
+    // stringstream ss;
+    // ss << request->content.rdbuf();
+    // auto content=ss.str();
+
+    *response << "HTTP/1.1 200 OK\r\nContent-Length: " << content.length() << "\r\n\r\n"
+              << content;
+
+
+    // Alternatively, use one of the convenience functions, for instance:
+    // response->write(content);
+  };
+
+  // POST-example for the path /json, responds firstName+" "+lastName from the posted json
+  // Responds with an appropriate error message if the posted json is not valid, or if firstName or lastName is missing
+  // Example posted json:
+  // {
+  //   "firstName": "John",
+  //   "lastName": "Smith",
+  //   "age": 25
+  // }
+  server.resource["^/json$"]["POST"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    try {
+      ptree pt;
+      read_json(request->content, pt);
+
+      auto name = pt.get<string>("firstName") + " " + pt.get<string>("lastName");
+
+      *response << "HTTP/1.1 200 OK\r\n"
+                << "Content-Length: " << name.length() << "\r\n\r\n"
+                << name;
+    }
+    catch(const exception &e) {
+      *response << "HTTP/1.1 400 Bad Request\r\nContent-Length: " << strlen(e.what()) << "\r\n\r\n"
+                << e.what();
+    }
+
+
+    // Alternatively, using a convenience function:
+    // try {
+    //     ptree pt;
+    //     read_json(request->content, pt);
+
+    //     auto name=pt.get<string>("firstName")+" "+pt.get<string>("lastName");
+    //     response->write(name);
+    // }
+    // catch(const exception &e) {
+    //     response->write(SimpleWeb::StatusCode::client_error_bad_request, e.what());
+    // }
+  };
+
+  // GET-example for the path /info
+  // Responds with request-information
+  server.resource["^/info$"]["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    stringstream stream;
+    stream << "<h1>Request from " << request->remote_endpoint().address().to_string() << ":" << request->remote_endpoint().port() << "</h1>";
+
+    stream << request->method << " " << request->path << " HTTP/" << request->http_version;
+
+    stream << "<h2>Query Fields</h2>";
+    auto query_fields = request->parse_query_string();
+    for(auto &field : query_fields)
+      stream << field.first << ": " << field.second << "<br>";
+
+    stream << "<h2>Header Fields</h2>";
+    for(auto &field : request->header)
+      stream << field.first << ": " << field.second << "<br>";
+
+    response->write(stream);
+  };
+
+  // GET-example for the path /match/[number], responds with the matched string in path (number)
+  // For instance a request GET /match/123 will receive: 123
+  server.resource["^/match/([0-9]+)$"]["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    response->write(request->path_match[1].str());
+  };
+
+  // GET-example simulating heavy work in a separate thread
+  server.resource["^/work$"]["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> /*request*/) {
+    thread work_thread([response] {
+      this_thread::sleep_for(chrono::seconds(5));
+      response->write("Work done");
+    });
+    work_thread.detach();
+  };
+
+  // Default GET-example. If no other matches, this anonymous function will be called.
+  // Will respond with content in the web/-directory, and its subdirectories.
+  // Default file: index.html
+  // Can for instance be used to retrieve an HTML 5 client that uses REST-resources on this server
+  server.default_resource["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    try {
+      auto web_root_path = boost::filesystem::canonical("web");
+      auto path = boost::filesystem::canonical(web_root_path / request->path);
+      // Check if path is within web_root_path
+      if(distance(web_root_path.begin(), web_root_path.end()) > distance(path.begin(), path.end()) ||
+         !equal(web_root_path.begin(), web_root_path.end(), path.begin()))
+        throw invalid_argument("path must be within root path");
+      if(boost::filesystem::is_directory(path))
+        path /= "index.html";
+
+      SimpleWeb::CaseInsensitiveMultimap header;
+
+      // Uncomment the following line to enable Cache-Control
+      // header.emplace("Cache-Control", "max-age=86400");
 
 #ifdef HAVE_OPENSSL
-            // Uncomment the following lines to enable ETag
-            // {
-            //     ifstream ifs(path.string(), ifstream::in | ios::binary);
-            //     if(ifs) {
-            //         auto hash=SimpleWeb::Crypto::to_hex_string(SimpleWeb::Crypto::md5(ifs));
-            //         etag = "ETag: \""+hash+"\"\r\n";
-            //         auto it=request->header.find("If-None-Match");
-            //         if(it!=request->header.end()) {
-            //             if(!it->second.empty() && it->second.compare(1, hash.size(), hash)==0) {
-            //                 *response << "HTTP/1.1 304 Not Modified\r\n" << cache_control << etag << "\r\n\r\n";
-            //                 return;
-            //             }
-            //         }
-            //     }
-            //     else
-            //         throw invalid_argument("could not read file");
-            // }
+//    Uncomment the following lines to enable ETag
+//    {
+//      ifstream ifs(path.string(), ifstream::in | ios::binary);
+//      if(ifs) {
+//        auto hash = SimpleWeb::Crypto::to_hex_string(SimpleWeb::Crypto::md5(ifs));
+//        header.emplace("ETag", "\"" + hash + "\"");
+//        auto it = request->header.find("If-None-Match");
+//        if(it != request->header.end()) {
+//          if(!it->second.empty() && it->second.compare(1, hash.size(), hash) == 0) {
+//            response->write(SimpleWeb::StatusCode::redirection_not_modified, header);
+//            return;
+//          }
+//        }
+//      }
+//      else
+//        throw invalid_argument("could not read file");
+//    }
 #endif
 
-            auto ifs=make_shared<ifstream>();
-            ifs->open(path.string(), ifstream::in | ios::binary | ios::ate);
-            
-            if(*ifs) {
-                auto length=ifs->tellg();
-                ifs->seekg(0, ios::beg);
-                
-                *response << "HTTP/1.1 200 OK\r\n" << cache_control << etag << "Content-Length: " << length << "\r\n\r\n";
-                default_resource_send(server, response, ifs);
+      auto ifs = make_shared<ifstream>();
+      ifs->open(path.string(), ifstream::in | ios::binary | ios::ate);
+
+      if(*ifs) {
+        auto length = ifs->tellg();
+        ifs->seekg(0, ios::beg);
+
+        header.emplace("Content-Length", to_string(length));
+        response->write(header);
+
+        // Trick to define a recursive function within this scope (for example purposes)
+        class FileServer {
+        public:
+          static void read_and_send(const shared_ptr<HttpServer::Response> &response, const shared_ptr<ifstream> &ifs) {
+            // Read and send 128 KB at a time
+            static vector<char> buffer(131072); // Safe when server is running on one thread
+            streamsize read_length;
+            if((read_length = ifs->read(&buffer[0], static_cast<streamsize>(buffer.size())).gcount()) > 0) {
+              response->write(&buffer[0], read_length);
+              if(read_length == static_cast<streamsize>(buffer.size())) {
+                response->send([response, ifs](const SimpleWeb::error_code &ec) {
+                  if(!ec)
+                    read_and_send(response, ifs);
+                  else
+                    cerr << "Connection interrupted" << endl;
+                });
+              }
             }
-            else
-                throw invalid_argument("could not read file");
-        }
-        catch(const exception &e) {
-            string content="Could not open path "+request->path+": "+e.what();
-            *response << "HTTP/1.1 400 Bad Request\r\nContent-Length: " << content.length() << "\r\n\r\n" << content;
-        }
-    };
-    
-    thread server_thread([&server](){
-        //Start server
-        server.start();
+          }
+        };
+        FileServer::read_and_send(response, ifs);
+      }
+      else
+        throw invalid_argument("could not read file");
+    }
+    catch(const exception &e) {
+      response->write(SimpleWeb::StatusCode::client_error_bad_request, "Could not open path " + request->path + ": " + e.what());
+    }
+  };
+
+  server.on_error = [](shared_ptr<HttpServer::Request> /*request*/, const SimpleWeb::error_code & /*ec*/) {
+    // Handle errors here
+    // Note that connection timeouts will also call this handle with ec set to SimpleWeb::errc::operation_canceled
+  };
+
+  // Start server and receive assigned port when server is listening for requests
+  promise<unsigned short> server_port;
+  thread server_thread([&server, &server_port]() {
+    // Start server
+    server.start([&server_port](unsigned short port) {
+      server_port.set_value(port);
     });
-    
-    //Wait for server to start so that the client can connect
-    this_thread::sleep_for(chrono::seconds(1));
-    
-    // //Client examples
-    // HttpClient client("localhost:8080");
-    // auto r1=client.request("GET", "/match/123");
-    // cout << r1->content.rdbuf() << endl;
-
-    // string json_string="{\"firstName\": \"John\",\"lastName\": \"Smith\",\"age\": 25}";
-    // auto r2=client.request("POST", "/string", json_string);
-    // cout << r2->content.rdbuf() << endl;
-    
-    // auto r3=client.request("POST", "/json", json_string);
-    // cout << r3->content.rdbuf() << endl;
-    
-    server_thread.join();
-    
-    return 0;
-}
-
-void default_resource_send(const HttpServer &server, const shared_ptr<HttpServer::Response> &response,
-                           const shared_ptr<ifstream> &ifs) {
-    //read and send 128 KB at a time
-    static vector<char> buffer(131072); // Safe when server is running on one thread
-    streamsize read_length;
-    if((read_length=ifs->read(&buffer[0], buffer.size()).gcount())>0) {
-        response->write(&buffer[0], read_length);
-        if(read_length==static_cast<streamsize>(buffer.size())) {
-            server.send(response, [&server, response, ifs](const boost::system::error_code &ec) {
-                if(!ec)
-                    default_resource_send(server, response, ifs);
-                else
-                    cerr << "Connection interrupted" << endl;
-            });
-        }
+  });
+  cout << "Server listening on port " << server_port.get_future().get() << endl
+       << endl;
+
+  // Client examples
+  string json_string = "{\"firstName\": \"John\",\"lastName\": \"Smith\",\"age\": 25}";
+
+  // Synchronous request examples
+  {
+    HttpClient client("localhost:8080");
+    try {
+      cout << "Example GET request to http://localhost:8080/match/123" << endl;
+      auto r1 = client.request("GET", "/match/123");
+      cout << "Response content: " << r1->content.rdbuf() << endl // Alternatively, use the convenience function r1->content.string()
+           << endl;
+
+      cout << "Example POST request to http://localhost:8080/string" << endl;
+      auto r2 = client.request("POST", "/string", json_string);
+      cout << "Response content: " << r2->content.rdbuf() << endl
+           << endl;
+    }
+    catch(const SimpleWeb::system_error &e) {
+      cerr << "Client request error: " << e.what() << endl;
     }
+  }
+
+  // Asynchronous request example
+  {
+    HttpClient client("localhost:8080");
+    cout << "Example POST request to http://localhost:8080/json" << endl;
+    client.request("POST", "/json", json_string, [](shared_ptr<HttpClient::Response> response, const SimpleWeb::error_code &ec) {
+      if(!ec)
+        cout << "Response content: " << response->content.rdbuf() << endl;
+    });
+    client.io_service->run();
+  }
+
+  server_thread.join();
 }
diff --git a/third_party/Simple-web-server/repo/https_examples.cpp b/third_party/Simple-web-server/repo/https_examples.cpp
index 88621709d2..676503b707 100644
--- a/third_party/Simple-web-server/repo/https_examples.cpp
+++ b/third_party/Simple-web-server/repo/https_examples.cpp
@@ -1,206 +1,252 @@
-#include "server_https.hpp"
 #include "client_https.hpp"
+#include "server_https.hpp"
+#include <future>
 
-//Added for the json-example
+// Added for the json-example
 #define BOOST_SPIRIT_THREADSAFE
-#include <boost/property_tree/ptree.hpp>
 #include <boost/property_tree/json_parser.hpp>
+#include <boost/property_tree/ptree.hpp>
 
-//Added for the default_resource example
-#include <fstream>
+// Added for the default_resource example
+#include "crypto.hpp"
+#include <algorithm>
 #include <boost/filesystem.hpp>
+#include <fstream>
 #include <vector>
-#include <algorithm>
-#include "crypto.hpp"
 
 using namespace std;
-//Added for the json-example:
+// Added for the json-example:
 using namespace boost::property_tree;
 
-typedef SimpleWeb::Server<SimpleWeb::HTTPS> HttpsServer;
-typedef SimpleWeb::Client<SimpleWeb::HTTPS> HttpsClient;
-
-//Added for the default_resource example
-void default_resource_send(const HttpsServer &server, const shared_ptr<HttpsServer::Response> &response,
-                           const shared_ptr<ifstream> &ifs);
+using HttpsServer = SimpleWeb::Server<SimpleWeb::HTTPS>;
+using HttpsClient = SimpleWeb::Client<SimpleWeb::HTTPS>;
 
 int main() {
-    //HTTPS-server at port 8080 using 1 thread
-    //Unless you do more heavy non-threaded processing in the resources,
-    //1 thread is usually faster than several threads
-    HttpsServer server("server.crt", "server.key");
-    server.config.port=8080;
-    
-    //Add resources using path-regex and method-string, and an anonymous function
-    //POST-example for the path /string, responds the posted string
-    server.resource["^/string$"]["POST"]=[](shared_ptr<HttpsServer::Response> response, shared_ptr<HttpsServer::Request> request) {
-        //Retrieve string:
-        auto content=request->content.string();
-        //request->content.string() is a convenience function for:
-        //stringstream ss;
-        //ss << request->content.rdbuf();
-        //string content=ss.str();
-        
-        *response << "HTTP/1.1 200 OK\r\nContent-Length: " << content.length() << "\r\n\r\n" << content;
-    };
-    
-    //POST-example for the path /json, responds firstName+" "+lastName from the posted json
-    //Responds with an appropriate error message if the posted json is not valid, or if firstName or lastName is missing
-    //Example posted json:
-    //{
-    //  "firstName": "John",
-    //  "lastName": "Smith",
-    //  "age": 25
-    //}
-    server.resource["^/json$"]["POST"]=[](shared_ptr<HttpsServer::Response> response, shared_ptr<HttpsServer::Request> request) {
-        try {
-            ptree pt;
-            read_json(request->content, pt);
-
-            string name=pt.get<string>("firstName")+" "+pt.get<string>("lastName");
-
-            *response << "HTTP/1.1 200 OK\r\n"
-                      << "Content-Type: application/json\r\n"
-                      << "Content-Length: " << name.length() << "\r\n\r\n"
-                      << name;
-        }
-        catch(exception& e) {
-            *response << "HTTP/1.1 400 Bad Request\r\nContent-Length: " << strlen(e.what()) << "\r\n\r\n" << e.what();
-        }
-    };
-    
-    //GET-example for the path /info
-    //Responds with request-information
-    server.resource["^/info$"]["GET"]=[](shared_ptr<HttpsServer::Response> response, shared_ptr<HttpsServer::Request> request) {
-        stringstream content_stream;
-        content_stream << "<h1>Request from " << request->remote_endpoint_address << " (" << request->remote_endpoint_port << ")</h1>";
-        content_stream << request->method << " " << request->path << " HTTP/" << request->http_version << "<br>";
-        for(auto& header: request->header) {
-            content_stream << header.first << ": " << header.second << "<br>";
-        }
-        
-        //find length of content_stream (length received using content_stream.tellp())
-        content_stream.seekp(0, ios::end);
-        
-        *response <<  "HTTP/1.1 200 OK\r\nContent-Length: " << content_stream.tellp() << "\r\n\r\n" << content_stream.rdbuf();
-    };
-    
-    //GET-example for the path /match/[number], responds with the matched string in path (number)
-    //For instance a request GET /match/123 will receive: 123
-    server.resource["^/match/([0-9]+)$"]["GET"]=[&server](shared_ptr<HttpsServer::Response> response, shared_ptr<HttpsServer::Request> request) {
-        string number=request->path_match[1];
-        *response << "HTTP/1.1 200 OK\r\nContent-Length: " << number.length() << "\r\n\r\n" << number;
-    };
-    
-    //Get example simulating heavy work in a separate thread
-    server.resource["^/work$"]["GET"]=[&server](shared_ptr<HttpsServer::Response> response, shared_ptr<HttpsServer::Request> /*request*/) {
-        thread work_thread([response] {
-            this_thread::sleep_for(chrono::seconds(5));
-            string message="Work done";
-            *response << "HTTP/1.1 200 OK\r\nContent-Length: " << message.length() << "\r\n\r\n" << message;
-        });
-        work_thread.detach();
-    };
-    
-    //Default GET-example. If no other matches, this anonymous function will be called. 
-    //Will respond with content in the web/-directory, and its subdirectories.
-    //Default file: index.html
-    //Can for instance be used to retrieve an HTML 5 client that uses REST-resources on this server
-    server.default_resource["GET"]=[&server](shared_ptr<HttpsServer::Response> response, shared_ptr<HttpsServer::Request> request) {
-        try {
-            auto web_root_path=boost::filesystem::canonical("web");
-            auto path=boost::filesystem::canonical(web_root_path/request->path);
-            //Check if path is within web_root_path
-            if(distance(web_root_path.begin(), web_root_path.end())>distance(path.begin(), path.end()) ||
-               !equal(web_root_path.begin(), web_root_path.end(), path.begin()))
-                throw invalid_argument("path must be within root path");
-            if(boost::filesystem::is_directory(path))
-                path/="index.html";
-            if(!(boost::filesystem::exists(path) && boost::filesystem::is_regular_file(path)))
-                throw invalid_argument("file does not exist");
-
-            std::string cache_control, etag;
-
-            // Uncomment the following line to enable Cache-Control
-            // cache_control="Cache-Control: max-age=86400\r\n";
-
-            // Uncomment the following lines to enable ETag
-            // {
-            //     ifstream ifs(path.string(), ifstream::in | ios::binary);
-            //     if(ifs) {
-            //         auto hash=SimpleWeb::Crypto::to_hex_string(SimpleWeb::Crypto::md5(ifs));
-            //         etag = "ETag: \""+hash+"\"\r\n";
-            //         auto it=request->header.find("If-None-Match");
-            //         if(it!=request->header.end()) {
-            //             if(!it->second.empty() && it->second.compare(1, hash.size(), hash)==0) {
-            //                 *response << "HTTP/1.1 304 Not Modified\r\n" << cache_control << etag << "\r\n\r\n";
-            //                 return;
-            //             }
-            //         }
-            //     }
-            //     else
-            //         throw invalid_argument("could not read file");
-            // }
-
-            auto ifs=make_shared<ifstream>();
-            ifs->open(path.string(), ifstream::in | ios::binary | ios::ate);
-            
-            if(*ifs) {
-                auto length=ifs->tellg();
-                ifs->seekg(0, ios::beg);
-                
-                *response << "HTTP/1.1 200 OK\r\n" << cache_control << etag << "Content-Length: " << length << "\r\n\r\n";
-                default_resource_send(server, response, ifs);
+  // HTTPS-server at port 8080 using 1 thread
+  // Unless you do more heavy non-threaded processing in the resources,
+  // 1 thread is usually faster than several threads
+  HttpsServer server("server.crt", "server.key");
+  server.config.port = 8080;
+
+  // Add resources using path-regex and method-string, and an anonymous function
+  // POST-example for the path /string, responds the posted string
+  server.resource["^/string$"]["POST"] = [](shared_ptr<HttpsServer::Response> response, shared_ptr<HttpsServer::Request> request) {
+    // Retrieve string:
+    auto content = request->content.string();
+    // request->content.string() is a convenience function for:
+    // stringstream ss;
+    // ss << request->content.rdbuf();
+    // auto content=ss.str();
+
+    *response << "HTTP/1.1 200 OK\r\nContent-Length: " << content.length() << "\r\n\r\n"
+              << content;
+
+
+    // Alternatively, use one of the convenience functions, for instance:
+    // response->write(content);
+  };
+
+  // POST-example for the path /json, responds firstName+" "+lastName from the posted json
+  // Responds with an appropriate error message if the posted json is not valid, or if firstName or lastName is missing
+  // Example posted json:
+  // {
+  //   "firstName": "John",
+  //   "lastName": "Smith",
+  //   "age": 25
+  // }
+  server.resource["^/json$"]["POST"] = [](shared_ptr<HttpsServer::Response> response, shared_ptr<HttpsServer::Request> request) {
+    try {
+      ptree pt;
+      read_json(request->content, pt);
+
+      auto name = pt.get<string>("firstName") + " " + pt.get<string>("lastName");
+
+      *response << "HTTP/1.1 200 OK\r\n"
+                << "Content-Length: " << name.length() << "\r\n\r\n"
+                << name;
+    }
+    catch(const exception &e) {
+      *response << "HTTP/1.1 400 Bad Request\r\nContent-Length: " << strlen(e.what()) << "\r\n\r\n"
+                << e.what();
+    }
+
+
+    // Alternatively, using a convenience function:
+    // try {
+    //     ptree pt;
+    //     read_json(request->content, pt);
+
+    //     auto name=pt.get<string>("firstName")+" "+pt.get<string>("lastName");
+    //     response->write(name);
+    // }
+    // catch(const exception &e) {
+    //     response->write(SimpleWeb::StatusCode::client_error_bad_request, e.what());
+    // }
+  };
+
+  // GET-example for the path /info
+  // Responds with request-information
+  server.resource["^/info$"]["GET"] = [](shared_ptr<HttpsServer::Response> response, shared_ptr<HttpsServer::Request> request) {
+    stringstream stream;
+    stream << "<h1>Request from " << request->remote_endpoint().address().to_string() << ":" << request->remote_endpoint().port() << "</h1>";
+
+    stream << request->method << " " << request->path << " HTTP/" << request->http_version;
+
+    stream << "<h2>Query Fields</h2>";
+    auto query_fields = request->parse_query_string();
+    for(auto &field : query_fields)
+      stream << field.first << ": " << field.second << "<br>";
+
+    stream << "<h2>Header Fields</h2>";
+    for(auto &field : request->header)
+      stream << field.first << ": " << field.second << "<br>";
+
+    response->write(stream);
+  };
+
+  // GET-example for the path /match/[number], responds with the matched string in path (number)
+  // For instance a request GET /match/123 will receive: 123
+  server.resource["^/match/([0-9]+)$"]["GET"] = [](shared_ptr<HttpsServer::Response> response, shared_ptr<HttpsServer::Request> request) {
+    response->write(request->path_match[1].str());
+  };
+
+  // GET-example simulating heavy work in a separate thread
+  server.resource["^/work$"]["GET"] = [](shared_ptr<HttpsServer::Response> response, shared_ptr<HttpsServer::Request> /*request*/) {
+    thread work_thread([response] {
+      this_thread::sleep_for(chrono::seconds(5));
+      response->write("Work done");
+    });
+    work_thread.detach();
+  };
+
+  // Default GET-example. If no other matches, this anonymous function will be called.
+  // Will respond with content in the web/-directory, and its subdirectories.
+  // Default file: index.html
+  // Can for instance be used to retrieve an HTML 5 client that uses REST-resources on this server
+  server.default_resource["GET"] = [](shared_ptr<HttpsServer::Response> response, shared_ptr<HttpsServer::Request> request) {
+    try {
+      auto web_root_path = boost::filesystem::canonical("web");
+      auto path = boost::filesystem::canonical(web_root_path / request->path);
+      // Check if path is within web_root_path
+      if(distance(web_root_path.begin(), web_root_path.end()) > distance(path.begin(), path.end()) ||
+         !equal(web_root_path.begin(), web_root_path.end(), path.begin()))
+        throw invalid_argument("path must be within root path");
+      if(boost::filesystem::is_directory(path))
+        path /= "index.html";
+
+      SimpleWeb::CaseInsensitiveMultimap header;
+
+      // Uncomment the following line to enable Cache-Control
+      // header.emplace("Cache-Control", "max-age=86400");
+
+#ifdef HAVE_OPENSSL
+//    Uncomment the following lines to enable ETag
+//    {
+//      ifstream ifs(path.string(), ifstream::in | ios::binary);
+//      if(ifs) {
+//        auto hash = SimpleWeb::Crypto::to_hex_string(SimpleWeb::Crypto::md5(ifs));
+//        header.emplace("ETag", "\"" + hash + "\"");
+//        auto it = request->header.find("If-None-Match");
+//        if(it != request->header.end()) {
+//          if(!it->second.empty() && it->second.compare(1, hash.size(), hash) == 0) {
+//            response->write(SimpleWeb::StatusCode::redirection_not_modified, header);
+//            return;
+//          }
+//        }
+//      }
+//      else
+//        throw invalid_argument("could not read file");
+//    }
+#endif
+
+      auto ifs = make_shared<ifstream>();
+      ifs->open(path.string(), ifstream::in | ios::binary | ios::ate);
+
+      if(*ifs) {
+        auto length = ifs->tellg();
+        ifs->seekg(0, ios::beg);
+
+        header.emplace("Content-Length", to_string(length));
+        response->write(header);
+
+        // Trick to define a recursive function within this scope (for example purposes)
+        class FileServer {
+        public:
+          static void read_and_send(const shared_ptr<HttpsServer::Response> &response, const shared_ptr<ifstream> &ifs) {
+            // Read and send 128 KB at a time
+            static vector<char> buffer(131072); // Safe when server is running on one thread
+            streamsize read_length;
+            if((read_length = ifs->read(&buffer[0], static_cast<streamsize>(buffer.size())).gcount()) > 0) {
+              response->write(&buffer[0], read_length);
+              if(read_length == static_cast<streamsize>(buffer.size())) {
+                response->send([response, ifs](const SimpleWeb::error_code &ec) {
+                  if(!ec)
+                    read_and_send(response, ifs);
+                  else
+                    cerr << "Connection interrupted" << endl;
+                });
+              }
             }
-            else
-                throw invalid_argument("could not read file");
-        }
-        catch(const exception &e) {
-            string content="Could not open path "+request->path+": "+e.what();
-            *response << "HTTP/1.1 400 Bad Request\r\nContent-Length: " << content.length() << "\r\n\r\n" << content;
-        }
-    };
-    
-    thread server_thread([&server](){
-        //Start server
-        server.start();
+          }
+        };
+        FileServer::read_and_send(response, ifs);
+      }
+      else
+        throw invalid_argument("could not read file");
+    }
+    catch(const exception &e) {
+      response->write(SimpleWeb::StatusCode::client_error_bad_request, "Could not open path " + request->path + ": " + e.what());
+    }
+  };
+
+  server.on_error = [](shared_ptr<HttpsServer::Request> /*request*/, const SimpleWeb::error_code & /*ec*/) {
+    // Handle errors here
+    // Note that connection timeouts will also call this handle with ec set to SimpleWeb::errc::operation_canceled
+  };
+
+  // Start server and receive assigned port when server is listening for requests
+  promise<unsigned short> server_port;
+  thread server_thread([&server, &server_port]() {
+    // Start server
+    server.start([&server_port](unsigned short port) {
+      server_port.set_value(port);
     });
-    
-    //Wait for server to start so that the client can connect
-    this_thread::sleep_for(chrono::seconds(1));
-    
-    //Client examples
-    //Second Client() parameter set to false: no certificate verification
+  });
+  cout << "Server listening on port " << server_port.get_future().get() << endl
+       << endl;
+
+  // Client examples
+  string json_string = "{\"firstName\": \"John\",\"lastName\": \"Smith\",\"age\": 25}";
+
+  // Synchronous request examples
+  {
     HttpsClient client("localhost:8080", false);
-    auto r1=client.request("GET", "/match/123");
-    cout << r1->content.rdbuf() << endl;
-
-    string json_string="{\"firstName\": \"John\",\"lastName\": \"Smith\",\"age\": 25}";
-    auto r2=client.request("POST", "/string", json_string);
-    cout << r2->content.rdbuf() << endl;
-    
-    auto r3=client.request("POST", "/json", json_string);
-    cout << r3->content.rdbuf() << endl;
-    
-    server_thread.join();
-    
-    return 0;
-}
+    try {
+      cout << "Example GET request to https://localhost:8080/match/123" << endl;
+      auto r1 = client.request("GET", "/match/123");
+      cout << "Response content: " << r1->content.rdbuf() << endl // Alternatively, use the convenience function r1->content.string()
+           << endl;
 
-void default_resource_send(const HttpsServer &server, const shared_ptr<HttpsServer::Response> &response,
-                           const shared_ptr<ifstream> &ifs) {
-    //read and send 128 KB at a time
-    static vector<char> buffer(131072); // Safe when server is running on one thread
-    streamsize read_length;
-    if((read_length=ifs->read(&buffer[0], buffer.size()).gcount())>0) {
-        response->write(&buffer[0], read_length);
-        if(read_length==static_cast<streamsize>(buffer.size())) {
-            server.send(response, [&server, response, ifs](const boost::system::error_code &ec) {
-                if(!ec)
-                    default_resource_send(server, response, ifs);
-                else
-                    cerr << "Connection interrupted" << endl;
-            });
-        }
+      cout << "Example POST request to https://localhost:8080/string" << endl;
+      auto r2 = client.request("POST", "/string", json_string);
+      cout << "Response content: " << r2->content.rdbuf() << endl
+           << endl;
+    }
+    catch(const SimpleWeb::system_error &e) {
+      cerr << "Client request error: " << e.what() << endl;
     }
+  }
+
+  // Asynchronous request example
+  {
+    HttpsClient client("localhost:8080", false);
+    cout << "Example POST request to https://localhost:8080/json" << endl;
+    client.request("POST", "/json", json_string, [](shared_ptr<HttpsClient::Response> response, const SimpleWeb::error_code &ec) {
+      if(!ec)
+        cout << "Response content: " << response->content.rdbuf() << endl;
+    });
+    client.io_service->run();
+  }
+
+  server_thread.join();
 }
diff --git a/third_party/Simple-web-server/repo/mutex.hpp b/third_party/Simple-web-server/repo/mutex.hpp
new file mode 100644
index 0000000000..271185024e
--- /dev/null
+++ b/third_party/Simple-web-server/repo/mutex.hpp
@@ -0,0 +1,107 @@
+// Based on https://clang.llvm.org/docs/ThreadSafetyAnalysis.html
+#ifndef SIMPLE_WEB_MUTEX_HPP
+#define SIMPLE_WEB_MUTEX_HPP
+
+#include <mutex>
+
+// Enable thread safety attributes only with clang.
+#if defined(__clang__) && (!defined(SWIG))
+#define THREAD_ANNOTATION_ATTRIBUTE__(x) __attribute__((x))
+#else
+#define THREAD_ANNOTATION_ATTRIBUTE__(x) // no-op
+#endif
+
+#define CAPABILITY(x) \
+  THREAD_ANNOTATION_ATTRIBUTE__(capability(x))
+
+#define SCOPED_CAPABILITY \
+  THREAD_ANNOTATION_ATTRIBUTE__(scoped_lockable)
+
+#define GUARDED_BY(x) \
+  THREAD_ANNOTATION_ATTRIBUTE__(guarded_by(x))
+
+#define PT_GUARDED_BY(x) \
+  THREAD_ANNOTATION_ATTRIBUTE__(pt_guarded_by(x))
+
+#define ACQUIRED_BEFORE(...) \
+  THREAD_ANNOTATION_ATTRIBUTE__(acquired_before(__VA_ARGS__))
+
+#define ACQUIRED_AFTER(...) \
+  THREAD_ANNOTATION_ATTRIBUTE__(acquired_after(__VA_ARGS__))
+
+#define REQUIRES(...) \
+  THREAD_ANNOTATION_ATTRIBUTE__(requires_capability(__VA_ARGS__))
+
+#define REQUIRES_SHARED(...) \
+  THREAD_ANNOTATION_ATTRIBUTE__(requires_shared_capability(__VA_ARGS__))
+
+#define ACQUIRE(...) \
+  THREAD_ANNOTATION_ATTRIBUTE__(acquire_capability(__VA_ARGS__))
+
+#define ACQUIRE_SHARED(...) \
+  THREAD_ANNOTATION_ATTRIBUTE__(acquire_shared_capability(__VA_ARGS__))
+
+#define RELEASE(...) \
+  THREAD_ANNOTATION_ATTRIBUTE__(release_capability(__VA_ARGS__))
+
+#define RELEASE_SHARED(...) \
+  THREAD_ANNOTATION_ATTRIBUTE__(release_shared_capability(__VA_ARGS__))
+
+#define TRY_ACQUIRE(...) \
+  THREAD_ANNOTATION_ATTRIBUTE__(try_acquire_capability(__VA_ARGS__))
+
+#define TRY_ACQUIRE_SHARED(...) \
+  THREAD_ANNOTATION_ATTRIBUTE__(try_acquire_shared_capability(__VA_ARGS__))
+
+#define EXCLUDES(...) \
+  THREAD_ANNOTATION_ATTRIBUTE__(locks_excluded(__VA_ARGS__))
+
+#define ASSERT_CAPABILITY(x) \
+  THREAD_ANNOTATION_ATTRIBUTE__(assert_capability(x))
+
+#define ASSERT_SHARED_CAPABILITY(x) \
+  THREAD_ANNOTATION_ATTRIBUTE__(assert_shared_capability(x))
+
+#define RETURN_CAPABILITY(x) \
+  THREAD_ANNOTATION_ATTRIBUTE__(lock_returned(x))
+
+#define NO_THREAD_SAFETY_ANALYSIS \
+  THREAD_ANNOTATION_ATTRIBUTE__(no_thread_safety_analysis)
+
+namespace SimpleWeb {
+  /// Mutex class that is annotated for Clang Thread Safety Analysis.
+  class CAPABILITY("mutex") Mutex {
+    std::mutex mutex;
+
+  public:
+    void lock() ACQUIRE() {
+      mutex.lock();
+    }
+
+    void unlock() RELEASE() {
+      mutex.unlock();
+    }
+  };
+
+  /// Scoped mutex guard class that is annotated for Clang Thread Safety Analysis.
+  class SCOPED_CAPABILITY LockGuard {
+    Mutex &mutex;
+    bool locked = true;
+
+  public:
+    LockGuard(Mutex &mutex_) ACQUIRE(mutex_) : mutex(mutex_) {
+      mutex.lock();
+    }
+    void unlock() RELEASE() {
+      mutex.unlock();
+      locked = false;
+    }
+    ~LockGuard() RELEASE() {
+      if(locked)
+        mutex.unlock();
+    }
+  };
+
+} // namespace SimpleWeb
+
+#endif // SIMPLE_WEB_MUTEX_HPP
diff --git a/third_party/Simple-web-server/repo/paper/.markdown-format b/third_party/Simple-web-server/repo/paper/.markdown-format
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/third_party/Simple-web-server/repo/paper/paper.bib b/third_party/Simple-web-server/repo/paper/paper.bib
new file mode 100644
index 0000000000..b81245b608
--- /dev/null
+++ b/third_party/Simple-web-server/repo/paper/paper.bib
@@ -0,0 +1,80 @@
+@online{asio,
+  author = {Kohlhoff, Christopher M.},
+  title = {Asio C++ Library},
+  year = {2003},
+  url = {https://think-async.com/Asio/},
+  urldate = {2018-07-17}
+}
+
+@online{clang_thread_safety,
+  author = {{The Clang Team}},
+  title = {Clang Thread Safety Analysis},
+  year = {2007},
+  url = {https://clang.llvm.org/docs/ThreadSafetyAnalysis.html},
+  urldate = {2018-07-17}
+}
+
+@online{beast,
+  author = {Falco, Vinnie},
+  title = {Boost.Beast},
+  year = {2016},
+  url = {https://github.com/boostorg/beast},
+  urldate = {2018-07-17}
+}
+
+@online{h20,
+  author = {{DeNA Co., Ltd.}},
+  title = {H2O},
+  year = {2014},
+  url = {https://github.com/h2o/h2o},
+  urldate = {2018-07-17}
+}
+
+@online{websocket_protocol,
+  author = {I. Fette and A. Melnikov},
+  title = {The WebSocket Protocol},
+  howpublished = {Internet Requests for Comments},
+  type = {RFC},
+  number = {6455},
+  year = {2011},
+  month = {December},
+  issn = {2070-1721},
+  publisher = {RFC Editor},
+  institution = {RFC Editor},
+  url = {http://www.rfc-editor.org/rfc/rfc6455.txt},
+  note = {\url{http://www.rfc-editor.org/rfc/rfc6455.txt}},
+  doi = {10.17487/RFC6455}
+}
+
+@online{simple_websocket_server,
+  author = {Eidheim, Ole Christian},
+  title = {Simple-WebSocket-Server},
+  year = {2014},
+  url = {https://gitlab.com/eidheim/Simple-WebSocket-Server},
+  urldate = {2018-07-17}
+}
+
+@online{mame,
+  author = {MAMEDev},
+  title = {MAME},
+  year = {1997},
+  url = {https://www.mamedev.org/},
+  urldate = {2018-07-17}
+}
+
+@online{wakely,
+  author = {Wakely, Jonathan},
+  title = {Working Draft, C++ Extensions for Networking},
+  year = {2017},
+  url = {http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4656.pdf},
+  urldate = {2018-07-17}
+}
+
+@misc{chung,
+  title = {Point Cloud Framework for Rendering {3D} Models Using {Google} {Tango}},
+  author = {Chung, Maxen and Callin, Julian},
+  year = {2017},
+  publisher = {Santa Clara: Santa Clara University, 2017},
+  url = {https://scholarcommons.scu.edu/cseng_senior/84},
+  howpublished = {Computer Science and Engineering Senior Theses, Santa Clara University},
+}
diff --git a/third_party/Simple-web-server/repo/paper/paper.md b/third_party/Simple-web-server/repo/paper/paper.md
new file mode 100644
index 0000000000..cbba733ec8
--- /dev/null
+++ b/third_party/Simple-web-server/repo/paper/paper.md
@@ -0,0 +1,100 @@
+---
+title: 'Simple-Web-Server: a fast and flexible HTTP/1.1 C++ client and server library'
+tags:
+  - C++
+  - web
+  - http
+  - client
+  - server
+  - library
+  - asio
+authors:
+  - name: Ole Christian Eidheim
+    orcid: 0000-0001-5355-6326
+    affiliation: 1
+affiliations:
+  - name: Department of Computer Science, Norwegian University of Science and Technology
+    index: 1
+date: 18 July 2019
+bibliography: paper.bib
+---
+
+# Summary
+
+The programming language C++ is commonly used for resource intensive tasks.
+Simple-Web-Server is a library that can be utilized in C++ applications to
+implement web-resources or perform HTTP or HTTPS requests in a simple manner
+across OS platforms compared to using a networking library directly. Thus,
+Simple-Web-Server can be helpful for any research software written in C++ that
+needs to communicate with remote endpoints through HTTP or HTTPS.
+
+The main features, apart from speed and ease of use, are flexibility and safety.
+The asynchronous I/O library Asio C++ Library [@asio] is used to implement
+networking and asynchronous event handling. The sending of outgoing messages has
+been made thread safe, and event handling in one or several threads is
+supported. The default event handling strategy is using one thread, commonly
+called event-loop, which makes accessing shared resources safe without using
+resource locking through for instance mutexes. Although, accessing shared
+resources in a multithreaded event-handling strategy can be made safer by
+utilizing the annotation offered in Clang Thread Safety Analysis
+[@clang_thread_safety]. In some cases, however, processing requests
+sequentially, in an event-loop scheme, can be faster than processing the
+requests in several threads where shared resources must be protected from
+simultaneous use.
+
+An additional safety feature is stopping of asynchronous handlers when the
+associated client or server object has been destroyed. An atomic instruction
+based class, ScopeRunner, was implemented to achieve this since reader-writer
+locks proved more resource intensive for this specific task. In detail, a
+ScopeRunner object has an internal atomic counter that is increased when an
+asynchronous handler is run. At the end of the handler, the counter is
+decreased. When the destructor of a client or server object is called, the
+ScopeRunner object delays the destructor until its internal counter is 0, then
+sets the counter to a negative value. Finally, when the internal counter is
+negative, the handlers are returned from instead of potentially calling methods
+or using member variables of a destroyed client or server object.
+
+Compared to using a low-level network library, specialized for a specific task,
+a slight performance overhead is expected when using the more generalized
+Simple-Web-Server library. The various utility and safety features, and code
+abstractions contribute to this overhead, but a good balance between safety,
+usability and speed is continuously sought during development of this library.
+Regular expressions can for instance be used to define which functions to be
+called for specific request paths. This can be convenient for the library user,
+but a more specific algorithm can be more efficient than using regular
+expressions.
+
+The Asio C++ Library [@asio] is currently proposed to the C++ standard library
+[@wakely]. If accepted in one of the future revisions of the C++ programming
+language, C++ applications can make use of a standardized event handling system.
+Until then, efforts are made to support old and new versions of the Asio C++
+Library, as well as both the standalone and Boost variants of the library.
+
+Simple-Web-Server is used in teaching at the Norwegian University of Science and
+Technology, and used in many external projects, for instance in the
+multi-purpose emulation framework MAME [@mame]. The library was also used in the
+senior thesis by Chung and Callin [@chung]. Furthermore, one of the motivations
+for the Simple-Web-Server project was to create a HTTP/1.1 library that was
+relatively easy to modify and extend to suit a specific need, which could also
+be positive with regards to source code contributions to the project.
+
+There are several alternatives to Simple-Web-Server. Most notably Boost.Beast
+[@beast], but this library is made for library authors and is thus harder to
+utilize in a C++ application. Additionally, Boost.Beast does not support
+standalone Asio. Another alternative is H2O [@h20] that supports several event
+handling systems, however, Asio is not yet supported. Both Boost.Beast, and to a
+lesser degree H2O, supports the WebSocket protocol [@websocket_protocol]. In the
+case of Simple-Web-Server, WebSocket is supported through a related external
+project named Simple-WebSocket-Server [@simple_websocket_server].
+
+Based on Simple-Web-Server, a new C++ library supporting HTTP/2 is under
+development. HTTP/2 is very different from HTTP/1.1, but the experiences from
+developing Simple-Web-Server, and some its implementations, such as the
+ScopeRunner class, can be helpful when writing an HTTP/2 library.
+
+# Acknowledgments
+
+I would like to thank all those who have contributed to the Simple-Web-Server
+project.
+
+# References
diff --git a/third_party/Simple-web-server/repo/server_http.hpp b/third_party/Simple-web-server/repo/server_http.hpp
index de4074300e..1db0368e2c 100644
--- a/third_party/Simple-web-server/repo/server_http.hpp
+++ b/third_party/Simple-web-server/repo/server_http.hpp
@@ -1,465 +1,848 @@
-#ifndef SERVER_HTTP_HPP
-#define	SERVER_HTTP_HPP
+#ifndef SIMPLE_WEB_SERVER_HTTP_HPP
+#define SIMPLE_WEB_SERVER_HTTP_HPP
 
-#include <boost/asio.hpp>
-#include <boost/algorithm/string/predicate.hpp>
-#include <boost/functional/hash.hpp>
-
-#include <map>
-#include <unordered_map>
-#include <thread>
+#include "asio_compatibility.hpp"
+#include "mutex.hpp"
+#include "utility.hpp"
 #include <functional>
 #include <iostream>
+#include <limits>
+#include <list>
+#include <map>
 #include <sstream>
-
-#ifndef CASE_INSENSITIVE_EQUALS_AND_HASH
-#define CASE_INSENSITIVE_EQUALS_AND_HASH
-//Based on http://www.boost.org/doc/libs/1_60_0/doc/html/unordered/hash_equality.html
-class case_insensitive_equals {
-public:
-  bool operator()(const std::string &key1, const std::string &key2) const {
-    return boost::algorithm::iequals(key1, key2);
-  }
-};
-class case_insensitive_hash {
-public:
-  size_t operator()(const std::string &key) const {
-    std::size_t seed=0;
-    for(auto &c: key)
-      boost::hash_combine(seed, std::tolower(c));
-    return seed;
-  }
-};
-#endif
+#include <thread>
+#include <unordered_set>
 
 // Late 2017 TODO: remove the following checks and always use std::regex
 #ifdef USE_BOOST_REGEX
 #include <boost/regex.hpp>
-#define REGEX_NS boost
+namespace SimpleWeb {
+  namespace regex = boost;
+}
 #else
 #include <regex>
-#define REGEX_NS std
-#endif
-
-// TODO when switching to c++14, use [[deprecated]] instead
-#ifndef DEPRECATED
-#ifdef __GNUC__
-#define DEPRECATED __attribute__((deprecated))
-#elif defined(_MSC_VER)
-#define DEPRECATED __declspec(deprecated)
-#else
-#define DEPRECATED
-#endif
+namespace SimpleWeb {
+  namespace regex = std;
+}
 #endif
 
 namespace SimpleWeb {
-    template <class socket_type>
-    class Server;
-    
-    template <class socket_type>
-    class ServerBase {
-    public:
-        virtual ~ServerBase() {}
+  template <class socket_type>
+  class Server;
 
-        class Response : public std::ostream {
-            friend class ServerBase<socket_type>;
+  template <class socket_type>
+  class ServerBase {
+  protected:
+    class Connection;
+    class Session;
 
-            boost::asio::streambuf streambuf;
+  public:
+    /// Response class where the content of the response is sent to client when the object is about to be destroyed.
+    class Response : public std::enable_shared_from_this<Response>, public std::ostream {
+      friend class ServerBase<socket_type>;
+      friend class Server<socket_type>;
 
-            std::shared_ptr<socket_type> socket;
+      std::unique_ptr<asio::streambuf> streambuf = std::unique_ptr<asio::streambuf>(new asio::streambuf());
 
-            Response(const std::shared_ptr<socket_type> &socket): std::ostream(&streambuf), socket(socket) {}
+      std::shared_ptr<Session> session;
+      long timeout_content;
 
-        public:
-            size_t size() {
-                return streambuf.size();
-            }
+      Mutex send_queue_mutex;
+      std::list<std::pair<std::shared_ptr<asio::streambuf>, std::function<void(const error_code &)>>> send_queue GUARDED_BY(send_queue_mutex);
 
-            /// If true, force server to close the connection after the response have been sent.
-            ///
-            /// This is useful when implementing a HTTP/1.0-server sending content
-            /// without specifying the content length.
-            bool close_connection_after_response = false;
-        };
-        
-        class Content : public std::istream {
-            friend class ServerBase<socket_type>;
-        public:
-            size_t size() {
-                return streambuf.size();
-            }
-            std::string string() {
-                std::stringstream ss;
-                ss << rdbuf();
-                return ss.str();
-            }
-        private:
-            boost::asio::streambuf &streambuf;
-            Content(boost::asio::streambuf &streambuf): std::istream(&streambuf), streambuf(streambuf) {}
-        };
-        
-        class Request {
-            friend class ServerBase<socket_type>;
-            friend class Server<socket_type>;
-        public:
-            std::string method, path, http_version;
-
-            Content content;
-
-            std::unordered_multimap<std::string, std::string, case_insensitive_hash, case_insensitive_equals> header;
-
-            REGEX_NS::smatch path_match;
-            
-            std::string remote_endpoint_address;
-            unsigned short remote_endpoint_port;
-            
-        private:
-            Request(const socket_type &socket): content(streambuf) {
-                try {
-                    remote_endpoint_address=socket.lowest_layer().remote_endpoint().address().to_string();
-                    remote_endpoint_port=socket.lowest_layer().remote_endpoint().port();
+      Response(std::shared_ptr<Session> session_, long timeout_content) noexcept : std::ostream(nullptr), session(std::move(session_)), timeout_content(timeout_content) {
+        rdbuf(streambuf.get());
+      }
+
+      template <typename size_type>
+      void write_header(const CaseInsensitiveMultimap &header, size_type size) {
+        bool content_length_written = false;
+        bool chunked_transfer_encoding = false;
+        bool event_stream = false;
+        for(auto &field : header) {
+          if(!content_length_written && case_insensitive_equal(field.first, "content-length"))
+            content_length_written = true;
+          else if(!chunked_transfer_encoding && case_insensitive_equal(field.first, "transfer-encoding") && case_insensitive_equal(field.second, "chunked"))
+            chunked_transfer_encoding = true;
+          else if(!event_stream && case_insensitive_equal(field.first, "content-type") && case_insensitive_equal(field.second, "text/event-stream"))
+            event_stream = true;
+
+          *this << field.first << ": " << field.second << "\r\n";
+        }
+        if(!content_length_written && !chunked_transfer_encoding && !event_stream && !close_connection_after_response)
+          *this << "Content-Length: " << size << "\r\n\r\n";
+        else
+          *this << "\r\n";
+      }
+
+      void send_from_queue() REQUIRES(send_queue_mutex) {
+        auto buffer = send_queue.begin()->first->data();
+        auto self = this->shared_from_this();
+        post(session->connection->write_strand, [self, buffer] {
+          auto lock = self->session->connection->handler_runner->continue_lock();
+          if(!lock)
+            return;
+          asio::async_write(*self->session->connection->socket, buffer, [self](const error_code &ec, std::size_t /*bytes_transferred*/) {
+            auto lock = self->session->connection->handler_runner->continue_lock();
+            if(!lock)
+              return;
+            {
+              LockGuard lock(self->send_queue_mutex);
+              if(!ec) {
+                auto it = self->send_queue.begin();
+                auto callback = std::move(it->second);
+                self->send_queue.erase(it);
+                if(self->send_queue.size() > 0)
+                  self->send_from_queue();
+
+                lock.unlock();
+                if(callback)
+                  callback(ec);
+              }
+              else {
+                // All handlers in the queue is called with ec:
+                std::list<std::function<void(const error_code &)>> callbacks;
+                for(auto &pair : self->send_queue) {
+                  if(pair.second)
+                    callbacks.emplace_back(std::move(pair.second));
                 }
-                catch(...) {}
+                self->send_queue.clear();
+
+                lock.unlock();
+                for(auto &callback : callbacks)
+                  callback(ec);
+              }
             }
-            
-            boost::asio::streambuf streambuf;
-        };
-        
-        class Config {
-            friend class ServerBase<socket_type>;
-
-            Config(unsigned short port): port(port) {}
-        public:
-            /// Port number to use. Defaults to 80 for HTTP and 443 for HTTPS.
-            unsigned short port;
-            /// Number of threads that the server will use when start() is called. Defaults to 1 thread.
-            size_t thread_pool_size=1;
-            /// Timeout on request handling. Defaults to 5 seconds.
-            size_t timeout_request=5;
-            /// Timeout on content handling. Defaults to 300 seconds.
-            size_t timeout_content=300;
-            /// IPv4 address in dotted decimal form or IPv6 address in hexadecimal notation.
-            /// If empty, the address will be any address.
-            std::string address;
-            /// Set to false to avoid binding the socket to an address that is already in use. Defaults to true.
-            bool reuse_address=true;
-        };
-        ///Set before calling start().
-        Config config;
-        
+          });
+        });
+      }
+
+      void send_on_delete(const std::function<void(const error_code &)> &callback = nullptr) noexcept {
+        auto buffer = streambuf->data();
+        auto self = this->shared_from_this(); // Keep Response instance alive through the following async_write
+        post(session->connection->write_strand, [self, buffer, callback] {
+          auto lock = self->session->connection->handler_runner->continue_lock();
+          if(!lock)
+            return;
+          asio::async_write(*self->session->connection->socket, buffer, [self, callback](const error_code &ec, std::size_t /*bytes_transferred*/) {
+            auto lock = self->session->connection->handler_runner->continue_lock();
+            if(!lock)
+              return;
+            if(callback)
+              callback(ec);
+          });
+        });
+      }
+
+    public:
+      std::size_t size() noexcept {
+        return streambuf->size();
+      }
+
+      /// Send the content of the response stream to client. The callback is called when the send has completed.
+      ///
+      /// Use this function if you need to recursively send parts of a longer message, or when using server-sent events.
+      void send(std::function<void(const error_code &)> callback = nullptr) noexcept {
+        std::shared_ptr<asio::streambuf> streambuf = std::move(this->streambuf);
+        this->streambuf = std::unique_ptr<asio::streambuf>(new asio::streambuf());
+        rdbuf(this->streambuf.get());
+
+        LockGuard lock(send_queue_mutex);
+        send_queue.emplace_back(std::move(streambuf), std::move(callback));
+        if(send_queue.size() == 1)
+          send_from_queue();
+      }
+
+      /// Write directly to stream buffer using std::ostream::write.
+      void write(const char_type *ptr, std::streamsize n) {
+        std::ostream::write(ptr, n);
+      }
+
+      /// Convenience function for writing status line, potential header fields, and empty content.
+      void write(StatusCode status_code = StatusCode::success_ok, const CaseInsensitiveMultimap &header = CaseInsensitiveMultimap()) {
+        *this << "HTTP/1.1 " << SimpleWeb::status_code(status_code) << "\r\n";
+        write_header(header, 0);
+      }
+
+      /// Convenience function for writing status line, header fields, and content.
+      void write(StatusCode status_code, string_view content, const CaseInsensitiveMultimap &header = CaseInsensitiveMultimap()) {
+        *this << "HTTP/1.1 " << SimpleWeb::status_code(status_code) << "\r\n";
+        write_header(header, content.size());
+        if(!content.empty())
+          *this << content;
+      }
+
+      /// Convenience function for writing status line, header fields, and content.
+      void write(StatusCode status_code, std::istream &content, const CaseInsensitiveMultimap &header = CaseInsensitiveMultimap()) {
+        *this << "HTTP/1.1 " << SimpleWeb::status_code(status_code) << "\r\n";
+        content.seekg(0, std::ios::end);
+        auto size = content.tellg();
+        content.seekg(0, std::ios::beg);
+        write_header(header, size);
+        if(size)
+          *this << content.rdbuf();
+      }
+
+      /// Convenience function for writing success status line, header fields, and content.
+      void write(string_view content, const CaseInsensitiveMultimap &header = CaseInsensitiveMultimap()) {
+        write(StatusCode::success_ok, content, header);
+      }
+
+      /// Convenience function for writing success status line, header fields, and content.
+      void write(std::istream &content, const CaseInsensitiveMultimap &header = CaseInsensitiveMultimap()) {
+        write(StatusCode::success_ok, content, header);
+      }
+
+      /// Convenience function for writing success status line, and header fields.
+      void write(const CaseInsensitiveMultimap &header) {
+        write(StatusCode::success_ok, std::string(), header);
+      }
+
+      /// If set to true, force server to close the connection after the response have been sent.
+      ///
+      /// This is useful when implementing a HTTP/1.0-server sending content
+      /// without specifying the content length.
+      bool close_connection_after_response = false;
+    };
+
+    class Content : public std::istream {
+      friend class ServerBase<socket_type>;
+
+    public:
+      std::size_t size() noexcept {
+        return streambuf.size();
+      }
+      /// Convenience function to return content as std::string.
+      std::string string() noexcept {
+        return std::string(asio::buffers_begin(streambuf.data()), asio::buffers_end(streambuf.data()));
+      }
+
     private:
-        class regex_orderable : public REGEX_NS::regex {
-            std::string str;
-        public:
-            regex_orderable(const char *regex_cstr) : REGEX_NS::regex(regex_cstr), str(regex_cstr) {}
-            regex_orderable(const std::string &regex_str) : REGEX_NS::regex(regex_str), str(regex_str) {}
-            bool operator<(const regex_orderable &rhs) const {
-                return str<rhs.str;
-            }
-        };
+      asio::streambuf &streambuf;
+      Content(asio::streambuf &streambuf) noexcept : std::istream(&streambuf), streambuf(streambuf) {}
+    };
+
+    class Request {
+      friend class ServerBase<socket_type>;
+      friend class Server<socket_type>;
+      friend class Session;
+
+      asio::streambuf streambuf;
+      std::weak_ptr<Connection> connection;
+      std::string optimization = std::to_string(0); // TODO: figure out what goes wrong in gcc optimization without this line
+
+      Request(std::size_t max_request_streambuf_size, const std::shared_ptr<Connection> &connection_) noexcept : streambuf(max_request_streambuf_size), connection(connection_), content(streambuf) {}
+
     public:
-        /// Warning: do not add or remove resources after start() is called
-        std::map<regex_orderable, std::map<std::string,
-            std::function<void(std::shared_ptr<typename ServerBase<socket_type>::Response>, std::shared_ptr<typename ServerBase<socket_type>::Request>)> > > resource;
-        
-        std::map<std::string,
-            std::function<void(std::shared_ptr<typename ServerBase<socket_type>::Response>, std::shared_ptr<typename ServerBase<socket_type>::Request>)> > default_resource;
-        
-        std::function<void(std::shared_ptr<typename ServerBase<socket_type>::Request>, const boost::system::error_code&)> on_error;
-        
-        std::function<void(std::shared_ptr<socket_type> socket, std::shared_ptr<typename ServerBase<socket_type>::Request>)> on_upgrade;
-        
-        virtual void start() {
-            if(!io_service)
-                io_service=std::make_shared<boost::asio::io_service>();
-
-            if(io_service->stopped())
-                io_service->reset();
-
-            boost::asio::ip::tcp::endpoint endpoint;
-            if(config.address.size()>0)
-                endpoint=boost::asio::ip::tcp::endpoint(boost::asio::ip::address::from_string(config.address), config.port);
-            else
-                endpoint=boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), config.port);
-            
-            if(!acceptor)
-                acceptor=std::unique_ptr<boost::asio::ip::tcp::acceptor>(new boost::asio::ip::tcp::acceptor(*io_service));
-            acceptor->open(endpoint.protocol());
-            acceptor->set_option(boost::asio::socket_base::reuse_address(config.reuse_address));
-            acceptor->bind(endpoint);
-            acceptor->listen();
-     
-            accept(); 
-            
-            //If thread_pool_size>1, start m_io_service.run() in (thread_pool_size-1) threads for thread-pooling
-            threads.clear();
-            for(size_t c=1;c<config.thread_pool_size;c++) {
-                threads.emplace_back([this]() {
-                    io_service->run();
-                });
-            }
+      std::string method, path, query_string, http_version;
 
-            //Main thread
-            if(config.thread_pool_size>0)
-                io_service->run();
+      Content content;
 
-            //Wait for the rest of the threads, if any, to finish as well
-            for(auto& t: threads) {
-                t.join();
-            }
+      CaseInsensitiveMultimap header;
+
+      /// The result of the resource regular expression match of the request path.
+      regex::smatch path_match;
+
+      /// The time point when the request header was fully read.
+      std::chrono::system_clock::time_point header_read_time;
+
+      asio::ip::tcp::endpoint remote_endpoint() const noexcept {
+        try {
+          if(auto connection = this->connection.lock())
+            return connection->socket->lowest_layer().remote_endpoint();
         }
-        
-        void stop() {
-            acceptor->close();
-            if(config.thread_pool_size>0)
-                io_service->stop();
+        catch(...) {
         }
-        
-        ///Use this function if you need to recursively send parts of a longer message
-        void send(const std::shared_ptr<Response> &response, const std::function<void(const boost::system::error_code&)>& callback=nullptr) const {
-            boost::asio::async_write(*response->socket, response->streambuf, [this, response, callback](const boost::system::error_code& ec, size_t /*bytes_transferred*/) {
-                if(callback)
-                    callback(ec);
-            });
+        return asio::ip::tcp::endpoint();
+      }
+
+      asio::ip::tcp::endpoint local_endpoint() const noexcept {
+        try {
+          if(auto connection = this->connection.lock())
+            return connection->socket->lowest_layer().local_endpoint();
+        }
+        catch(...) {
         }
+        return asio::ip::tcp::endpoint();
+      }
 
-        /// If you have your own boost::asio::io_service, store its pointer here before running start().
-        /// You might also want to set config.thread_pool_size to 0.
-        std::shared_ptr<boost::asio::io_service> io_service;
-    protected:
-        std::unique_ptr<boost::asio::ip::tcp::acceptor> acceptor;
-        std::vector<std::thread> threads;
-        
-        ServerBase(unsigned short port) : config(port) {}
-        
-        virtual void accept()=0;
-        
-        std::shared_ptr<boost::asio::deadline_timer> get_timeout_timer(const std::shared_ptr<socket_type> &socket, long seconds) {
-            if(seconds==0)
-                return nullptr;
-            
-            auto timer=std::make_shared<boost::asio::deadline_timer>(*io_service);
-            timer->expires_from_now(boost::posix_time::seconds(seconds));
-            timer->async_wait([socket](const boost::system::error_code& ec){
-                if(!ec) {
-                    boost::system::error_code ec;
-                    socket->lowest_layer().shutdown(boost::asio::ip::tcp::socket::shutdown_both, ec);
-                    socket->lowest_layer().close();
-                }
-            });
-            return timer;
+      /// Deprecated, please use remote_endpoint().address().to_string() instead.
+      SW_DEPRECATED std::string remote_endpoint_address() const noexcept {
+        try {
+          if(auto connection = this->connection.lock())
+            return connection->socket->lowest_layer().remote_endpoint().address().to_string();
         }
-        
-        void read_request_and_content(const std::shared_ptr<socket_type> &socket) {
-            //Create new streambuf (Request::streambuf) for async_read_until()
-            //shared_ptr is used to pass temporary objects to the asynchronous functions
-            std::shared_ptr<Request> request(new Request(*socket));
-
-            //Set timeout on the following boost::asio::async-read or write function
-            auto timer=this->get_timeout_timer(socket, config.timeout_request);
-                        
-            boost::asio::async_read_until(*socket, request->streambuf, "\r\n\r\n",
-                    [this, socket, request, timer](const boost::system::error_code& ec, size_t bytes_transferred) {
-                if(timer)
-                    timer->cancel();
-                if(!ec) {
-                    //request->streambuf.size() is not necessarily the same as bytes_transferred, from Boost-docs:
-                    //"After a successful async_read_until operation, the streambuf may contain additional data beyond the delimiter"
-                    //The chosen solution is to extract lines from the stream directly when parsing the header. What is left of the
-                    //streambuf (maybe some bytes of the content) is appended to in the async_read-function below (for retrieving content).
-                    size_t num_additional_bytes=request->streambuf.size()-bytes_transferred;
-                    
-                    if(!this->parse_request(request))
-                        return;
-                    
-                    //If content, read that as well
-                    auto it=request->header.find("Content-Length");
-                    if(it!=request->header.end()) {
-                        unsigned long long content_length;
-                        try {
-                            content_length=stoull(it->second);
-                        }
-                        catch(const std::exception &e) {
-                            if(on_error)
-                                on_error(request, boost::system::error_code(boost::system::errc::protocol_error, boost::system::generic_category()));
-                            return;
-                        }
-                        if(content_length>num_additional_bytes) {
-                            //Set timeout on the following boost::asio::async-read or write function
-                            auto timer=this->get_timeout_timer(socket, config.timeout_content);
-                            boost::asio::async_read(*socket, request->streambuf,
-                                    boost::asio::transfer_exactly(content_length-num_additional_bytes),
-                                    [this, socket, request, timer]
-                                    (const boost::system::error_code& ec, size_t /*bytes_transferred*/) {
-                                if(timer)
-                                    timer->cancel();
-                                if(!ec)
-                                    this->find_resource(socket, request);
-                                else if(on_error)
-                                    on_error(request, ec);
-                            });
-                        }
-                        else
-                            this->find_resource(socket, request);
-                    }
-                    else
-                        this->find_resource(socket, request);
-                }
-                else if(on_error)
-                    on_error(request, ec);
-            });
+        catch(...) {
         }
+        return std::string();
+      }
 
-        bool parse_request(const std::shared_ptr<Request> &request) const {
-            std::string line;
-            getline(request->content, line);
-            size_t method_end;
-            if((method_end=line.find(' '))!=std::string::npos) {
-                size_t path_end;
-                if((path_end=line.find(' ', method_end+1))!=std::string::npos) {
-                    request->method=line.substr(0, method_end);
-                    request->path=line.substr(method_end+1, path_end-method_end-1);
-
-                    size_t protocol_end;
-                    if((protocol_end=line.find('/', path_end+1))!=std::string::npos) {
-                        if(line.compare(path_end+1, protocol_end-path_end-1, "HTTP")!=0)
-                            return false;
-                        request->http_version=line.substr(protocol_end+1, line.size()-protocol_end-2);
-                    }
-                    else
-                        return false;
-
-                    getline(request->content, line);
-                    size_t param_end;
-                    while((param_end=line.find(':'))!=std::string::npos) {
-                        size_t value_start=param_end+1;
-                        if((value_start)<line.size()) {
-                            if(line[value_start]==' ')
-                                value_start++;
-                            if(value_start<line.size())
-                                request->header.emplace(line.substr(0, param_end), line.substr(value_start, line.size()-value_start-1));
-                        }
-    
-                        getline(request->content, line);
-                    }
-                }
-                else
-                    return false;
-            }
-            else
-                return false;
-            return true;
+      /// Deprecated, please use remote_endpoint().port() instead.
+      SW_DEPRECATED unsigned short remote_endpoint_port() const noexcept {
+        try {
+          if(auto connection = this->connection.lock())
+            return connection->socket->lowest_layer().remote_endpoint().port();
         }
+        catch(...) {
+        }
+        return 0;
+      }
 
-        void find_resource(const std::shared_ptr<socket_type> &socket, const std::shared_ptr<Request> &request) {
-            //Upgrade connection
-            if(on_upgrade) {
-                auto it=request->header.find("Upgrade");
-                if(it!=request->header.end()) {
-                    on_upgrade(socket, request);
-                    return;
-                }
+      /// Returns query keys with percent-decoded values.
+      CaseInsensitiveMultimap parse_query_string() const noexcept {
+        return SimpleWeb::QueryString::parse(query_string);
+      }
+    };
+
+  protected:
+    class Connection : public std::enable_shared_from_this<Connection> {
+    public:
+      template <typename... Args>
+      Connection(std::shared_ptr<ScopeRunner> handler_runner_, Args &&...args) noexcept : handler_runner(std::move(handler_runner_)), socket(new socket_type(std::forward<Args>(args)...)), write_strand(get_executor(socket->lowest_layer())) {}
+
+      std::shared_ptr<ScopeRunner> handler_runner;
+
+      std::unique_ptr<socket_type> socket; // Socket must be unique_ptr since asio::ssl::stream<asio::ip::tcp::socket> is not movable
+
+      /**
+       * Needed for TLS communication where async_write could be called outside of the io_context runners.
+       * For more information see https://stackoverflow.com/a/12801042.
+       */
+      strand write_strand;
+
+      std::unique_ptr<asio::steady_timer> timer;
+
+      void close() noexcept {
+        error_code ec;
+        socket->lowest_layer().shutdown(asio::ip::tcp::socket::shutdown_both, ec);
+        socket->lowest_layer().cancel(ec);
+      }
+
+      void set_timeout(long seconds) noexcept {
+        if(seconds == 0) {
+          timer = nullptr;
+          return;
+        }
+
+        timer = make_steady_timer(*socket, std::chrono::seconds(seconds));
+        std::weak_ptr<Connection> self_weak(this->shared_from_this()); // To avoid keeping Connection instance alive longer than needed
+        timer->async_wait([self_weak](const error_code &ec) {
+          if(!ec) {
+            if(auto self = self_weak.lock())
+              self->close();
+          }
+        });
+      }
+
+      void cancel_timeout() noexcept {
+        if(timer) {
+          try {
+            timer->cancel();
+          }
+          catch(...) {
+          }
+        }
+      }
+    };
+
+    class Session {
+    public:
+      Session(std::size_t max_request_streambuf_size, std::shared_ptr<Connection> connection_) noexcept : connection(std::move(connection_)), request(new Request(max_request_streambuf_size, connection)) {}
+
+      std::shared_ptr<Connection> connection;
+      std::shared_ptr<Request> request;
+    };
+
+  public:
+    class Config {
+      friend class ServerBase<socket_type>;
+
+      Config(unsigned short port) noexcept : port(port) {}
+
+    public:
+      /// Port number to use. Defaults to 80 for HTTP and 443 for HTTPS. Set to 0 get an assigned port.
+      unsigned short port;
+      /// If io_service is not set, number of threads that the server will use when start() is called.
+      /// Defaults to 1 thread.
+      std::size_t thread_pool_size = 1;
+      /// Timeout on request completion. Defaults to 5 seconds.
+      long timeout_request = 5;
+      /// Timeout on request/response content completion. Defaults to 300 seconds.
+      long timeout_content = 300;
+      /// Maximum size of request stream buffer. Defaults to architecture maximum.
+      /// Reaching this limit will result in a message_size error code.
+      std::size_t max_request_streambuf_size = (std::numeric_limits<std::size_t>::max)();
+      /// IPv4 address in dotted decimal form or IPv6 address in hexadecimal notation.
+      /// If empty, the address will be any address.
+      std::string address;
+      /// Set to false to avoid binding the socket to an address that is already in use. Defaults to true.
+      bool reuse_address = true;
+      /// Make use of RFC 7413 or TCP Fast Open (TFO)
+      bool fast_open = false;
+    };
+    /// Set before calling start().
+    Config config;
+
+  private:
+    class regex_orderable : public regex::regex {
+    public:
+      std::string str;
+
+      regex_orderable(const char *regex_cstr) : regex::regex(regex_cstr), str(regex_cstr) {}
+      regex_orderable(std::string regex_str_) : regex::regex(regex_str_), str(std::move(regex_str_)) {}
+      bool operator<(const regex_orderable &rhs) const noexcept {
+        return str < rhs.str;
+      }
+    };
+
+  public:
+    /// Use this container to add resources for specific request paths depending on the given regex and method.
+    /// Warning: do not add or remove resources after start() is called
+    std::map<regex_orderable, std::map<std::string, std::function<void(std::shared_ptr<typename ServerBase<socket_type>::Response>, std::shared_ptr<typename ServerBase<socket_type>::Request>)>>> resource;
+
+    /// If the request path does not match a resource regex, this function is called.
+    std::map<std::string, std::function<void(std::shared_ptr<typename ServerBase<socket_type>::Response>, std::shared_ptr<typename ServerBase<socket_type>::Request>)>> default_resource;
+
+    /// Called when an error occurs.
+    std::function<void(std::shared_ptr<typename ServerBase<socket_type>::Request>, const error_code &)> on_error;
+
+    /// Called on upgrade requests.
+    std::function<void(std::unique_ptr<socket_type> &, std::shared_ptr<typename ServerBase<socket_type>::Request>)> on_upgrade;
+
+    /// If you want to reuse an already created asio::io_service, store its pointer here before calling start().
+    std::shared_ptr<io_context> io_service;
+
+    /// Start the server.
+    /// If io_service is not set, an internal io_service is created instead.
+    /// The callback argument is called after the server is accepting connections,
+    /// where its parameter contains the assigned port.
+    void start(const std::function<void(unsigned short /*port*/)> &callback = nullptr) {
+      std::unique_lock<std::mutex> lock(start_stop_mutex);
+
+      asio::ip::tcp::endpoint endpoint;
+      if(!config.address.empty())
+        endpoint = asio::ip::tcp::endpoint(make_address(config.address), config.port);
+      else
+        endpoint = asio::ip::tcp::endpoint(asio::ip::tcp::v6(), config.port);
+
+      if(!io_service) {
+        io_service = std::make_shared<io_context>();
+        internal_io_service = true;
+      }
+
+      if(!acceptor)
+        acceptor = std::unique_ptr<asio::ip::tcp::acceptor>(new asio::ip::tcp::acceptor(*io_service));
+      try {
+        acceptor->open(endpoint.protocol());
+      }
+      catch(const system_error &error) {
+        if(error.code() == asio::error::address_family_not_supported && config.address.empty()) {
+          endpoint = asio::ip::tcp::endpoint(asio::ip::tcp::v4(), config.port);
+          acceptor->open(endpoint.protocol());
+        }
+        else
+          throw;
+      }
+      acceptor->set_option(asio::socket_base::reuse_address(config.reuse_address));
+      if(config.fast_open) {
+#if defined(__linux__) && defined(TCP_FASTOPEN)
+        const int qlen = 5; // This seems to be the value that is used in other examples.
+        error_code ec;
+        acceptor->set_option(asio::detail::socket_option::integer<IPPROTO_TCP, TCP_FASTOPEN>(qlen), ec);
+#endif // End Linux
+      }
+      acceptor->bind(endpoint);
+
+      after_bind();
+
+      auto port = acceptor->local_endpoint().port();
+
+      acceptor->listen();
+      accept();
+
+      if(internal_io_service && io_service->stopped())
+        restart(*io_service);
+
+      if(callback)
+        post(*io_service, [callback, port] {
+          callback(port);
+        });
+
+      if(internal_io_service) {
+        // If thread_pool_size>1, start m_io_service.run() in (thread_pool_size-1) threads for thread-pooling
+        threads.clear();
+        for(std::size_t c = 1; c < config.thread_pool_size; c++) {
+          threads.emplace_back([this]() {
+            this->io_service->run();
+          });
+        }
+
+        lock.unlock();
+
+        // Main thread
+        if(config.thread_pool_size > 0)
+          io_service->run();
+
+        lock.lock();
+
+        // Wait for the rest of the threads, if any, to finish as well
+        for(auto &t : threads)
+          t.join();
+      }
+    }
+
+    /// Stop accepting new requests, and close current connections.
+    void stop() noexcept {
+      std::lock_guard<std::mutex> lock(start_stop_mutex);
+
+      if(acceptor) {
+        error_code ec;
+        acceptor->close(ec);
+
+        {
+          LockGuard lock(connections->mutex);
+          for(auto &connection : connections->set)
+            connection->close();
+          connections->set.clear();
+        }
+
+        if(internal_io_service)
+          io_service->stop();
+      }
+    }
+
+    virtual ~ServerBase() noexcept {
+      handler_runner->stop();
+      stop();
+    }
+
+  protected:
+    std::mutex start_stop_mutex;
+
+    bool internal_io_service = false;
+
+    std::unique_ptr<asio::ip::tcp::acceptor> acceptor;
+    std::vector<std::thread> threads;
+
+    struct Connections {
+      Mutex mutex;
+      std::unordered_set<Connection *> set GUARDED_BY(mutex);
+    };
+    std::shared_ptr<Connections> connections;
+
+    std::shared_ptr<ScopeRunner> handler_runner;
+
+    ServerBase(unsigned short port) noexcept : config(port), connections(new Connections()), handler_runner(new ScopeRunner()) {}
+
+    virtual void after_bind() {}
+    virtual void accept() = 0;
+
+    template <typename... Args>
+    std::shared_ptr<Connection> create_connection(Args &&...args) noexcept {
+      auto connections = this->connections;
+      auto connection = std::shared_ptr<Connection>(new Connection(handler_runner, std::forward<Args>(args)...), [connections](Connection *connection) {
+        {
+          LockGuard lock(connections->mutex);
+          auto it = connections->set.find(connection);
+          if(it != connections->set.end())
+            connections->set.erase(it);
+        }
+        delete connection;
+      });
+      {
+        LockGuard lock(connections->mutex);
+        connections->set.emplace(connection.get());
+      }
+      return connection;
+    }
+
+    void read(const std::shared_ptr<Session> &session) {
+      session->connection->set_timeout(config.timeout_request);
+      asio::async_read_until(*session->connection->socket, session->request->streambuf, "\r\n\r\n", [this, session](const error_code &ec, std::size_t bytes_transferred) {
+        auto lock = session->connection->handler_runner->continue_lock();
+        if(!lock)
+          return;
+        session->request->header_read_time = std::chrono::system_clock::now();
+
+        if(!ec) {
+          session->connection->set_timeout(this->config.timeout_content);
+          // request->streambuf.size() is not necessarily the same as bytes_transferred, from Boost-docs:
+          // "After a successful async_read_until operation, the streambuf may contain additional data beyond the delimiter"
+          // The chosen solution is to extract lines from the stream directly when parsing the header. What is left of the
+          // streambuf (maybe some bytes of the content) is appended to in the async_read-function below (for retrieving content).
+          std::size_t num_additional_bytes = session->request->streambuf.size() - bytes_transferred;
+
+          if(!RequestMessage::parse(session->request->content, session->request->method, session->request->path,
+                                    session->request->query_string, session->request->http_version, session->request->header)) {
+            if(this->on_error)
+              this->on_error(session->request, make_error_code::make_error_code(errc::protocol_error));
+            return;
+          }
+
+          // If content, read that as well
+          auto header_it = session->request->header.find("Content-Length");
+          if(header_it != session->request->header.end()) {
+            unsigned long long content_length = 0;
+            try {
+              content_length = std::stoull(header_it->second);
             }
-            //Find path- and method-match, and call write_response
-            for(auto &regex_method: resource) {
-                auto it=regex_method.second.find(request->method);
-                if(it!=regex_method.second.end()) {
-                    REGEX_NS::smatch sm_res;
-                    if(REGEX_NS::regex_match(request->path, sm_res, regex_method.first)) {
-                        request->path_match=std::move(sm_res);
-                        write_response(socket, request, it->second);
-                        return;
-                    }
-                }
+            catch(const std::exception &) {
+              if(this->on_error)
+                this->on_error(session->request, make_error_code::make_error_code(errc::protocol_error));
+              return;
             }
-            auto it=default_resource.find(request->method);
-            if(it!=default_resource.end()) {
-                write_response(socket, request, it->second);
+            if(content_length > session->request->streambuf.max_size()) {
+              auto response = std::shared_ptr<Response>(new Response(session, this->config.timeout_content));
+              response->write(StatusCode::client_error_payload_too_large);
+              if(this->on_error)
+                this->on_error(session->request, make_error_code::make_error_code(errc::message_size));
+              return;
             }
+            if(content_length > num_additional_bytes) {
+              asio::async_read(*session->connection->socket, session->request->streambuf, asio::transfer_exactly(content_length - num_additional_bytes), [this, session](const error_code &ec, std::size_t /*bytes_transferred*/) {
+                auto lock = session->connection->handler_runner->continue_lock();
+                if(!lock)
+                  return;
+
+                if(!ec)
+                  this->find_resource(session);
+                else if(this->on_error)
+                  this->on_error(session->request, ec);
+              });
+            }
+            else
+              this->find_resource(session);
+          }
+          else if((header_it = session->request->header.find("Transfer-Encoding")) != session->request->header.end() && header_it->second == "chunked") {
+            // Expect hex number to not exceed 16 bytes (64-bit number), but take into account previous additional read bytes
+            auto chunk_size_streambuf = std::make_shared<asio::streambuf>(std::max<std::size_t>(16 + 2, session->request->streambuf.size()));
+
+            // Move leftover bytes
+            auto &source = session->request->streambuf;
+            auto &target = *chunk_size_streambuf;
+            target.commit(asio::buffer_copy(target.prepare(source.size()), source.data()));
+            source.consume(source.size());
+
+            this->read_chunked_transfer_encoded(session, chunk_size_streambuf);
+          }
+          else
+            this->find_resource(session);
         }
-        
-        void write_response(const std::shared_ptr<socket_type> &socket, const std::shared_ptr<Request> &request, 
-                std::function<void(std::shared_ptr<typename ServerBase<socket_type>::Response>,
-                                   std::shared_ptr<typename ServerBase<socket_type>::Request>)>& resource_function) {
-            //Set timeout on the following boost::asio::async-read or write function
-            auto timer=this->get_timeout_timer(socket, config.timeout_content);
-
-            auto response=std::shared_ptr<Response>(new Response(socket), [this, request, timer](Response *response_ptr) {
-                auto response=std::shared_ptr<Response>(response_ptr);
-                this->send(response, [this, response, request, timer](const boost::system::error_code& ec) {
-                    if(timer)
-                        timer->cancel();
-                    if(!ec) {
-                        if (response->close_connection_after_response)
-                            return;
-
-                        auto range=request->header.equal_range("Connection");
-                        for(auto it=range.first;it!=range.second;it++) {
-                            if(boost::iequals(it->second, "close")) {
-                                return;
-                            } else if (boost::iequals(it->second, "keep-alive")) {
-                                this->read_request_and_content(response->socket);
-                                return;
-                            }
-                        }
-                        if(request->http_version >= "1.1")
-                            this->read_request_and_content(response->socket);
-                    }
-                    else if(on_error)
-                        on_error(request, ec);
+        else if(this->on_error)
+          this->on_error(session->request, ec);
+      });
+    }
+
+    void read_chunked_transfer_encoded(const std::shared_ptr<Session> &session, const std::shared_ptr<asio::streambuf> &chunk_size_streambuf) {
+      asio::async_read_until(*session->connection->socket, *chunk_size_streambuf, "\r\n", [this, session, chunk_size_streambuf](const error_code &ec, size_t bytes_transferred) {
+        auto lock = session->connection->handler_runner->continue_lock();
+        if(!lock)
+          return;
+
+        if(!ec) {
+          std::istream istream(chunk_size_streambuf.get());
+          std::string line;
+          std::getline(istream, line);
+          bytes_transferred -= line.size() + 1;
+          unsigned long chunk_size = 0;
+          try {
+            chunk_size = std::stoul(line, 0, 16);
+          }
+          catch(...) {
+            if(this->on_error)
+              this->on_error(session->request, make_error_code::make_error_code(errc::protocol_error));
+            return;
+          }
+
+          if(chunk_size == 0) {
+            this->find_resource(session);
+            return;
+          }
+
+          if(chunk_size + session->request->streambuf.size() > session->request->streambuf.max_size()) {
+            auto response = std::shared_ptr<Response>(new Response(session, this->config.timeout_content));
+            response->write(StatusCode::client_error_payload_too_large);
+            if(this->on_error)
+              this->on_error(session->request, make_error_code::make_error_code(errc::message_size));
+            return;
+          }
+
+          auto num_additional_bytes = chunk_size_streambuf->size() - bytes_transferred;
+
+          auto bytes_to_move = std::min<std::size_t>(chunk_size, num_additional_bytes);
+          if(bytes_to_move > 0) {
+            // Move leftover bytes
+            auto &source = *chunk_size_streambuf;
+            auto &target = session->request->streambuf;
+            target.commit(asio::buffer_copy(target.prepare(bytes_to_move), source.data(), bytes_to_move));
+            source.consume(bytes_to_move);
+          }
+
+          if(chunk_size > num_additional_bytes) {
+            asio::async_read(*session->connection->socket, session->request->streambuf, asio::transfer_exactly(chunk_size - num_additional_bytes), [this, session, chunk_size_streambuf](const error_code &ec, size_t /*bytes_transferred*/) {
+              auto lock = session->connection->handler_runner->continue_lock();
+              if(!lock)
+                return;
+
+              if(!ec) {
+                // Remove "\r\n"
+                auto null_buffer = std::make_shared<asio::streambuf>(2);
+                asio::async_read(*session->connection->socket, *null_buffer, asio::transfer_exactly(2), [this, session, chunk_size_streambuf, null_buffer](const error_code &ec, size_t /*bytes_transferred*/) {
+                  auto lock = session->connection->handler_runner->continue_lock();
+                  if(!lock)
+                    return;
+                  if(!ec)
+                    read_chunked_transfer_encoded(session, chunk_size_streambuf);
+                  else
+                    this->on_error(session->request, ec);
                 });
+              }
+              else if(this->on_error)
+                this->on_error(session->request, ec);
             });
-
-            try {
-                resource_function(response, request);
-            }
-            catch(const std::exception &e) {
-                if(on_error)
-                    on_error(request, boost::system::error_code(boost::system::errc::operation_canceled, boost::system::generic_category()));
+          }
+          else if(2 + chunk_size > num_additional_bytes) { // If only end of chunk remains unread (\n or \r\n)
+            // Remove "\r\n"
+            if(2 + chunk_size - num_additional_bytes == 1)
+              istream.get();
+            auto null_buffer = std::make_shared<asio::streambuf>(2);
+            asio::async_read(*session->connection->socket, *null_buffer, asio::transfer_exactly(2 + chunk_size - num_additional_bytes), [this, session, chunk_size_streambuf, null_buffer](const error_code &ec, size_t /*bytes_transferred*/) {
+              auto lock = session->connection->handler_runner->continue_lock();
+              if(!lock)
                 return;
-            }
+              if(!ec)
+                read_chunked_transfer_encoded(session, chunk_size_streambuf);
+              else
+                this->on_error(session->request, ec);
+            });
+          }
+          else {
+            // Remove "\r\n"
+            istream.get();
+            istream.get();
+
+            read_chunked_transfer_encoded(session, chunk_size_streambuf);
+          }
         }
-    };
-    
-    template<class socket_type>
-    class Server : public ServerBase<socket_type> {};
-    
-    typedef boost::asio::ip::tcp::socket HTTP;
-    
-    template<>
-    class Server<HTTP> : public ServerBase<HTTP> {
-    public:
-        DEPRECATED Server(unsigned short port, size_t thread_pool_size=1, long timeout_request=5, long timeout_content=300) :
-                Server() {
-            config.port=port;
-            config.thread_pool_size=thread_pool_size;
-            config.timeout_request=timeout_request;
-            config.timeout_content=timeout_content;
+        else if(this->on_error)
+          this->on_error(session->request, ec);
+      });
+    }
+
+    void find_resource(const std::shared_ptr<Session> &session) {
+      // Upgrade connection
+      if(on_upgrade) {
+        auto it = session->request->header.find("Upgrade");
+        if(it != session->request->header.end()) {
+          // remove connection from connections
+          {
+            LockGuard lock(connections->mutex);
+            auto it = connections->set.find(session->connection.get());
+            if(it != connections->set.end())
+              connections->set.erase(it);
+          }
+
+          on_upgrade(session->connection->socket, session->request);
+          return;
         }
-        
-        Server() : ServerBase<HTTP>::ServerBase(80) {}
-        
-    protected:
-        void accept() {
-            //Create new socket for this connection
-            //Shared_ptr is used to pass temporary objects to the asynchronous functions
-            auto socket=std::make_shared<HTTP>(*io_service);
-                        
-            acceptor->async_accept(*socket, [this, socket](const boost::system::error_code& ec){
-                //Immediately start accepting a new connection (if io_service hasn't been stopped)
-                if (ec != boost::asio::error::operation_aborted)
-                    accept();
-                                
-                if(!ec) {
-                    boost::asio::ip::tcp::no_delay option(true);
-                    socket->set_option(option);
-                    
-                    this->read_request_and_content(socket);
-                }
-                else if(on_error)
-                    on_error(std::shared_ptr<Request>(new Request(*socket)), ec);
-            });
+      }
+      // Find path- and method-match, and call write
+      for(auto &regex_method : resource) {
+        auto it = regex_method.second.find(session->request->method);
+        if(it != regex_method.second.end()) {
+          regex::smatch sm_res;
+          if(regex::regex_match(session->request->path, sm_res, regex_method.first)) {
+            session->request->path_match = std::move(sm_res);
+            write(session, it->second);
+            return;
+          }
         }
-    };
-}
-#endif	/* SERVER_HTTP_HPP */
+      }
+      auto it = default_resource.find(session->request->method);
+      if(it != default_resource.end())
+        write(session, it->second);
+    }
+
+    void write(const std::shared_ptr<Session> &session,
+               std::function<void(std::shared_ptr<typename ServerBase<socket_type>::Response>, std::shared_ptr<typename ServerBase<socket_type>::Request>)> &resource_function) {
+      auto response = std::shared_ptr<Response>(new Response(session, config.timeout_content), [this](Response *response_ptr) {
+        auto response = std::shared_ptr<Response>(response_ptr);
+        response->send_on_delete([this, response](const error_code &ec) {
+          response->session->connection->cancel_timeout();
+          if(!ec) {
+            if(response->close_connection_after_response)
+              return;
+
+            auto range = response->session->request->header.equal_range("Connection");
+            for(auto it = range.first; it != range.second; it++) {
+              if(case_insensitive_equal(it->second, "close"))
+                return;
+              else if(case_insensitive_equal(it->second, "keep-alive")) {
+                auto new_session = std::make_shared<Session>(this->config.max_request_streambuf_size, response->session->connection);
+                this->read(new_session);
+                return;
+              }
+            }
+            if(response->session->request->http_version >= "1.1") {
+              auto new_session = std::make_shared<Session>(this->config.max_request_streambuf_size, response->session->connection);
+              this->read(new_session);
+              return;
+            }
+          }
+          else if(this->on_error)
+            this->on_error(response->session->request, ec);
+        });
+      });
+
+      try {
+        resource_function(response, session->request);
+      }
+      catch(const std::exception &) {
+        if(on_error)
+          on_error(session->request, make_error_code::make_error_code(errc::operation_canceled));
+        return;
+      }
+    }
+  };
+
+  template <class socket_type>
+  class Server : public ServerBase<socket_type> {};
+
+  using HTTP = asio::ip::tcp::socket;
+
+  template <>
+  class Server<HTTP> : public ServerBase<HTTP> {
+  public:
+    /// Constructs a server object.
+    Server() noexcept : ServerBase<HTTP>::ServerBase(80) {}
+
+  protected:
+    void accept() override {
+      auto connection = create_connection(*io_service);
+
+      acceptor->async_accept(*connection->socket, [this, connection](const error_code &ec) {
+        auto lock = connection->handler_runner->continue_lock();
+        if(!lock)
+          return;
+
+        // Immediately start accepting a new connection (unless io_service has been stopped)
+        if(ec != error::operation_aborted)
+          this->accept();
+
+        auto session = std::make_shared<Session>(config.max_request_streambuf_size, connection);
+
+        if(!ec) {
+          asio::ip::tcp::no_delay option(true);
+          error_code ec;
+          session->connection->socket->set_option(option, ec);
+
+          this->read(session);
+        }
+        else if(this->on_error)
+          this->on_error(session->request, ec);
+      });
+    }
+  };
+} // namespace SimpleWeb
+
+#endif /* SIMPLE_WEB_SERVER_HTTP_HPP */
diff --git a/third_party/Simple-web-server/repo/server_https.hpp b/third_party/Simple-web-server/repo/server_https.hpp
index 309a5ddd8a..67b84916e3 100644
--- a/third_party/Simple-web-server/repo/server_https.hpp
+++ b/third_party/Simple-web-server/repo/server_https.hpp
@@ -1,90 +1,102 @@
-#ifndef SERVER_HTTPS_HPP
-#define	SERVER_HTTPS_HPP
+#ifndef SIMPLE_WEB_SERVER_HTTPS_HPP
+#define SIMPLE_WEB_SERVER_HTTPS_HPP
 
 #include "server_http.hpp"
+
+#ifdef ASIO_STANDALONE
+#include <asio/ssl.hpp>
+#else
 #include <boost/asio/ssl.hpp>
-#include <openssl/ssl.h>
+#endif
+
 #include <algorithm>
+#include <openssl/ssl.h>
 
 namespace SimpleWeb {
-    typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> HTTPS;    
-    
-    template<>
-    class Server<HTTPS> : public ServerBase<HTTPS> {
-        std::string session_id_context;
-        bool set_session_id_context=false;
-    public:
-        DEPRECATED Server(unsigned short port, size_t thread_pool_size, const std::string& cert_file, const std::string& private_key_file,
-                long timeout_request=5, long timeout_content=300,
-                const std::string& verify_file=std::string()) : 
-                Server(cert_file, private_key_file, verify_file) {
-            config.port=port;
-            config.thread_pool_size=thread_pool_size;
-            config.timeout_request=timeout_request;
-            config.timeout_content=timeout_content;
-        }
-        
-        Server(const std::string& cert_file, const std::string& private_key_file, const std::string& verify_file=std::string()):
-                ServerBase<HTTPS>::ServerBase(443), context(boost::asio::ssl::context::tlsv12) {
-            context.use_certificate_chain_file(cert_file);
-            context.use_private_key_file(private_key_file, boost::asio::ssl::context::pem);
-            
-            if(verify_file.size()>0) {
-                context.load_verify_file(verify_file);
-                context.set_verify_mode(boost::asio::ssl::verify_peer | boost::asio::ssl::verify_fail_if_no_peer_cert |
-                                        boost::asio::ssl::verify_client_once);
-                set_session_id_context=true;
-            }
-        }
-        
-        void start() {
-            if(set_session_id_context) {
-                // Creating session_id_context from address:port but reversed due to small SSL_MAX_SSL_SESSION_ID_LENGTH
-                session_id_context=std::to_string(config.port)+':';
-                session_id_context.append(config.address.rbegin(), config.address.rend());
-                SSL_CTX_set_session_id_context(context.native_handle(), reinterpret_cast<const unsigned char*>(session_id_context.data()),
-                                               std::min<size_t>(session_id_context.size(), SSL_MAX_SSL_SESSION_ID_LENGTH));
-            }
-            ServerBase::start();
-        }
+  using HTTPS = asio::ssl::stream<asio::ip::tcp::socket>;
 
-    protected:
-        boost::asio::ssl::context context;
-        
-        void accept() {
-            //Create new socket for this connection
-            //Shared_ptr is used to pass temporary objects to the asynchronous functions
-            auto socket=std::make_shared<HTTPS>(*io_service, context);
-
-            acceptor->async_accept((*socket).lowest_layer(), [this, socket](const boost::system::error_code& ec) {
-                //Immediately start accepting a new connection (if io_service hasn't been stopped)
-                if (ec != boost::asio::error::operation_aborted)
-                    accept();
-
-                
-                if(!ec) {
-                    boost::asio::ip::tcp::no_delay option(true);
-                    socket->lowest_layer().set_option(option);
-                    
-                    //Set timeout on the following boost::asio::ssl::stream::async_handshake
-                    auto timer=get_timeout_timer(socket, config.timeout_request);
-                    socket->async_handshake(boost::asio::ssl::stream_base::server, [this, socket, timer]
-                            (const boost::system::error_code& ec) {
-                        if(timer)
-                            timer->cancel();
-                        if(!ec)
-                            read_request_and_content(socket);
-                        else if(on_error)
-                            on_error(std::shared_ptr<Request>(new Request(*socket)), ec);
-                    });
-                }
-                else if(on_error)
-                    on_error(std::shared_ptr<Request>(new Request(*socket)), ec);
-            });
-        }
-    };
-}
+  template <>
+  class Server<HTTPS> : public ServerBase<HTTPS> {
+    bool set_session_id_context = false;
+
+  public:
+    /**
+     * Constructs a server object.
+     *
+     * @param certification_file Sends the given certification file to client.
+     * @param private_key_file   Specifies the file containing the private key for certification_file.
+     * @param verify_file        If non-empty, use this certificate authority file to perform verification of client's certificate and hostname according to RFC 2818.
+     */
+    Server(const std::string &certification_file, const std::string &private_key_file, const std::string &verify_file = std::string())
+        : ServerBase<HTTPS>::ServerBase(443),
+#if(ASIO_STANDALONE && ASIO_VERSION >= 101300) || BOOST_ASIO_VERSION >= 101300
+          context(asio::ssl::context::tls_server) {
+      // Disabling TLS 1.0 and 1.1 (see RFC 8996)
+      context.set_options(asio::ssl::context::no_tlsv1);
+      context.set_options(asio::ssl::context::no_tlsv1_1);
+#else
+          context(asio::ssl::context::tlsv12) {
+#endif
 
+      context.use_certificate_chain_file(certification_file);
+      context.use_private_key_file(private_key_file, asio::ssl::context::pem);
 
-#endif	/* SERVER_HTTPS_HPP */
+      if(verify_file.size() > 0) {
+        context.load_verify_file(verify_file);
+        context.set_verify_mode(asio::ssl::verify_peer | asio::ssl::verify_fail_if_no_peer_cert | asio::ssl::verify_client_once);
+        set_session_id_context = true;
+      }
+    }
+
+  protected:
+    asio::ssl::context context;
+
+    void after_bind() override {
+      if(set_session_id_context) {
+        // Creating session_id_context from address:port but reversed due to small SSL_MAX_SSL_SESSION_ID_LENGTH
+        auto session_id_context = std::to_string(acceptor->local_endpoint().port()) + ':';
+        session_id_context.append(config.address.rbegin(), config.address.rend());
+        SSL_CTX_set_session_id_context(context.native_handle(),
+                                       reinterpret_cast<const unsigned char *>(session_id_context.data()),
+                                       static_cast<unsigned int>(std::min<std::size_t>(session_id_context.size(), SSL_MAX_SSL_SESSION_ID_LENGTH)));
+      }
+    }
+
+    void accept() override {
+      auto connection = create_connection(*io_service, context);
+
+      acceptor->async_accept(connection->socket->lowest_layer(), [this, connection](const error_code &ec) {
+        auto lock = connection->handler_runner->continue_lock();
+        if(!lock)
+          return;
+
+        if(ec != error::operation_aborted)
+          this->accept();
+
+        auto session = std::make_shared<Session>(config.max_request_streambuf_size, connection);
+
+        if(!ec) {
+          asio::ip::tcp::no_delay option(true);
+          error_code ec;
+          session->connection->socket->lowest_layer().set_option(option, ec);
+
+          session->connection->set_timeout(config.timeout_request);
+          session->connection->socket->async_handshake(asio::ssl::stream_base::server, [this, session](const error_code &ec) {
+            session->connection->cancel_timeout();
+            auto lock = session->connection->handler_runner->continue_lock();
+            if(!lock)
+              return;
+            if(!ec)
+              this->read(session);
+            else if(this->on_error)
+              this->on_error(session->request, ec);
+          });
+        }
+        else if(this->on_error)
+          this->on_error(session->request, ec);
+      });
+    }
+  };
+} // namespace SimpleWeb
 
+#endif /* SIMPLE_WEB_SERVER_HTTPS_HPP */
diff --git a/third_party/Simple-web-server/repo/status_code.hpp b/third_party/Simple-web-server/repo/status_code.hpp
new file mode 100644
index 0000000000..9f9ecc561d
--- /dev/null
+++ b/third_party/Simple-web-server/repo/status_code.hpp
@@ -0,0 +1,176 @@
+#ifndef SIMPLE_WEB_STATUS_CODE_HPP
+#define SIMPLE_WEB_STATUS_CODE_HPP
+
+#include <cstdlib>
+#include <map>
+#include <string>
+#include <unordered_map>
+#include <vector>
+
+namespace SimpleWeb {
+  enum class StatusCode {
+    unknown = 0,
+    information_continue = 100,
+    information_switching_protocols,
+    information_processing,
+    success_ok = 200,
+    success_created,
+    success_accepted,
+    success_non_authoritative_information,
+    success_no_content,
+    success_reset_content,
+    success_partial_content,
+    success_multi_status,
+    success_already_reported,
+    success_im_used = 226,
+    redirection_multiple_choices = 300,
+    redirection_moved_permanently,
+    redirection_found,
+    redirection_see_other,
+    redirection_not_modified,
+    redirection_use_proxy,
+    redirection_switch_proxy,
+    redirection_temporary_redirect,
+    redirection_permanent_redirect,
+    client_error_bad_request = 400,
+    client_error_unauthorized,
+    client_error_payment_required,
+    client_error_forbidden,
+    client_error_not_found,
+    client_error_method_not_allowed,
+    client_error_not_acceptable,
+    client_error_proxy_authentication_required,
+    client_error_request_timeout,
+    client_error_conflict,
+    client_error_gone,
+    client_error_length_required,
+    client_error_precondition_failed,
+    client_error_payload_too_large,
+    client_error_uri_too_long,
+    client_error_unsupported_media_type,
+    client_error_range_not_satisfiable,
+    client_error_expectation_failed,
+    client_error_im_a_teapot,
+    client_error_misdirection_required = 421,
+    client_error_unprocessable_entity,
+    client_error_locked,
+    client_error_failed_dependency,
+    client_error_upgrade_required = 426,
+    client_error_precondition_required = 428,
+    client_error_too_many_requests,
+    client_error_request_header_fields_too_large = 431,
+    client_error_unavailable_for_legal_reasons = 451,
+    server_error_internal_server_error = 500,
+    server_error_not_implemented,
+    server_error_bad_gateway,
+    server_error_service_unavailable,
+    server_error_gateway_timeout,
+    server_error_http_version_not_supported,
+    server_error_variant_also_negotiates,
+    server_error_insufficient_storage,
+    server_error_loop_detected,
+    server_error_not_extended = 510,
+    server_error_network_authentication_required
+  };
+
+  inline const std::map<StatusCode, std::string> &status_code_strings() {
+    static const std::map<StatusCode, std::string> status_code_strings = {
+        {StatusCode::unknown, ""},
+        {StatusCode::information_continue, "100 Continue"},
+        {StatusCode::information_switching_protocols, "101 Switching Protocols"},
+        {StatusCode::information_processing, "102 Processing"},
+        {StatusCode::success_ok, "200 OK"},
+        {StatusCode::success_created, "201 Created"},
+        {StatusCode::success_accepted, "202 Accepted"},
+        {StatusCode::success_non_authoritative_information, "203 Non-Authoritative Information"},
+        {StatusCode::success_no_content, "204 No Content"},
+        {StatusCode::success_reset_content, "205 Reset Content"},
+        {StatusCode::success_partial_content, "206 Partial Content"},
+        {StatusCode::success_multi_status, "207 Multi-Status"},
+        {StatusCode::success_already_reported, "208 Already Reported"},
+        {StatusCode::success_im_used, "226 IM Used"},
+        {StatusCode::redirection_multiple_choices, "300 Multiple Choices"},
+        {StatusCode::redirection_moved_permanently, "301 Moved Permanently"},
+        {StatusCode::redirection_found, "302 Found"},
+        {StatusCode::redirection_see_other, "303 See Other"},
+        {StatusCode::redirection_not_modified, "304 Not Modified"},
+        {StatusCode::redirection_use_proxy, "305 Use Proxy"},
+        {StatusCode::redirection_switch_proxy, "306 Switch Proxy"},
+        {StatusCode::redirection_temporary_redirect, "307 Temporary Redirect"},
+        {StatusCode::redirection_permanent_redirect, "308 Permanent Redirect"},
+        {StatusCode::client_error_bad_request, "400 Bad Request"},
+        {StatusCode::client_error_unauthorized, "401 Unauthorized"},
+        {StatusCode::client_error_payment_required, "402 Payment Required"},
+        {StatusCode::client_error_forbidden, "403 Forbidden"},
+        {StatusCode::client_error_not_found, "404 Not Found"},
+        {StatusCode::client_error_method_not_allowed, "405 Method Not Allowed"},
+        {StatusCode::client_error_not_acceptable, "406 Not Acceptable"},
+        {StatusCode::client_error_proxy_authentication_required, "407 Proxy Authentication Required"},
+        {StatusCode::client_error_request_timeout, "408 Request Timeout"},
+        {StatusCode::client_error_conflict, "409 Conflict"},
+        {StatusCode::client_error_gone, "410 Gone"},
+        {StatusCode::client_error_length_required, "411 Length Required"},
+        {StatusCode::client_error_precondition_failed, "412 Precondition Failed"},
+        {StatusCode::client_error_payload_too_large, "413 Payload Too Large"},
+        {StatusCode::client_error_uri_too_long, "414 URI Too Long"},
+        {StatusCode::client_error_unsupported_media_type, "415 Unsupported Media Type"},
+        {StatusCode::client_error_range_not_satisfiable, "416 Range Not Satisfiable"},
+        {StatusCode::client_error_expectation_failed, "417 Expectation Failed"},
+        {StatusCode::client_error_im_a_teapot, "418 I'm a teapot"},
+        {StatusCode::client_error_misdirection_required, "421 Misdirected Request"},
+        {StatusCode::client_error_unprocessable_entity, "422 Unprocessable Entity"},
+        {StatusCode::client_error_locked, "423 Locked"},
+        {StatusCode::client_error_failed_dependency, "424 Failed Dependency"},
+        {StatusCode::client_error_upgrade_required, "426 Upgrade Required"},
+        {StatusCode::client_error_precondition_required, "428 Precondition Required"},
+        {StatusCode::client_error_too_many_requests, "429 Too Many Requests"},
+        {StatusCode::client_error_request_header_fields_too_large, "431 Request Header Fields Too Large"},
+        {StatusCode::client_error_unavailable_for_legal_reasons, "451 Unavailable For Legal Reasons"},
+        {StatusCode::server_error_internal_server_error, "500 Internal Server Error"},
+        {StatusCode::server_error_not_implemented, "501 Not Implemented"},
+        {StatusCode::server_error_bad_gateway, "502 Bad Gateway"},
+        {StatusCode::server_error_service_unavailable, "503 Service Unavailable"},
+        {StatusCode::server_error_gateway_timeout, "504 Gateway Timeout"},
+        {StatusCode::server_error_http_version_not_supported, "505 HTTP Version Not Supported"},
+        {StatusCode::server_error_variant_also_negotiates, "506 Variant Also Negotiates"},
+        {StatusCode::server_error_insufficient_storage, "507 Insufficient Storage"},
+        {StatusCode::server_error_loop_detected, "508 Loop Detected"},
+        {StatusCode::server_error_not_extended, "510 Not Extended"},
+        {StatusCode::server_error_network_authentication_required, "511 Network Authentication Required"}};
+    return status_code_strings;
+  }
+
+  inline StatusCode status_code(const std::string &status_code_string) noexcept {
+    if(status_code_string.size() < 3)
+      return StatusCode::unknown;
+
+    auto number = status_code_string.substr(0, 3);
+    if(number[0] < '0' || number[0] > '9' || number[1] < '0' || number[1] > '9' || number[2] < '0' || number[2] > '9')
+      return StatusCode::unknown;
+
+    class StringToStatusCode : public std::unordered_map<std::string, SimpleWeb::StatusCode> {
+    public:
+      StringToStatusCode() {
+        for(auto &status_code : status_code_strings())
+          emplace(status_code.second.substr(0, 3), status_code.first);
+      }
+    };
+    static StringToStatusCode string_to_status_code;
+
+    auto pos = string_to_status_code.find(number);
+    if(pos == string_to_status_code.end())
+      return static_cast<StatusCode>(atoi(number.c_str()));
+    return pos->second;
+  }
+
+  inline const std::string &status_code(StatusCode status_code_enum) noexcept {
+    auto pos = status_code_strings().find(status_code_enum);
+    if(pos == status_code_strings().end()) {
+      static std::string empty_string;
+      return empty_string;
+    }
+    return pos->second;
+  }
+} // namespace SimpleWeb
+
+#endif // SIMPLE_WEB_STATUS_CODE_HPP
diff --git a/third_party/Simple-web-server/repo/tests/CMakeLists.txt b/third_party/Simple-web-server/repo/tests/CMakeLists.txt
index 6c7034e26c..9a577279da 100644
--- a/third_party/Simple-web-server/repo/tests/CMakeLists.txt
+++ b/third_party/Simple-web-server/repo/tests/CMakeLists.txt
@@ -1,23 +1,60 @@
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-access-control")
-
-add_executable(io_test io_test.cpp)
-target_link_libraries(io_test ${Boost_LIBRARIES})
-target_link_libraries(io_test ${CMAKE_THREAD_LIBS_INIT})
-
-add_executable(parse_test parse_test.cpp)
-target_link_libraries(parse_test ${Boost_LIBRARIES})
-target_link_libraries(parse_test ${CMAKE_THREAD_LIBS_INIT})
-
-if(MSYS) #TODO: Is MSYS true when MSVC is true?
-    target_link_libraries(io_test ws2_32 wsock32)
-    target_link_libraries(parse_test ws2_32 wsock32)
+if(NOT MSVC)
+    add_compile_options(-fno-access-control)
+    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+        add_compile_options(-Wno-thread-safety)
+    endif()
+    
+    if(BUILD_TESTING)
+        add_executable(sws_io_test io_test.cpp)
+        target_link_libraries(sws_io_test simple-web-server)
+        add_test(NAME sws_io_test COMMAND sws_io_test)
+    
+        add_executable(sws_parse_test parse_test.cpp)
+        target_link_libraries(sws_parse_test simple-web-server)
+        add_test(NAME sws_parse_test COMMAND sws_parse_test)
+    endif()
 endif()
 
-add_test(io_test io_test)
-add_test(parse_test parse_test)
+if(OPENSSL_FOUND AND BUILD_TESTING)
+    add_executable(sws_crypto_test crypto_test.cpp)
+    target_link_libraries(sws_crypto_test simple-web-server)
+    add_test(NAME sws_crypto_test COMMAND sws_crypto_test)
+endif()
 
-if(OPENSSL_FOUND)
-    add_executable(crypto_test crypto_test.cpp)
-    target_link_libraries(crypto_test ${OPENSSL_CRYPTO_LIBRARY})
-    add_test(crypto_test crypto_test)
+if(BUILD_TESTING)
+    add_executable(status_code_test status_code_test.cpp)
+    target_link_libraries(status_code_test simple-web-server)
+    add_test(NAME status_code_test COMMAND status_code_test)
 endif()
+
+if(BUILD_FUZZING)
+    add_executable(percent_decode fuzzers/percent_decode.cpp)
+    target_compile_options(percent_decode PRIVATE -fsanitize=address,fuzzer)
+    target_link_options(percent_decode PRIVATE -fsanitize=address,fuzzer)
+    target_link_libraries(percent_decode simple-web-server)
+    
+    add_executable(query_string_parse fuzzers/query_string_parse.cpp)
+    target_compile_options(query_string_parse PRIVATE -fsanitize=address,fuzzer)
+    target_link_options(query_string_parse PRIVATE -fsanitize=address,fuzzer)
+    target_link_libraries(query_string_parse simple-web-server)
+    
+    add_executable(http_header_parse fuzzers/http_header_parse.cpp)
+    target_compile_options(http_header_parse PRIVATE -fsanitize=address,fuzzer)
+    target_link_options(http_header_parse PRIVATE -fsanitize=address,fuzzer)
+    target_link_libraries(http_header_parse simple-web-server)
+    
+    add_executable(http_header_field_value_semicolon_separated_attributes_parse fuzzers/http_header_field_value_semicolon_separated_attributes_parse.cpp)
+    target_compile_options(http_header_field_value_semicolon_separated_attributes_parse PRIVATE -fsanitize=address,fuzzer)
+    target_link_options(http_header_field_value_semicolon_separated_attributes_parse PRIVATE -fsanitize=address,fuzzer)
+    target_link_libraries(http_header_field_value_semicolon_separated_attributes_parse simple-web-server)
+    
+    add_executable(request_message_parse fuzzers/request_message_parse.cpp)
+    target_compile_options(request_message_parse PRIVATE -fsanitize=address,fuzzer)
+    target_link_options(request_message_parse PRIVATE -fsanitize=address,fuzzer)
+    target_link_libraries(request_message_parse simple-web-server)
+    
+    add_executable(response_message_parse fuzzers/response_message_parse.cpp)
+    target_compile_options(response_message_parse PRIVATE -fsanitize=address,fuzzer)
+    target_link_options(response_message_parse PRIVATE -fsanitize=address,fuzzer)
+    target_link_libraries(response_message_parse simple-web-server)
+endif()
\ No newline at end of file
diff --git a/third_party/Simple-web-server/repo/tests/assert.hpp b/third_party/Simple-web-server/repo/tests/assert.hpp
new file mode 100644
index 0000000000..7d55ec7b58
--- /dev/null
+++ b/third_party/Simple-web-server/repo/tests/assert.hpp
@@ -0,0 +1,9 @@
+#ifndef SIMPLE_WEB_ASSERT_HPP
+#define SIMPLE_WEB_ASSERT_HPP
+
+#include <cstdlib>
+#include <iostream>
+
+#define ASSERT(e) ((void)((e) ? ((void)0) : ((void)(std::cerr << "Assertion failed: (" << #e << "), function " << __func__ << ", file " << __FILE__ << ", line " << __LINE__ << ".\n"), std::abort())))
+
+#endif /* SIMPLE_WEB_ASSERT_HPP */
diff --git a/third_party/Simple-web-server/repo/tests/crypto_test.cpp b/third_party/Simple-web-server/repo/tests/crypto_test.cpp
index 26b8ce5243..1456cc7952 100644
--- a/third_party/Simple-web-server/repo/tests/crypto_test.cpp
+++ b/third_party/Simple-web-server/repo/tests/crypto_test.cpp
@@ -1,77 +1,73 @@
-#include <vector>
-#include <cassert>
-
+#include "assert.hpp"
 #include "crypto.hpp"
+#include <vector>
 
 using namespace std;
 using namespace SimpleWeb;
 
-const vector<pair<string, string> > base64_string_tests = {
+const vector<pair<string, string>> base64_string_tests = {
     {"", ""},
-    {"f" , "Zg=="},
+    {"f", "Zg=="},
     {"fo", "Zm8="},
     {"foo", "Zm9v"},
     {"foob", "Zm9vYg=="},
     {"fooba", "Zm9vYmE="},
-    {"foobar", "Zm9vYmFy"}
-};
+    {"foobar", "Zm9vYmFy"},
+    {"The itsy bitsy spider climbed up the waterspout.\r\nDown came the rain\r\nand washed the spider out.\r\nOut came the sun\r\nand dried up all the rain\r\nand the itsy bitsy spider climbed up the spout again.",
+     "VGhlIGl0c3kgYml0c3kgc3BpZGVyIGNsaW1iZWQgdXAgdGhlIHdhdGVyc3BvdXQuDQpEb3duIGNhbWUgdGhlIHJhaW4NCmFuZCB3YXNoZWQgdGhlIHNwaWRlciBvdXQuDQpPdXQgY2FtZSB0aGUgc3VuDQphbmQgZHJpZWQgdXAgYWxsIHRoZSByYWluDQphbmQgdGhlIGl0c3kgYml0c3kgc3BpZGVyIGNsaW1iZWQgdXAgdGhlIHNwb3V0IGFnYWluLg=="}};
 
-const vector<pair<string, string> > md5_string_tests = {
+const vector<pair<string, string>> md5_string_tests = {
     {"", "d41d8cd98f00b204e9800998ecf8427e"},
-    {"The quick brown fox jumps over the lazy dog", "9e107d9d372bb6826bd81d3542a419d6"}
-};
+    {"The quick brown fox jumps over the lazy dog", "9e107d9d372bb6826bd81d3542a419d6"}};
 
-const vector<pair<string, string> > sha1_string_tests = {
+const vector<pair<string, string>> sha1_string_tests = {
     {"", "da39a3ee5e6b4b0d3255bfef95601890afd80709"},
-    {"The quick brown fox jumps over the lazy dog", "2fd4e1c67a2d28fced849ee1bb76e7391b93eb12"}
-};
+    {"The quick brown fox jumps over the lazy dog", "2fd4e1c67a2d28fced849ee1bb76e7391b93eb12"}};
 
-const vector<pair<string, string> > sha256_string_tests = {
+const vector<pair<string, string>> sha256_string_tests = {
     {"", "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},
-    {"The quick brown fox jumps over the lazy dog", "d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592"}
-};
+    {"The quick brown fox jumps over the lazy dog", "d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592"}};
 
-const vector<pair<string, string> > sha512_string_tests = {
+const vector<pair<string, string>> sha512_string_tests = {
     {"", "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"},
-    {"The quick brown fox jumps over the lazy dog", "07e547d9586f6a73f73fbac0435ed76951218fb7d0c8d788a309d785436bbb642e93a252a954f23912547d1e8a3b5ed6e1bfd7097821233fa0538f3db854fee6"}
-};
+    {"The quick brown fox jumps over the lazy dog", "07e547d9586f6a73f73fbac0435ed76951218fb7d0c8d788a309d785436bbb642e93a252a954f23912547d1e8a3b5ed6e1bfd7097821233fa0538f3db854fee6"}};
 
 int main() {
-    for(auto& string_test: base64_string_tests) {
-        assert(Crypto::Base64::encode(string_test.first)==string_test.second);
-        assert(Crypto::Base64::decode(string_test.second)==string_test.first);
-    }
-    
-    for(auto& string_test: md5_string_tests) {
-        assert(Crypto::to_hex_string(Crypto::md5(string_test.first)) == string_test.second);
-        stringstream ss(string_test.first);
-        assert(Crypto::to_hex_string(Crypto::md5(ss)) == string_test.second);
-    }
-    
-    for(auto& string_test: sha1_string_tests) {
-        assert(Crypto::to_hex_string(Crypto::sha1(string_test.first)) == string_test.second);
-        stringstream ss(string_test.first);
-        assert(Crypto::to_hex_string(Crypto::sha1(ss)) == string_test.second);
-    }
-    
-    for(auto& string_test: sha256_string_tests) {
-        assert(Crypto::to_hex_string(Crypto::sha256(string_test.first)) == string_test.second);
-        stringstream ss(string_test.first);
-        assert(Crypto::to_hex_string(Crypto::sha256(ss)) == string_test.second);
-    }
-    
-    for(auto& string_test: sha512_string_tests) {
-        assert(Crypto::to_hex_string(Crypto::sha512(string_test.first)) == string_test.second);
-        stringstream ss(string_test.first);
-        assert(Crypto::to_hex_string(Crypto::sha512(ss)) == string_test.second);
-    }
-    
-    //Testing iterations
-    assert(Crypto::to_hex_string(Crypto::sha1("Test", 1)) == "640ab2bae07bedc4c163f679a746f7ab7fb5d1fa");
-    assert(Crypto::to_hex_string(Crypto::sha1("Test", 2)) == "af31c6cbdecd88726d0a9b3798c71ef41f1624d5");
-    stringstream ss("Test");
-    assert(Crypto::to_hex_string(Crypto::sha1(ss, 2)) == "af31c6cbdecd88726d0a9b3798c71ef41f1624d5");
-    
-    assert(Crypto::to_hex_string(Crypto::pbkdf2("Password", "Salt", 4096, 128 / 8)) == "f66df50f8aaa11e4d9721e1312ff2e66");
-    assert(Crypto::to_hex_string(Crypto::pbkdf2("Password", "Salt", 8192, 512 / 8)) == "a941ccbc34d1ee8ebbd1d34824a419c3dc4eac9cbc7c36ae6c7ca8725e2b618a6ad22241e787af937b0960cf85aa8ea3a258f243e05d3cc9b08af5dd93be046c");
+  for(auto &string_test : base64_string_tests) {
+    ASSERT(Crypto::Base64::encode(string_test.first) == string_test.second);
+    ASSERT(Crypto::Base64::decode(string_test.second) == string_test.first);
+  }
+
+  for(auto &string_test : md5_string_tests) {
+    ASSERT(Crypto::to_hex_string(Crypto::md5(string_test.first)) == string_test.second);
+    stringstream ss(string_test.first);
+    ASSERT(Crypto::to_hex_string(Crypto::md5(ss)) == string_test.second);
+  }
+
+  for(auto &string_test : sha1_string_tests) {
+    ASSERT(Crypto::to_hex_string(Crypto::sha1(string_test.first)) == string_test.second);
+    stringstream ss(string_test.first);
+    ASSERT(Crypto::to_hex_string(Crypto::sha1(ss)) == string_test.second);
+  }
+
+  for(auto &string_test : sha256_string_tests) {
+    ASSERT(Crypto::to_hex_string(Crypto::sha256(string_test.first)) == string_test.second);
+    stringstream ss(string_test.first);
+    ASSERT(Crypto::to_hex_string(Crypto::sha256(ss)) == string_test.second);
+  }
+
+  for(auto &string_test : sha512_string_tests) {
+    ASSERT(Crypto::to_hex_string(Crypto::sha512(string_test.first)) == string_test.second);
+    stringstream ss(string_test.first);
+    ASSERT(Crypto::to_hex_string(Crypto::sha512(ss)) == string_test.second);
+  }
+
+  // Testing iterations
+  ASSERT(Crypto::to_hex_string(Crypto::sha1("Test", 1)) == "640ab2bae07bedc4c163f679a746f7ab7fb5d1fa");
+  ASSERT(Crypto::to_hex_string(Crypto::sha1("Test", 2)) == "af31c6cbdecd88726d0a9b3798c71ef41f1624d5");
+  stringstream ss("Test");
+  ASSERT(Crypto::to_hex_string(Crypto::sha1(ss, 2)) == "af31c6cbdecd88726d0a9b3798c71ef41f1624d5");
+
+  ASSERT(Crypto::to_hex_string(Crypto::pbkdf2("Password", "Salt", 4096, 128 / 8)) == "f66df50f8aaa11e4d9721e1312ff2e66");
+  ASSERT(Crypto::to_hex_string(Crypto::pbkdf2("Password", "Salt", 8192, 512 / 8)) == "a941ccbc34d1ee8ebbd1d34824a419c3dc4eac9cbc7c36ae6c7ca8725e2b618a6ad22241e787af937b0960cf85aa8ea3a258f243e05d3cc9b08af5dd93be046c");
 }
diff --git a/third_party/Simple-web-server/repo/tests/fuzzers/README.md b/third_party/Simple-web-server/repo/tests/fuzzers/README.md
new file mode 100644
index 0000000000..0534d5a84c
--- /dev/null
+++ b/third_party/Simple-web-server/repo/tests/fuzzers/README.md
@@ -0,0 +1,6 @@
+Prior to running the fuzzers, build and prepare for instance as follows:
+```sh
+CXX=clang++ cmake -DBUILD_FUZZING=1 ..
+make
+export LSAN_OPTIONS=detect_leaks=0
+```
diff --git a/third_party/Simple-web-server/repo/tests/fuzzers/http_header_field_value_semicolon_separated_attributes_parse.cpp b/third_party/Simple-web-server/repo/tests/fuzzers/http_header_field_value_semicolon_separated_attributes_parse.cpp
new file mode 100644
index 0000000000..e45a2db470
--- /dev/null
+++ b/third_party/Simple-web-server/repo/tests/fuzzers/http_header_field_value_semicolon_separated_attributes_parse.cpp
@@ -0,0 +1,6 @@
+#include "utility.hpp"
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
+  SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse(std::string(reinterpret_cast<const char *>(data), size));
+  return 0;
+}
diff --git a/third_party/Simple-web-server/repo/tests/fuzzers/http_header_parse.cpp b/third_party/Simple-web-server/repo/tests/fuzzers/http_header_parse.cpp
new file mode 100644
index 0000000000..e90c28f615
--- /dev/null
+++ b/third_party/Simple-web-server/repo/tests/fuzzers/http_header_parse.cpp
@@ -0,0 +1,9 @@
+#include "utility.hpp"
+#include <sstream>
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
+  std::stringstream ss;
+  ss << std::string(reinterpret_cast<const char *>(data), size);
+  SimpleWeb::HttpHeader::parse(ss);
+  return 0;
+}
diff --git a/third_party/Simple-web-server/repo/tests/fuzzers/percent_decode.cpp b/third_party/Simple-web-server/repo/tests/fuzzers/percent_decode.cpp
new file mode 100644
index 0000000000..c1084642f5
--- /dev/null
+++ b/third_party/Simple-web-server/repo/tests/fuzzers/percent_decode.cpp
@@ -0,0 +1,6 @@
+#include "utility.hpp"
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
+  SimpleWeb::Percent::decode(std::string(reinterpret_cast<const char *>(data), size));
+  return 0;
+}
diff --git a/third_party/Simple-web-server/repo/tests/fuzzers/query_string_parse.cpp b/third_party/Simple-web-server/repo/tests/fuzzers/query_string_parse.cpp
new file mode 100644
index 0000000000..76967ec07f
--- /dev/null
+++ b/third_party/Simple-web-server/repo/tests/fuzzers/query_string_parse.cpp
@@ -0,0 +1,6 @@
+#include "utility.hpp"
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
+  SimpleWeb::QueryString::parse(std::string(reinterpret_cast<const char *>(data), size));
+  return 0;
+}
diff --git a/third_party/Simple-web-server/repo/tests/fuzzers/request_message_parse.cpp b/third_party/Simple-web-server/repo/tests/fuzzers/request_message_parse.cpp
new file mode 100644
index 0000000000..51dfb29f0b
--- /dev/null
+++ b/third_party/Simple-web-server/repo/tests/fuzzers/request_message_parse.cpp
@@ -0,0 +1,11 @@
+#include "utility.hpp"
+#include <sstream>
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
+  std::stringstream ss;
+  ss << std::string(reinterpret_cast<const char *>(data), size);
+  std::string method, path, query_string, version;
+  SimpleWeb::CaseInsensitiveMultimap header;
+  SimpleWeb::RequestMessage::parse(ss, method, path, query_string, version, header);
+  return 0;
+}
diff --git a/third_party/Simple-web-server/repo/tests/fuzzers/response_message_parse.cpp b/third_party/Simple-web-server/repo/tests/fuzzers/response_message_parse.cpp
new file mode 100644
index 0000000000..247b66df6f
--- /dev/null
+++ b/third_party/Simple-web-server/repo/tests/fuzzers/response_message_parse.cpp
@@ -0,0 +1,11 @@
+#include "utility.hpp"
+#include <sstream>
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
+  std::stringstream ss;
+  ss << std::string(reinterpret_cast<const char *>(data), size);
+  std::string version, status_code;
+  SimpleWeb::CaseInsensitiveMultimap header;
+  SimpleWeb::ResponseMessage::parse(ss, version, status_code, header);
+  return 0;
+}
diff --git a/third_party/Simple-web-server/repo/tests/io_test.cpp b/third_party/Simple-web-server/repo/tests/io_test.cpp
index db999cc746..c2370f51e8 100644
--- a/third_party/Simple-web-server/repo/tests/io_test.cpp
+++ b/third_party/Simple-web-server/repo/tests/io_test.cpp
@@ -1,98 +1,747 @@
-#include "server_http.hpp"
+#include "assert.hpp"
 #include "client_http.hpp"
-
-#include <cassert>
+#include "server_http.hpp"
+#include <future>
 
 using namespace std;
 
-typedef SimpleWeb::Server<SimpleWeb::HTTP> HttpServer;
-typedef SimpleWeb::Client<SimpleWeb::HTTP> HttpClient;
+using HttpServer = SimpleWeb::Server<SimpleWeb::HTTP>;
+using HttpClient = SimpleWeb::Client<SimpleWeb::HTTP>;
 
 int main() {
-    HttpServer server;
-    server.config.port=8080;
-    
-    server.resource["^/string$"]["POST"]=[](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
-        auto content=request->content.string();
-        
-        *response << "HTTP/1.1 200 OK\r\nContent-Length: " << content.length() << "\r\n\r\n" << content;
-    };
-    
-    server.resource["^/info$"]["GET"]=[](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
-        stringstream content_stream;
-        content_stream << request->method << " " << request->path << " " << request->http_version << " ";
-        content_stream << request->header.find("test parameter")->second;
-
-        content_stream.seekp(0, ios::end);
-        
-        *response <<  "HTTP/1.1 200 OK\r\nContent-Length: " << content_stream.tellp() << "\r\n\r\n" << content_stream.rdbuf();
-    };
-    
-    server.resource["^/match/([0-9]+)$"]["GET"]=[&server](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
-        string number=request->path_match[1];
-        *response << "HTTP/1.1 200 OK\r\nContent-Length: " << number.length() << "\r\n\r\n" << number;
-    };
-    
-    thread server_thread([&server](){
-        //Start server
-        server.start();
+  // Test ScopeRunner
+  {
+    SimpleWeb::ScopeRunner scope_runner;
+    std::thread cancel_thread;
+    {
+      ASSERT(scope_runner.count == 0);
+      auto lock = scope_runner.continue_lock();
+      ASSERT(lock);
+      ASSERT(scope_runner.count == 1);
+      {
+        auto lock = scope_runner.continue_lock();
+        ASSERT(lock);
+        ASSERT(scope_runner.count == 2);
+      }
+      ASSERT(scope_runner.count == 1);
+      cancel_thread = thread([&scope_runner] {
+        scope_runner.stop();
+        ASSERT(scope_runner.count == -1);
+      });
+      this_thread::sleep_for(chrono::milliseconds(500));
+      ASSERT(scope_runner.count == 1);
+    }
+    cancel_thread.join();
+    ASSERT(scope_runner.count == -1);
+    auto lock = scope_runner.continue_lock();
+    ASSERT(!lock);
+    scope_runner.stop();
+    ASSERT(scope_runner.count == -1);
+
+    scope_runner.count = 0;
+
+    vector<thread> threads;
+    for(size_t c = 0; c < 100; ++c) {
+      threads.emplace_back([&scope_runner] {
+        auto lock = scope_runner.continue_lock();
+        ASSERT(scope_runner.count > 0);
+      });
+    }
+    for(auto &thread : threads)
+      thread.join();
+    ASSERT(scope_runner.count == 0);
+  }
+
+  HttpServer server;
+  server.config.port = 8080;
+
+  server.resource["^/string$"]["POST"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    auto content = request->content.string();
+    ASSERT(content == request->content.string());
+
+    *response << "HTTP/1.1 200 OK\r\nContent-Length: " << content.length() << "\r\n\r\n"
+              << content;
+
+    ASSERT(!request->remote_endpoint().address().to_string().empty());
+    ASSERT(request->remote_endpoint().port() != 0);
+  };
+
+  server.resource["^/string/dup$"]["POST"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    auto content = request->content.string();
+
+    // Send content twice, before it has a chance to be written to the socket.
+    *response << "HTTP/1.1 200 OK\r\nContent-Length: " << (content.length() * 2) << "\r\n\r\n"
+              << content;
+    response->send();
+    *response << content;
+    response->send();
+
+    ASSERT(!request->remote_endpoint().address().to_string().empty());
+    ASSERT(request->remote_endpoint().port() != 0);
+  };
+
+  server.resource["^/string2$"]["POST"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    response->write(request->content.string());
+  };
+
+  server.resource["^/string3$"]["POST"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    stringstream stream;
+    stream << request->content.rdbuf();
+    response->write(stream);
+  };
+
+  server.resource["^/string4$"]["POST"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> /*request*/) {
+    response->write(SimpleWeb::StatusCode::client_error_forbidden, {{"Test1", "test2"}, {"tesT3", "test4"}});
+  };
+
+  server.resource["^/info$"]["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    stringstream content_stream;
+    content_stream << request->method << " " << request->path << " " << request->http_version << " ";
+    content_stream << request->header.find("test parameter")->second;
+
+    content_stream.seekp(0, ios::end);
+
+    *response << "HTTP/1.1 200 OK\r\nContent-Length: " << content_stream.tellp() << "\r\n\r\n"
+              << content_stream.rdbuf();
+  };
+
+  server.resource["^/work$"]["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> /*request*/) {
+    thread work_thread([response] {
+      this_thread::sleep_for(chrono::seconds(5));
+      response->write("Work done");
     });
-    
-    this_thread::sleep_for(chrono::seconds(1));
+    work_thread.detach();
+  };
+
+  server.resource["^/match/([0-9]+)$"]["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    string number = request->path_match[1];
+    *response << "HTTP/1.1 200 OK\r\nContent-Length: " << number.length() << "\r\n\r\n"
+              << number;
+  };
+
+  server.resource["^/header$"]["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    auto content = request->header.find("test1")->second + request->header.find("test2")->second;
+
+    *response << "HTTP/1.1 200 OK\r\nContent-Length: " << content.length() << "\r\n\r\n"
+              << content;
+  };
+
+  server.resource["^/query_string$"]["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    ASSERT(request->path == "/query_string");
+    ASSERT(request->query_string == "testing");
+    auto queries = request->parse_query_string();
+    auto it = queries.find("Testing");
+    ASSERT(it != queries.end() && it->first == "testing" && it->second == "");
+    response->write(request->query_string);
+  };
+
+  server.resource["^/chunked$"]["POST"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    ASSERT(request->path == "/chunked");
+
+    ASSERT(request->content.string() == "SimpleWeb in\r\n\r\nchunks.");
+
+    response->write("6\r\nSimple\r\n3\r\nWeb\r\nE\r\n in\r\n\r\nchunks.\r\n0\r\n\r\n", {{"Transfer-Encoding", "chunked"}});
+  };
+
+  server.resource["^/chunked2$"]["POST"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> request) {
+    ASSERT(request->path == "/chunked2");
+
+    ASSERT(request->content.string() == "HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld");
+
+    response->write("258\r\nHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld\r\n0\r\n\r\n", {{"Transfer-Encoding", "chunked"}});
+  };
+
+  server.resource["^/event-stream1$"]["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> /*request*/) {
+    thread work_thread([response] {
+      response->close_connection_after_response = true; // Unspecified content length
+
+      // Send header
+      promise<bool> header_error;
+      response->write({{"Content-Type", "text/event-stream"}});
+      response->send([&header_error](const SimpleWeb::error_code &ec) {
+        header_error.set_value(static_cast<bool>(ec));
+      });
+      ASSERT(!header_error.get_future().get());
+
+      *response << "data: 1\n\n";
+      promise<bool> error;
+      response->send([&error](const SimpleWeb::error_code &ec) {
+        error.set_value(static_cast<bool>(ec));
+      });
+      ASSERT(!error.get_future().get());
+
+      // Write result
+      *response << "data: 2\n\n";
+    });
+    work_thread.detach();
+  };
+
+  server.resource["^/event-stream2$"]["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> /*request*/) {
+    thread work_thread([response] {
+      response->close_connection_after_response = true; // Unspecified content length
+
+      // Send header
+      promise<bool> header_error;
+      response->write({{"Content-Type", "text/event-stream"}});
+      response->send([&header_error](const SimpleWeb::error_code &ec) {
+        header_error.set_value(static_cast<bool>(ec));
+      });
+      ASSERT(!header_error.get_future().get());
+
+      *response << "data: 1\r\n\r\n";
+      promise<bool> error;
+      response->send([&error](const SimpleWeb::error_code &ec) {
+        error.set_value(static_cast<bool>(ec));
+      });
+      ASSERT(!error.get_future().get());
+
+      // Write result
+      *response << "data: 2\r\n\r\n";
+    });
+    work_thread.detach();
+  };
+
+  server.resource["^/session-close$"]["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> /*request*/) {
+    response->close_connection_after_response = true; // Unspecified content length
+    response->write("test", {{"Session", "close"}});
+  };
+  server.resource["^/session-close-without-correct-header$"]["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> /*request*/) {
+    response->close_connection_after_response = true; // Unspecified content length
+    response->write("test");
+  };
+
+  server.resource["^/non-standard-line-endings1$"]["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> /*request*/) {
+    *response << "HTTP/1.1 200 OK\r\nname: value\n\n";
+  };
+
+  server.resource["^/non-standard-line-endings2$"]["GET"] = [](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> /*request*/) {
+    *response << "HTTP/1.1 200 OK\nname: value\n\n";
+  };
+
+  std::string long_response;
+  for(int c = 0; c < 1000; ++c)
+    long_response += to_string(c);
+  server.resource["^/long-response$"]["GET"] = [&long_response](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> /*request*/) {
+    response->write(long_response, {{"name", "value"}});
+  };
+
+  thread server_thread([&server]() {
+    // Start server
+    server.start();
+  });
+
+  this_thread::sleep_for(chrono::seconds(1));
+
+  server.stop();
+  server_thread.join();
+
+  server_thread = thread([&server]() {
+    // Start server
+    server.start();
+  });
+
+  this_thread::sleep_for(chrono::seconds(1));
+
+  // Test various request types
+  {
+    HttpClient client("localhost:8080");
     {
-        HttpClient client("localhost:8080");
-    
-        {
-            stringstream output;
-            auto r=client.request("POST", "/string", "A string");
-            output << r->content.rdbuf();
-            assert(output.str()=="A string");
+      stringstream output;
+      auto r = client.request("POST", "/string", "A string");
+      ASSERT(SimpleWeb::status_code(r->status_code) == SimpleWeb::StatusCode::success_ok);
+      output << r->content.rdbuf();
+      ASSERT(output.str() == "A string");
+    }
+
+    {
+      auto r = client.request("POST", "/string", "A string");
+      ASSERT(SimpleWeb::status_code(r->status_code) == SimpleWeb::StatusCode::success_ok);
+      ASSERT(r->content.string() == "A string");
+      ASSERT(r->content.string() == "A string");
+    }
+
+    {
+      stringstream output;
+      auto r = client.request("POST", "/string2", "A string");
+      ASSERT(SimpleWeb::status_code(r->status_code) == SimpleWeb::StatusCode::success_ok);
+      output << r->content.rdbuf();
+      ASSERT(output.str() == "A string");
+    }
+
+    {
+      stringstream output;
+      auto r = client.request("POST", "/string3", "A string");
+      ASSERT(SimpleWeb::status_code(r->status_code) == SimpleWeb::StatusCode::success_ok);
+      output << r->content.rdbuf();
+      ASSERT(output.str() == "A string");
+    }
+
+    {
+      stringstream output;
+      auto r = client.request("POST", "/string4", "A string");
+      ASSERT(SimpleWeb::status_code(r->status_code) == SimpleWeb::StatusCode::client_error_forbidden);
+      ASSERT(r->header.size() == 3);
+      ASSERT(r->header.find("test1")->second == "test2");
+      ASSERT(r->header.find("tEst3")->second == "test4");
+      ASSERT(r->header.find("content-length")->second == "0");
+      output << r->content.rdbuf();
+      ASSERT(output.str() == "");
+    }
+
+    {
+      stringstream output;
+      stringstream content("A string");
+      auto r = client.request("POST", "/string", content);
+      output << r->content.rdbuf();
+      ASSERT(output.str() == "A string");
+    }
+
+    {
+      // Test rapid calls to Response::send
+      stringstream output;
+      stringstream content("A string\n");
+      auto r = client.request("POST", "/string/dup", content);
+      output << r->content.rdbuf();
+      ASSERT(output.str() == "A string\nA string\n");
+    }
+
+    {
+      stringstream output;
+      auto r = client.request("GET", "/info", "", {{"Test Parameter", "test value"}});
+      output << r->content.rdbuf();
+      ASSERT(output.str() == "GET /info 1.1 test value");
+    }
+
+    {
+      stringstream output;
+      auto r = client.request("GET", "/match/123");
+      output << r->content.rdbuf();
+      ASSERT(output.str() == "123");
+    }
+    {
+      auto r = client.request("POST", "/chunked", "6\r\nSimple\r\n3\r\nWeb\r\nE\r\n in\r\n\r\nchunks.\r\n0\r\n\r\n", {{"Transfer-Encoding", "chunked"}});
+      ASSERT(r->content.string() == "SimpleWeb in\r\n\r\nchunks.");
+    }
+    {
+      auto r = client.request("POST", "/chunked2", "258\r\nHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld\r\n0\r\n\r\n", {{"Transfer-Encoding", "chunked"}});
+      ASSERT(r->content.string() == "HelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld");
+    }
+
+    // Test reconnecting
+    for(int c = 0; c < 20; ++c) {
+      auto r = client.request("GET", "/session-close");
+      ASSERT(r->content.string() == "test");
+    }
+    for(int c = 0; c < 20; ++c) {
+      auto r = client.request("GET", "/session-close-without-correct-header");
+      ASSERT(r->content.string() == "test");
+    }
+
+    // Test non-standard line endings
+    {
+      auto r = client.request("GET", "/non-standard-line-endings1");
+      ASSERT(r->http_version == "1.1");
+      ASSERT(r->status_code == "200 OK");
+      ASSERT(r->header.size() == 1);
+      ASSERT(r->header.begin()->first == "name");
+      ASSERT(r->header.begin()->second == "value");
+      ASSERT(r->content.string().empty());
+    }
+    {
+      auto r = client.request("GET", "/non-standard-line-endings2");
+      ASSERT(r->http_version == "1.1");
+      ASSERT(r->status_code == "200 OK");
+      ASSERT(r->header.size() == 1);
+      ASSERT(r->header.begin()->first == "name");
+      ASSERT(r->header.begin()->second == "value");
+      ASSERT(r->content.string().empty());
+    }
+  }
+  {
+    HttpClient client("localhost:8080");
+
+    HttpClient::Connection *connection;
+    {
+      // test performing the stream version of the request methods first
+      stringstream output;
+      stringstream content("A string");
+      auto r = client.request("POST", "/string", content);
+      output << r->content.rdbuf();
+      ASSERT(output.str() == "A string");
+      ASSERT(client.connections.size() == 1);
+      connection = client.connections.begin()->get();
+    }
+
+    {
+      stringstream output;
+      auto r = client.request("POST", "/string", "A string");
+      output << r->content.rdbuf();
+      ASSERT(output.str() == "A string");
+      ASSERT(client.connections.size() == 1);
+      ASSERT(connection == client.connections.begin()->get());
+    }
+
+    {
+      stringstream output;
+      auto r = client.request("GET", "/header", "", {{"test1", "test"}, {"test2", "ing"}});
+      output << r->content.rdbuf();
+      ASSERT(output.str() == "testing");
+      ASSERT(client.connections.size() == 1);
+      ASSERT(connection == client.connections.begin()->get());
+    }
+
+    {
+      stringstream output;
+      auto r = client.request("GET", "/query_string?testing");
+      ASSERT(r->content.string() == "testing");
+      ASSERT(client.connections.size() == 1);
+      ASSERT(connection == client.connections.begin()->get());
+    }
+  }
+
+  // Test large responses
+  {
+    {
+      HttpClient client("localhost:8080");
+      client.config.max_response_streambuf_size = 400;
+      bool thrown = false;
+      try {
+        auto r = client.request("GET", "/long-response");
+      }
+      catch(...) {
+        thrown = true;
+      }
+      ASSERT(thrown);
+    }
+    HttpClient client("localhost:8080");
+    client.config.max_response_streambuf_size = 400;
+    {
+      size_t calls = 0;
+      bool end = false;
+      std::string content;
+      client.request("GET", "/long-response", [&calls, &content, &end](shared_ptr<HttpClient::Response> response, const SimpleWeb::error_code &ec) {
+        ASSERT(!ec);
+        content += response->content.string();
+        calls++;
+        if(calls == 1)
+          ASSERT(response->content.end == false);
+        end = response->content.end;
+      });
+      client.io_service->run();
+      ASSERT(content == long_response);
+      ASSERT(calls > 2);
+      ASSERT(end == true);
+    }
+    {
+      size_t calls = 0;
+      std::string content;
+      client.request("GET", "/long-response", [&calls, &content](shared_ptr<HttpClient::Response> response, const SimpleWeb::error_code &ec) {
+        if(calls == 0)
+          ASSERT(!ec);
+        content += response->content.string();
+        calls++;
+        response->close();
+      });
+      SimpleWeb::restart(*client.io_service);
+      client.io_service->run();
+      ASSERT(!content.empty());
+      ASSERT(calls >= 2);
+    }
+  }
+
+  // Test client timeout
+  {
+    HttpClient client("localhost:8080");
+    client.config.timeout = 2;
+    bool thrown = false;
+    try {
+      auto r = client.request("GET", "/work");
+    }
+    catch(...) {
+      thrown = true;
+    }
+    ASSERT(thrown);
+  }
+  {
+    HttpClient client("localhost:8080");
+    client.config.timeout = 2;
+    bool call = false;
+    client.request("GET", "/work", [&call](shared_ptr<HttpClient::Response> /*response*/, const SimpleWeb::error_code &ec) {
+      ASSERT(ec);
+      call = true;
+    });
+    SimpleWeb::restart(*client.io_service);
+    client.io_service->run();
+    ASSERT(call);
+  }
+
+  // Test asynchronous requests
+  {
+    HttpClient client("localhost:8080");
+    bool call = false;
+    client.request("GET", "/match/123", [&call](shared_ptr<HttpClient::Response> response, const SimpleWeb::error_code &ec) {
+      ASSERT(!ec);
+      stringstream output;
+      output << response->content.rdbuf();
+      ASSERT(output.str() == "123");
+      call = true;
+    });
+    client.io_service->run();
+    ASSERT(call);
+
+    // Test event-stream
+    {
+      vector<int> calls(4, 0);
+      std::size_t call_num = 0;
+      client.request("GET", "/event-stream1", [&calls, &call_num](shared_ptr<HttpClient::Response> response, const SimpleWeb::error_code &ec) {
+        calls.at(call_num) = 1;
+        if(call_num == 0) {
+          ASSERT(response->content.string().empty());
+          ASSERT(!ec);
         }
-        
-        {
-            stringstream output;
-            stringstream content("A string");
-            auto r=client.request("POST", "/string", content);
-            output << r->content.rdbuf();
-            assert(output.str()=="A string");
+        else if(call_num == 1) {
+          ASSERT(response->content.string() == "data: 1\n");
+          ASSERT(!ec);
         }
-        
-        {
-            stringstream output;
-            auto r=client.request("GET", "/info", "", {{"Test Parameter", "test value"}});
-            output << r->content.rdbuf();
-            assert(output.str()=="GET /info 1.1 test value");
+        else if(call_num == 2) {
+          ASSERT(response->content.string() == "data: 2\n");
+          ASSERT(!ec);
         }
-        
-        {
-            stringstream output;
-            auto r=client.request("GET", "/match/123");
-            output << r->content.rdbuf();
-            assert(output.str()=="123");
+        else if(call_num == 3) {
+          ASSERT(response->content.string().empty());
+          ASSERT(ec == SimpleWeb::error::eof);
         }
+        ++call_num;
+      });
+      SimpleWeb::restart(*client.io_service);
+      client.io_service->run();
+      for(auto call : calls)
+        ASSERT(call);
     }
     {
-        HttpClient client("localhost:8080");
-        
-        // test performing the stream version of the request methods first
-        {
-            stringstream output;
-            stringstream content("A string");
-            auto r=client.request("POST", "/string", content);
-            output << r->content.rdbuf();
-            assert(output.str()=="A string");
+      vector<int> calls(4, 0);
+      std::size_t call_num = 0;
+      client.request("GET", "/event-stream2", [&calls, &call_num](shared_ptr<HttpClient::Response> response, const SimpleWeb::error_code &ec) {
+        calls.at(call_num) = 1;
+        if(call_num == 0) {
+          ASSERT(response->content.string().empty());
+          ASSERT(!ec);
         }
-        
-        {
+        else if(call_num == 1) {
+          ASSERT(response->content.string() == "data: 1\n");
+          ASSERT(!ec);
+        }
+        else if(call_num == 2) {
+          ASSERT(response->content.string() == "data: 2\n");
+          ASSERT(!ec);
+        }
+        else if(call_num == 3) {
+          ASSERT(response->content.string().empty());
+          ASSERT(ec == SimpleWeb::error::eof);
+        }
+        ++call_num;
+      });
+      SimpleWeb::restart(*client.io_service);
+      client.io_service->run();
+      for(auto call : calls)
+        ASSERT(call);
+    }
+
+    // Test concurrent requests from same client
+    {
+      vector<int> calls(100, 0);
+      vector<thread> threads;
+      for(size_t c = 0; c < 100; ++c) {
+        threads.emplace_back([c, &client, &calls] {
+          client.request("GET", "/match/123", [c, &calls](shared_ptr<HttpClient::Response> response, const SimpleWeb::error_code &ec) {
+            ASSERT(!ec);
             stringstream output;
-            auto r=client.request("POST", "/string", "A string");
-            output << r->content.rdbuf();
-            assert(output.str()=="A string");
+            output << response->content.rdbuf();
+            ASSERT(output.str() == "123");
+            calls[c] = 1;
+          });
+        });
+      }
+      for(auto &thread : threads)
+        thread.join();
+      ASSERT(client.connections.size() == 100);
+      SimpleWeb::restart(*client.io_service);
+      client.io_service->run();
+      ASSERT(client.connections.size() == 1);
+      for(auto call : calls)
+        ASSERT(call);
+    }
+
+    // Test concurrent synchronous request calls from same client
+    {
+      HttpClient client("localhost:8080");
+      {
+        vector<int> calls(5, 0);
+        vector<thread> threads;
+        for(size_t c = 0; c < 5; ++c) {
+          threads.emplace_back([c, &client, &calls] {
+            try {
+              auto r = client.request("GET", "/match/123");
+              ASSERT(SimpleWeb::status_code(r->status_code) == SimpleWeb::StatusCode::success_ok);
+              ASSERT(r->content.string() == "123");
+              calls[c] = 1;
+            }
+            catch(...) {
+              ASSERT(false);
+            }
+          });
+        }
+        for(auto &thread : threads)
+          thread.join();
+        ASSERT(client.connections.size() == 1);
+        for(auto call : calls)
+          ASSERT(call);
+      }
+    }
+
+    // Test concurrent requests from different clients
+    {
+      vector<int> calls(10, 0);
+      vector<thread> threads;
+      for(size_t c = 0; c < 10; ++c) {
+        threads.emplace_back([c, &calls] {
+          HttpClient client("localhost:8080");
+          client.request("POST", "/string", "A string", [c, &calls](shared_ptr<HttpClient::Response> response, const SimpleWeb::error_code &ec) {
+            ASSERT(!ec);
+            ASSERT(response->content.string() == "A string");
+            calls[c] = 1;
+          });
+          client.io_service->run();
+        });
+      }
+      for(auto &thread : threads)
+        thread.join();
+      for(auto call : calls)
+        ASSERT(call);
+    }
+  }
+
+  // Test multiple requests through a persistent connection
+  {
+    HttpClient client("localhost:8080");
+    ASSERT(client.connections.size() == 0);
+    for(size_t c = 0; c < 5000; ++c) {
+      auto r1 = client.request("POST", "/string", "A string");
+      ASSERT(SimpleWeb::status_code(r1->status_code) == SimpleWeb::StatusCode::success_ok);
+      ASSERT(r1->content.string() == "A string");
+      ASSERT(client.connections.size() == 1);
+
+      stringstream content("A string");
+      auto r2 = client.request("POST", "/string", content);
+      ASSERT(SimpleWeb::status_code(r2->status_code) == SimpleWeb::StatusCode::success_ok);
+      ASSERT(r2->content.string() == "A string");
+      ASSERT(client.connections.size() == 1);
+    }
+  }
+
+  // Test multiple requests through new several client objects
+  for(size_t c = 0; c < 100; ++c) {
+    {
+      HttpClient client("localhost:8080");
+      auto r = client.request("POST", "/string", "A string");
+      ASSERT(SimpleWeb::status_code(r->status_code) == SimpleWeb::StatusCode::success_ok);
+      ASSERT(r->content.string() == "A string");
+      ASSERT(client.connections.size() == 1);
+    }
+
+    {
+      HttpClient client("localhost:8080");
+      stringstream content("A string");
+      auto r = client.request("POST", "/string", content);
+      ASSERT(SimpleWeb::status_code(r->status_code) == SimpleWeb::StatusCode::success_ok);
+      ASSERT(r->content.string() == "A string");
+      ASSERT(client.connections.size() == 1);
+    }
+  }
+
+  // Test Client client's stop()
+  for(size_t c = 0; c < 40; ++c) {
+    auto io_service = make_shared<SimpleWeb::io_context>();
+    bool call = false;
+    HttpClient client("localhost:8080");
+    client.io_service = io_service;
+    client.request("GET", "/work", [&call](shared_ptr<HttpClient::Response> /*response*/, const SimpleWeb::error_code &ec) {
+      call = true;
+      ASSERT(ec);
+    });
+    thread thread([io_service] {
+      io_service->run();
+    });
+    this_thread::sleep_for(chrono::milliseconds(100));
+    client.stop();
+    this_thread::sleep_for(chrono::milliseconds(100));
+    thread.join();
+    ASSERT(call);
+  }
+
+  // Test Client destructor that should cancel the client's request
+  for(size_t c = 0; c < 40; ++c) {
+    auto io_service = make_shared<SimpleWeb::io_context>();
+    {
+      HttpClient client("localhost:8080");
+      client.io_service = io_service;
+      client.request("GET", "/work", [](shared_ptr<HttpClient::Response> /*response*/, const SimpleWeb::error_code & /*ec*/) {
+        ASSERT(false);
+      });
+      thread thread([io_service] {
+        io_service->run();
+      });
+      thread.detach();
+      this_thread::sleep_for(chrono::milliseconds(100));
+    }
+    this_thread::sleep_for(chrono::milliseconds(100));
+  }
+
+  server.stop();
+  server_thread.join();
+
+  // Test server destructor
+  {
+    auto io_service = make_shared<SimpleWeb::io_context>();
+    bool call = false;
+    bool client_catch = false;
+    {
+      HttpServer server;
+      server.config.port = 8081;
+      server.io_service = io_service;
+      server.resource["^/test$"]["GET"] = [&call](shared_ptr<HttpServer::Response> response, shared_ptr<HttpServer::Request> /*request*/) {
+        call = true;
+        thread sleep_thread([response] {
+          this_thread::sleep_for(chrono::seconds(5));
+          response->write(SimpleWeb::StatusCode::success_ok, "test");
+          response->send([](const SimpleWeb::error_code & /*ec*/) {
+            ASSERT(false);
+          });
+        });
+        sleep_thread.detach();
+      };
+      server.start();
+      thread server_thread([io_service] {
+        io_service->run();
+      });
+      server_thread.detach();
+      this_thread::sleep_for(chrono::seconds(1));
+      thread client_thread([&client_catch] {
+        HttpClient client("localhost:8081");
+        try {
+          auto r = client.request("GET", "/test");
+          ASSERT(false);
+        }
+        catch(...) {
+          client_catch = true;
         }
+      });
+      client_thread.detach();
+      this_thread::sleep_for(chrono::seconds(1));
     }
-    
-    server.stop();
-    server_thread.join();
-    
-    return 0;
+    this_thread::sleep_for(chrono::seconds(5));
+    ASSERT(call);
+    ASSERT(client_catch);
+    io_service->stop();
+  }
 }
diff --git a/third_party/Simple-web-server/repo/tests/parse_test.cpp b/third_party/Simple-web-server/repo/tests/parse_test.cpp
index 785d305a1e..dd07557d2b 100644
--- a/third_party/Simple-web-server/repo/tests/parse_test.cpp
+++ b/third_party/Simple-web-server/repo/tests/parse_test.cpp
@@ -1,120 +1,341 @@
-#include "server_http.hpp"
+#include "assert.hpp"
 #include "client_http.hpp"
+#include "server_http.hpp"
 #include <iostream>
-#include <cassert>
 
 using namespace std;
 using namespace SimpleWeb;
 
 class ServerTest : public ServerBase<HTTP> {
 public:
-    ServerTest() : ServerBase<HTTP>::ServerBase(8080) {}
-            
-    void accept() {}
-    
-    void parse_request_test() {
-        HTTP socket(*io_service);
-        std::shared_ptr<Request> request(new Request(socket));
-        
-        std::ostream stream(&request->content.streambuf);
-        stream << "GET /test/ HTTP/1.1\r\n";
-        stream << "TestHeader: test\r\n";
-        stream << "TestHeader2:test2\r\n";
-        stream << "TestHeader3:test3a\r\n";
-        stream << "TestHeader3:test3b\r\n";
-        stream << "\r\n";
-        
-        assert(parse_request(request));
-        
-        assert(request->method=="GET");
-        assert(request->path=="/test/");
-        assert(request->http_version=="1.1");
-        
-        assert(request->header.size()==4);
-        auto header_it=request->header.find("TestHeader");
-        assert(header_it!=request->header.end() && header_it->second=="test");
-        header_it=request->header.find("TestHeader2");
-        assert(header_it!=request->header.end() && header_it->second=="test2");
-        
-        header_it=request->header.find("testheader");
-        assert(header_it!=request->header.end() && header_it->second=="test");
-        header_it=request->header.find("testheader2");
-        assert(header_it!=request->header.end() && header_it->second=="test2");
-        
-        auto range=request->header.equal_range("testheader3");
-        auto first=range.first;
-        auto second=first;
-        ++second;
-        assert(range.first!=request->header.end() && range.second!=request->header.end() &&
-               ((first->second=="test3a" && second->second=="test3b") ||
-                (first->second=="test3b" && second->second=="test3a")));
-    }
+  ServerTest() : ServerBase<HTTP>::ServerBase(8080) {}
+
+  void accept() noexcept override {}
+
+  void parse_request_test() {
+    auto session = std::make_shared<Session>(static_cast<size_t>(-1), create_connection(*io_service));
+
+    std::ostream stream(&session->request->content.streambuf);
+    stream << "GET /test/ HTTP/1.1\r\n";
+    stream << "TestHeader: test\r\n";
+    stream << "TestHeader2:test2\r\n";
+    stream << "TestHeader3:test3a\r\n";
+    stream << "TestHeader3:test3b\r\n";
+    stream << "\r\n";
+
+    ASSERT(RequestMessage::parse(session->request->content, session->request->method, session->request->path,
+                                 session->request->query_string, session->request->http_version, session->request->header));
+
+    ASSERT(session->request->method == "GET");
+    ASSERT(session->request->path == "/test/");
+    ASSERT(session->request->http_version == "1.1");
+
+    ASSERT(session->request->header.size() == 4);
+    auto header_it = session->request->header.find("TestHeader");
+    ASSERT(header_it != session->request->header.end() && header_it->second == "test");
+    header_it = session->request->header.find("TestHeader2");
+    ASSERT(header_it != session->request->header.end() && header_it->second == "test2");
+
+    header_it = session->request->header.find("testheader");
+    ASSERT(header_it != session->request->header.end() && header_it->second == "test");
+    header_it = session->request->header.find("testheader2");
+    ASSERT(header_it != session->request->header.end() && header_it->second == "test2");
+
+    auto range = session->request->header.equal_range("testheader3");
+    auto first = range.first;
+    auto second = first;
+    ++second;
+    ASSERT(range.first != session->request->header.end() && range.second != session->request->header.end() &&
+           ((first->second == "test3a" && second->second == "test3b") ||
+            (first->second == "test3b" && second->second == "test3a")));
+  }
 };
 
 class ClientTest : public ClientBase<HTTP> {
 public:
-    ClientTest(const std::string& server_port_path) : ClientBase<HTTP>::ClientBase(server_port_path, 80) {}
-    
-    void connect() {}
-    
-    void constructor_parse_test1() {
-        assert(host=="test.org");
-        assert(port==8080);
-    }
-    
-    void constructor_parse_test2() {
-        assert(host=="test.org");
-        assert(port==80);
-    }
-    
-    void parse_response_header_test() {
-        std::shared_ptr<Response> response(new Response());
-        
-        ostream stream(&response->content_buffer);
-        stream << "HTTP/1.1 200 OK\r\n";
-        stream << "TestHeader: test\r\n";
-        stream << "TestHeader2:test2\r\n";
-        stream << "TestHeader3:test3a\r\n";
-        stream << "TestHeader3:test3b\r\n";
-        stream << "\r\n";
-        
-        parse_response_header(response);
-        
-        assert(response->http_version=="1.1");
-        assert(response->status_code=="200 OK");
-        
-        assert(response->header.size()==4);
-        auto header_it=response->header.find("TestHeader");
-        assert(header_it!=response->header.end() && header_it->second=="test");
-        header_it=response->header.find("TestHeader2");
-        assert(header_it!=response->header.end() && header_it->second=="test2");
-        
-        header_it=response->header.find("testheader");
-        assert(header_it!=response->header.end() && header_it->second=="test");
-        header_it=response->header.find("testheader2");
-        assert(header_it!=response->header.end() && header_it->second=="test2");
-        
-        auto range=response->header.equal_range("testheader3");
-        auto first=range.first;
-        auto second=first;
-        ++second;
-        assert(range.first!=response->header.end() && range.second!=response->header.end() &&
-               ((first->second=="test3a" && second->second=="test3b") ||
-                (first->second=="test3b" && second->second=="test3a")));
-    }
+  ClientTest(const std::string &server_port_path) : ClientBase<HTTP>::ClientBase(server_port_path, 80) {}
+
+  std::shared_ptr<Connection> create_connection() noexcept override {
+    return nullptr;
+  }
+
+  void connect(const std::shared_ptr<Session> &) noexcept override {}
+
+  void parse_response_header_test() {
+    std::shared_ptr<Response> response(new Response(static_cast<size_t>(-1), nullptr));
+
+    ostream stream(&response->streambuf);
+    stream << "HTTP/1.1 200 OK\r\n";
+    stream << "TestHeader: test\r\n";
+    stream << "TestHeader2:  test2\r\n";
+    stream << "TestHeader3:test3a\r\n";
+    stream << "TestHeader3:test3b\r\n";
+    stream << "TestHeader4:\r\n";
+    stream << "TestHeader5: \r\n";
+    stream << "TestHeader6:  \r\n";
+    stream << "\r\n";
+
+    ASSERT(ResponseMessage::parse(response->content, response->http_version, response->status_code, response->header));
+
+    ASSERT(response->http_version == "1.1");
+    ASSERT(response->status_code == "200 OK");
+
+    ASSERT(response->header.size() == 7);
+    auto header_it = response->header.find("TestHeader");
+    ASSERT(header_it != response->header.end() && header_it->second == "test");
+    header_it = response->header.find("TestHeader2");
+    ASSERT(header_it != response->header.end() && header_it->second == "test2");
+
+    header_it = response->header.find("testheader");
+    ASSERT(header_it != response->header.end() && header_it->second == "test");
+    header_it = response->header.find("testheader2");
+    ASSERT(header_it != response->header.end() && header_it->second == "test2");
+
+    auto range = response->header.equal_range("testheader3");
+    auto first = range.first;
+    auto second = first;
+    ++second;
+    ASSERT(range.first != response->header.end() && range.second != response->header.end() &&
+           ((first->second == "test3a" && second->second == "test3b") ||
+            (first->second == "test3b" && second->second == "test3a")));
+
+    header_it = response->header.find("TestHeader4");
+    ASSERT(header_it != response->header.end() && header_it->second == "");
+    header_it = response->header.find("TestHeader5");
+    ASSERT(header_it != response->header.end() && header_it->second == "");
+    header_it = response->header.find("TestHeader6");
+    ASSERT(header_it != response->header.end() && header_it->second == "");
+  }
 };
 
 int main() {
-    ServerTest serverTest;
-    serverTest.io_service=std::make_shared<boost::asio::io_service>();
-    
-    serverTest.parse_request_test();
-    
+  ASSERT(case_insensitive_equal("Test", "tesT"));
+  ASSERT(case_insensitive_equal("tesT", "test"));
+  ASSERT(!case_insensitive_equal("test", "tseT"));
+  CaseInsensitiveEqual equal;
+  ASSERT(equal("Test", "tesT"));
+  ASSERT(equal("tesT", "test"));
+  ASSERT(!equal("test", "tset"));
+  CaseInsensitiveHash hash;
+  ASSERT(hash("Test") == hash("tesT"));
+  ASSERT(hash("tesT") == hash("test"));
+  ASSERT(hash("test") != hash("tset"));
+
+  auto percent_decoded = "testing æøå !#$&'()*+,/:;=?@[]123-._~\r\n";
+  auto percent_encoded = "testing%20%C3%A6%C3%B8%C3%A5%20%21%23%24%26%27%28%29%2A%2B%2C%2F%3A%3B%3D%3F%40%5B%5D123-._~%0D%0A";
+  ASSERT(Percent::encode(percent_decoded) == percent_encoded);
+  ASSERT(Percent::decode(percent_encoded) == percent_decoded);
+  ASSERT(Percent::decode(Percent::encode(percent_decoded)) == percent_decoded);
+
+  SimpleWeb::CaseInsensitiveMultimap fields = {{"test1", "æøå"}, {"test2", "!#$&'()*+,/:;=?@[]"}};
+  auto query_string1 = "test1=%C3%A6%C3%B8%C3%A5&test2=%21%23%24%26%27%28%29%2A%2B%2C%2F%3A%3B%3D%3F%40%5B%5D";
+  auto query_string2 = "test2=%21%23%24%26%27%28%29%2A%2B%2C%2F%3A%3B%3D%3F%40%5B%5D&test1=%C3%A6%C3%B8%C3%A5";
+  auto query_string_result = QueryString::create(fields);
+  ASSERT(query_string_result == query_string1 || query_string_result == query_string2);
+  auto fields_result1 = QueryString::parse(query_string1);
+  auto fields_result2 = QueryString::parse(query_string2);
+  ASSERT(fields_result1 == fields_result2 && fields_result1 == fields);
+
+  auto serverTest = make_shared<ServerTest>();
+  serverTest->io_service = std::make_shared<io_context>();
+
+  serverTest->parse_request_test();
+
+  {
+    ClientTest clientTest("test.org");
+    ASSERT(clientTest.host == "test.org");
+    ASSERT(clientTest.port == 80);
+    clientTest.parse_response_header_test();
+  }
+
+  {
     ClientTest clientTest("test.org:8080");
-    clientTest.constructor_parse_test1();
-    
-    ClientTest clientTest2("test.org");
-    clientTest2.constructor_parse_test2();
-    
-    clientTest2.parse_response_header_test();
+    ASSERT(clientTest.host == "test.org");
+    ASSERT(clientTest.port == 8080);
+  }
+
+  {
+    ClientTest clientTest("test.org:test");
+    ASSERT(clientTest.host == "test.org");
+    ASSERT(clientTest.port == 80);
+  }
+
+  {
+    ClientTest clientTest("[::1]");
+    ASSERT(clientTest.host == "::1");
+    ASSERT(clientTest.port == 80);
+  }
+
+  {
+    ClientTest clientTest("[::1]:8080");
+    ASSERT(clientTest.host == "::1");
+    ASSERT(clientTest.port == 8080);
+  }
+
+
+  io_context io_service;
+  asio::ip::tcp::socket socket(io_service);
+  SimpleWeb::Server<HTTP>::Request request(static_cast<size_t>(-1), nullptr);
+  {
+    request.query_string = "";
+    auto queries = request.parse_query_string();
+    ASSERT(queries.empty());
+  }
+  {
+    request.query_string = "=";
+    auto queries = request.parse_query_string();
+    ASSERT(queries.empty());
+  }
+  {
+    request.query_string = "=test";
+    auto queries = request.parse_query_string();
+    ASSERT(queries.empty());
+  }
+  {
+    request.query_string = "a=1%202%20%203&b=3+4&c&d=æ%25ø%26å%3F";
+    auto queries = request.parse_query_string();
+    {
+      auto range = queries.equal_range("a");
+      ASSERT(range.first != range.second);
+      ASSERT(range.first->second == "1 2  3");
+    }
+    {
+      auto range = queries.equal_range("b");
+      ASSERT(range.first != range.second);
+      ASSERT(range.first->second == "3 4");
+    }
+    {
+      auto range = queries.equal_range("c");
+      ASSERT(range.first != range.second);
+      ASSERT(range.first->second == "");
+    }
+    {
+      auto range = queries.equal_range("d");
+      ASSERT(range.first != range.second);
+      ASSERT(range.first->second == "æ%ø&å?");
+    }
+  }
+
+  {
+    SimpleWeb::CaseInsensitiveMultimap solution;
+    std::stringstream header;
+    auto parsed = SimpleWeb::HttpHeader::parse(header);
+    ASSERT(parsed == solution);
+  }
+  {
+    SimpleWeb::CaseInsensitiveMultimap solution = {{"Content-Type", "application/json"}};
+    std::stringstream header("Content-Type: application/json");
+    auto parsed = SimpleWeb::HttpHeader::parse(header);
+    ASSERT(parsed == solution);
+  }
+  {
+    SimpleWeb::CaseInsensitiveMultimap solution = {{"Content-Type", "application/json"}};
+    std::stringstream header("Content-Type: application/json\r");
+    auto parsed = SimpleWeb::HttpHeader::parse(header);
+    ASSERT(parsed == solution);
+  }
+  {
+    SimpleWeb::CaseInsensitiveMultimap solution = {{"Content-Type", "application/json"}};
+    std::stringstream header("Content-Type: application/json\r\n");
+    auto parsed = SimpleWeb::HttpHeader::parse(header);
+    ASSERT(parsed == solution);
+  }
+
+  {
+    {
+      SimpleWeb::CaseInsensitiveMultimap solution;
+      auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("");
+      ASSERT(parsed == solution);
+    }
+    {
+      SimpleWeb::CaseInsensitiveMultimap solution = {{"a", ""}};
+      auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("a");
+      ASSERT(parsed == solution);
+    }
+    {
+      SimpleWeb::CaseInsensitiveMultimap solution = {{"a", ""}, {"b", ""}};
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("a; b");
+        ASSERT(parsed == solution);
+      }
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("a;b");
+        ASSERT(parsed == solution);
+      }
+    }
+    {
+      SimpleWeb::CaseInsensitiveMultimap solution = {{"a", ""}, {"b", "c"}};
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("a; b=c");
+        ASSERT(parsed == solution);
+      }
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("a;b=c");
+        ASSERT(parsed == solution);
+      }
+    }
+    {
+      SimpleWeb::CaseInsensitiveMultimap solution = {{"form-data", ""}};
+      auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("form-data");
+      ASSERT(parsed == solution);
+    }
+    {
+      SimpleWeb::CaseInsensitiveMultimap solution = {{"form-data", ""}, {"test", ""}};
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("form-data; test");
+        ASSERT(parsed == solution);
+      }
+    }
+    {
+      SimpleWeb::CaseInsensitiveMultimap solution = {{"form-data", ""}, {"name", "file"}};
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("form-data; name=\"file\"");
+        ASSERT(parsed == solution);
+      }
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("form-data; name=file");
+        ASSERT(parsed == solution);
+      }
+    }
+    {
+      SimpleWeb::CaseInsensitiveMultimap solution = {{"form-data", ""}, {"name", "file"}, {"filename", "filename.png"}};
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("form-data; name=\"file\"; filename=\"filename.png\"");
+        ASSERT(parsed == solution);
+      }
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("form-data;name=\"file\";filename=\"filename.png\"");
+        ASSERT(parsed == solution);
+      }
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("form-data; name=file; filename=filename.png");
+        ASSERT(parsed == solution);
+      }
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("form-data;name=file;filename=filename.png");
+        ASSERT(parsed == solution);
+      }
+    }
+    {
+      SimpleWeb::CaseInsensitiveMultimap solution = {{"form-data", ""}, {"name", "fi le"}, {"filename", "file name.png"}};
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("form-data; name=\"fi le\"; filename=\"file name.png\"");
+        ASSERT(parsed == solution);
+      }
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("form-data; name=\"fi%20le\"; filename=\"file%20name.png\"");
+        ASSERT(parsed == solution);
+      }
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("form-data; name=fi le; filename=file name.png");
+        ASSERT(parsed == solution);
+      }
+      {
+        auto parsed = SimpleWeb::HttpHeader::FieldValue::SemicolonSeparatedAttributes::parse("form-data; name=fi%20le; filename=file%20name.png");
+        ASSERT(parsed == solution);
+      }
+    }
+  }
+
+  ASSERT(SimpleWeb::Date::to_string(std::chrono::system_clock::now()).size() == 29);
 }
diff --git a/third_party/Simple-web-server/repo/tests/status_code_test.cpp b/third_party/Simple-web-server/repo/tests/status_code_test.cpp
new file mode 100644
index 0000000000..1b784d43fa
--- /dev/null
+++ b/third_party/Simple-web-server/repo/tests/status_code_test.cpp
@@ -0,0 +1,32 @@
+#include "assert.hpp"
+#include "status_code.hpp"
+
+using namespace SimpleWeb;
+
+
+int main() {
+  ASSERT(status_code("") == StatusCode::unknown);
+  ASSERT(status_code("Error") == StatusCode::unknown);
+  ASSERT(status_code("000 Error") == StatusCode::unknown);
+  ASSERT(status_code(StatusCode::unknown) == "");
+  ASSERT(static_cast<int>(status_code("050 Custom")) == 50);
+  ASSERT(static_cast<int>(status_code("950 Custom")) == 950);
+  ASSERT(status_code("100 Continue") == StatusCode::information_continue);
+  ASSERT(status_code("100 C") == StatusCode::information_continue);
+  ASSERT(status_code("100") == StatusCode::information_continue);
+  ASSERT(status_code(StatusCode::information_continue) == "100 Continue");
+  ASSERT(status_code("200 OK") == StatusCode::success_ok);
+  ASSERT(status_code(StatusCode::success_ok) == "200 OK");
+  ASSERT(status_code("208 Already Reported") == StatusCode::success_already_reported);
+  ASSERT(status_code(StatusCode::success_already_reported) == "208 Already Reported");
+  ASSERT(status_code("308 Permanent Redirect") == StatusCode::redirection_permanent_redirect);
+  ASSERT(status_code(StatusCode::redirection_permanent_redirect) == "308 Permanent Redirect");
+  ASSERT(status_code("404 Not Found") == StatusCode::client_error_not_found);
+  ASSERT(status_code(StatusCode::client_error_not_found) == "404 Not Found");
+  ASSERT(status_code("502 Bad Gateway") == StatusCode::server_error_bad_gateway);
+  ASSERT(status_code(StatusCode::server_error_bad_gateway) == "502 Bad Gateway");
+  ASSERT(status_code("504 Gateway Timeout") == StatusCode::server_error_gateway_timeout);
+  ASSERT(status_code(StatusCode::server_error_gateway_timeout) == "504 Gateway Timeout");
+  ASSERT(status_code("511 Network Authentication Required") == StatusCode::server_error_network_authentication_required);
+  ASSERT(status_code(StatusCode::server_error_network_authentication_required) == "511 Network Authentication Required");
+}
diff --git a/third_party/Simple-web-server/repo/utility.hpp b/third_party/Simple-web-server/repo/utility.hpp
new file mode 100644
index 0000000000..cac7dfa442
--- /dev/null
+++ b/third_party/Simple-web-server/repo/utility.hpp
@@ -0,0 +1,480 @@
+#ifndef SIMPLE_WEB_UTILITY_HPP
+#define SIMPLE_WEB_UTILITY_HPP
+
+#include "status_code.hpp"
+#include <atomic>
+#include <chrono>
+#include <cstdlib>
+#include <ctime>
+#include <iostream>
+#include <memory>
+#include <mutex>
+#include <string>
+#include <unordered_map>
+
+#ifndef SW_DEPRECATED
+#if defined(__GNUC__) || defined(__clang__)
+#define SW_DEPRECATED __attribute__((deprecated))
+#elif defined(_MSC_VER)
+#define SW_DEPRECATED __declspec(deprecated)
+#else
+#define SW_DEPRECATED
+#endif
+#endif
+
+#if __cplusplus > 201402L || _MSVC_LANG > 201402L
+#include <string_view>
+namespace SimpleWeb {
+  using string_view = std::string_view;
+}
+#elif !defined(ASIO_STANDALONE)
+#include <boost/utility/string_ref.hpp>
+namespace SimpleWeb {
+  using string_view = boost::string_ref;
+}
+#else
+namespace SimpleWeb {
+  using string_view = const std::string &;
+}
+#endif
+
+namespace SimpleWeb {
+  inline bool case_insensitive_equal(const std::string &str1, const std::string &str2) noexcept {
+    return str1.size() == str2.size() &&
+           std::equal(str1.begin(), str1.end(), str2.begin(), [](char a, char b) {
+             return tolower(a) == tolower(b);
+           });
+  }
+  class CaseInsensitiveEqual {
+  public:
+    bool operator()(const std::string &str1, const std::string &str2) const noexcept {
+      return case_insensitive_equal(str1, str2);
+    }
+  };
+  // Based on https://stackoverflow.com/questions/2590677/how-do-i-combine-hash-values-in-c0x/2595226#2595226
+  class CaseInsensitiveHash {
+  public:
+    std::size_t operator()(const std::string &str) const noexcept {
+      std::size_t h = 0;
+      std::hash<int> hash;
+      for(auto c : str)
+        h ^= hash(tolower(c)) + 0x9e3779b9 + (h << 6) + (h >> 2);
+      return h;
+    }
+  };
+
+  using CaseInsensitiveMultimap = std::unordered_multimap<std::string, std::string, CaseInsensitiveHash, CaseInsensitiveEqual>;
+
+  /// Percent encoding and decoding
+  class Percent {
+  public:
+    /// Returns percent-encoded string
+    static std::string encode(const std::string &value) noexcept {
+      static auto hex_chars = "0123456789ABCDEF";
+
+      std::string result;
+      result.reserve(value.size()); // Minimum size of result
+
+      for(auto &chr : value) {
+        if(!((chr >= '0' && chr <= '9') || (chr >= 'A' && chr <= 'Z') || (chr >= 'a' && chr <= 'z') || chr == '-' || chr == '.' || chr == '_' || chr == '~'))
+          result += std::string("%") + hex_chars[static_cast<unsigned char>(chr) >> 4] + hex_chars[static_cast<unsigned char>(chr) & 15];
+        else
+          result += chr;
+      }
+
+      return result;
+    }
+
+    /// Returns percent-decoded string
+    static std::string decode(const std::string &value) noexcept {
+      std::string result;
+      result.reserve(value.size() / 3 + (value.size() % 3)); // Minimum size of result
+
+      for(std::size_t i = 0; i < value.size(); ++i) {
+        auto &chr = value[i];
+        if(chr == '%' && i + 2 < value.size()) {
+          auto hex = value.substr(i + 1, 2);
+          auto decoded_chr = static_cast<char>(std::strtol(hex.c_str(), nullptr, 16));
+          result += decoded_chr;
+          i += 2;
+        }
+        else if(chr == '+')
+          result += ' ';
+        else
+          result += chr;
+      }
+
+      return result;
+    }
+  };
+
+  /// Query string creation and parsing
+  class QueryString {
+  public:
+    /// Returns query string created from given field names and values
+    static std::string create(const CaseInsensitiveMultimap &fields) noexcept {
+      std::string result;
+
+      bool first = true;
+      for(auto &field : fields) {
+        result += (!first ? "&" : "") + field.first + '=' + Percent::encode(field.second);
+        first = false;
+      }
+
+      return result;
+    }
+
+    /// Returns query keys with percent-decoded values.
+    static CaseInsensitiveMultimap parse(const std::string &query_string) noexcept {
+      CaseInsensitiveMultimap result;
+
+      if(query_string.empty())
+        return result;
+
+      std::size_t name_pos = 0;
+      auto name_end_pos = std::string::npos;
+      auto value_pos = std::string::npos;
+      for(std::size_t c = 0; c < query_string.size(); ++c) {
+        if(query_string[c] == '&') {
+          auto name = query_string.substr(name_pos, (name_end_pos == std::string::npos ? c : name_end_pos) - name_pos);
+          if(!name.empty()) {
+            auto value = value_pos == std::string::npos ? std::string() : query_string.substr(value_pos, c - value_pos);
+            result.emplace(std::move(name), Percent::decode(value));
+          }
+          name_pos = c + 1;
+          name_end_pos = std::string::npos;
+          value_pos = std::string::npos;
+        }
+        else if(query_string[c] == '=' && name_end_pos == std::string::npos) {
+          name_end_pos = c;
+          value_pos = c + 1;
+        }
+      }
+      if(name_pos < query_string.size()) {
+        auto name = query_string.substr(name_pos, (name_end_pos == std::string::npos ? std::string::npos : name_end_pos - name_pos));
+        if(!name.empty()) {
+          auto value = value_pos >= query_string.size() ? std::string() : query_string.substr(value_pos);
+          result.emplace(std::move(name), Percent::decode(value));
+        }
+      }
+
+      return result;
+    }
+  };
+
+  class HttpHeader {
+  public:
+    /// Parse header fields from stream
+    static CaseInsensitiveMultimap parse(std::istream &stream) noexcept {
+      CaseInsensitiveMultimap result;
+      std::string line;
+      std::size_t param_end;
+      while(getline(stream, line) && (param_end = line.find(':')) != std::string::npos) {
+        std::size_t value_start = param_end + 1;
+        while(value_start + 1 < line.size() && line[value_start] == ' ')
+          ++value_start;
+        if(value_start < line.size())
+          result.emplace(line.substr(0, param_end), line.substr(value_start, line.size() - value_start - (line.back() == '\r' ? 1 : 0)));
+      }
+      return result;
+    }
+
+    class FieldValue {
+    public:
+      class SemicolonSeparatedAttributes {
+      public:
+        /// Parse Set-Cookie or Content-Disposition from given header field value.
+        /// Attribute values are percent-decoded.
+        static CaseInsensitiveMultimap parse(const std::string &value) {
+          CaseInsensitiveMultimap result;
+
+          std::size_t name_start_pos = std::string::npos;
+          std::size_t name_end_pos = std::string::npos;
+          std::size_t value_start_pos = std::string::npos;
+          for(std::size_t c = 0; c < value.size(); ++c) {
+            if(name_start_pos == std::string::npos) {
+              if(value[c] != ' ' && value[c] != ';')
+                name_start_pos = c;
+            }
+            else {
+              if(name_end_pos == std::string::npos) {
+                if(value[c] == ';') {
+                  result.emplace(value.substr(name_start_pos, c - name_start_pos), std::string());
+                  name_start_pos = std::string::npos;
+                }
+                else if(value[c] == '=')
+                  name_end_pos = c;
+              }
+              else {
+                if(value_start_pos == std::string::npos) {
+                  if(value[c] == '"' && c + 1 < value.size())
+                    value_start_pos = c + 1;
+                  else
+                    value_start_pos = c;
+                }
+                else if(value[c] == '"' || value[c] == ';') {
+                  result.emplace(value.substr(name_start_pos, name_end_pos - name_start_pos), Percent::decode(value.substr(value_start_pos, c - value_start_pos)));
+                  name_start_pos = std::string::npos;
+                  name_end_pos = std::string::npos;
+                  value_start_pos = std::string::npos;
+                }
+              }
+            }
+          }
+          if(name_start_pos != std::string::npos) {
+            if(name_end_pos == std::string::npos)
+              result.emplace(value.substr(name_start_pos), std::string());
+            else if(value_start_pos != std::string::npos) {
+              if(value.back() == '"')
+                result.emplace(value.substr(name_start_pos, name_end_pos - name_start_pos), Percent::decode(value.substr(value_start_pos, value.size() - 1)));
+              else
+                result.emplace(value.substr(name_start_pos, name_end_pos - name_start_pos), Percent::decode(value.substr(value_start_pos)));
+            }
+          }
+
+          return result;
+        }
+      };
+    };
+  };
+
+  class RequestMessage {
+  public:
+    /** Parse request line and header fields from a request stream.
+     *
+     * @param[in]  stream       Stream to parse.
+     * @param[out] method       HTTP method.
+     * @param[out] path         Path from request URI.
+     * @param[out] query_string Query string from request URI.
+     * @param[out] version      HTTP version.
+     * @param[out] header       Header fields.
+     *
+     * @return True if stream is parsed successfully, false if not.
+     */
+    static bool parse(std::istream &stream, std::string &method, std::string &path, std::string &query_string, std::string &version, CaseInsensitiveMultimap &header) noexcept {
+      std::string line;
+      std::size_t method_end;
+      if(getline(stream, line) && (method_end = line.find(' ')) != std::string::npos) {
+        method = line.substr(0, method_end);
+
+        std::size_t query_start = std::string::npos;
+        std::size_t path_and_query_string_end = std::string::npos;
+        for(std::size_t i = method_end + 1; i < line.size(); ++i) {
+          if(line[i] == '?' && (i + 1) < line.size() && query_start == std::string::npos)
+            query_start = i + 1;
+          else if(line[i] == ' ') {
+            path_and_query_string_end = i;
+            break;
+          }
+        }
+        if(path_and_query_string_end != std::string::npos) {
+          if(query_start != std::string::npos) {
+            path = line.substr(method_end + 1, query_start - method_end - 2);
+            query_string = line.substr(query_start, path_and_query_string_end - query_start);
+          }
+          else
+            path = line.substr(method_end + 1, path_and_query_string_end - method_end - 1);
+
+          std::size_t protocol_end;
+          if((protocol_end = line.find('/', path_and_query_string_end + 1)) != std::string::npos) {
+            if(line.compare(path_and_query_string_end + 1, protocol_end - path_and_query_string_end - 1, "HTTP") != 0)
+              return false;
+            version = line.substr(protocol_end + 1, line.size() - protocol_end - 2);
+          }
+          else
+            return false;
+
+          header = HttpHeader::parse(stream);
+        }
+        else
+          return false;
+      }
+      else
+        return false;
+      return true;
+    }
+  };
+
+  class ResponseMessage {
+  public:
+    /** Parse status line and header fields from a response stream.
+     *
+     * @param[in]  stream      Stream to parse.
+     * @param[out] version     HTTP version.
+     * @param[out] status_code HTTP status code.
+     * @param[out] header      Header fields.
+     *
+     * @return True if stream is parsed successfully, false if not.
+     */
+    static bool parse(std::istream &stream, std::string &version, std::string &status_code, CaseInsensitiveMultimap &header) noexcept {
+      std::string line;
+      std::size_t version_end;
+      if(getline(stream, line) && (version_end = line.find(' ')) != std::string::npos) {
+        if(5 < line.size())
+          version = line.substr(5, version_end - 5);
+        else
+          return false;
+        if((version_end + 1) < line.size())
+          status_code = line.substr(version_end + 1, line.size() - (version_end + 1) - (line.back() == '\r' ? 1 : 0));
+        else
+          return false;
+
+        header = HttpHeader::parse(stream);
+      }
+      else
+        return false;
+      return true;
+    }
+  };
+
+  /// Date class working with formats specified in RFC 7231 Date/Time Formats
+  class Date {
+  public:
+    /// Returns the given std::chrono::system_clock::time_point as a string with the following format: Wed, 31 Jul 2019 11:34:23 GMT.
+    static std::string to_string(const std::chrono::system_clock::time_point time_point) noexcept {
+      static std::string result_cache;
+      static std::chrono::system_clock::time_point last_time_point;
+
+      static std::mutex mutex;
+      std::lock_guard<std::mutex> lock(mutex);
+
+      if(std::chrono::duration_cast<std::chrono::seconds>(time_point - last_time_point).count() == 0 && !result_cache.empty())
+        return result_cache;
+
+      last_time_point = time_point;
+
+      std::string result;
+      result.reserve(29);
+
+      auto time = std::chrono::system_clock::to_time_t(time_point);
+      tm tm;
+#if defined(_MSC_VER) || defined(__MINGW32__)
+      if(gmtime_s(&tm, &time) != 0)
+        return {};
+      auto gmtime = &tm;
+#else
+      auto gmtime = gmtime_r(&time, &tm);
+      if(!gmtime)
+        return {};
+#endif
+
+      switch(gmtime->tm_wday) {
+      case 0: result += "Sun, "; break;
+      case 1: result += "Mon, "; break;
+      case 2: result += "Tue, "; break;
+      case 3: result += "Wed, "; break;
+      case 4: result += "Thu, "; break;
+      case 5: result += "Fri, "; break;
+      case 6: result += "Sat, "; break;
+      }
+
+      result += gmtime->tm_mday < 10 ? '0' : static_cast<char>(gmtime->tm_mday / 10 + 48);
+      result += static_cast<char>(gmtime->tm_mday % 10 + 48);
+
+      switch(gmtime->tm_mon) {
+      case 0: result += " Jan "; break;
+      case 1: result += " Feb "; break;
+      case 2: result += " Mar "; break;
+      case 3: result += " Apr "; break;
+      case 4: result += " May "; break;
+      case 5: result += " Jun "; break;
+      case 6: result += " Jul "; break;
+      case 7: result += " Aug "; break;
+      case 8: result += " Sep "; break;
+      case 9: result += " Oct "; break;
+      case 10: result += " Nov "; break;
+      case 11: result += " Dec "; break;
+      }
+
+      auto year = gmtime->tm_year + 1900;
+      result += static_cast<char>(year / 1000 + 48);
+      result += static_cast<char>((year / 100) % 10 + 48);
+      result += static_cast<char>((year / 10) % 10 + 48);
+      result += static_cast<char>(year % 10 + 48);
+      result += ' ';
+
+      result += gmtime->tm_hour < 10 ? '0' : static_cast<char>(gmtime->tm_hour / 10 + 48);
+      result += static_cast<char>(gmtime->tm_hour % 10 + 48);
+      result += ':';
+
+      result += gmtime->tm_min < 10 ? '0' : static_cast<char>(gmtime->tm_min / 10 + 48);
+      result += static_cast<char>(gmtime->tm_min % 10 + 48);
+      result += ':';
+
+      result += gmtime->tm_sec < 10 ? '0' : static_cast<char>(gmtime->tm_sec / 10 + 48);
+      result += static_cast<char>(gmtime->tm_sec % 10 + 48);
+
+      result += " GMT";
+
+      result_cache = result;
+      return result;
+    }
+  };
+} // namespace SimpleWeb
+
+#ifdef __SSE2__
+#include <emmintrin.h>
+namespace SimpleWeb {
+  inline void spin_loop_pause() noexcept { _mm_pause(); }
+} // namespace SimpleWeb
+// TODO: need verification that the following checks are correct:
+#elif defined(_MSC_VER) && _MSC_VER >= 1800 && (defined(_M_X64) || defined(_M_IX86))
+#include <intrin.h>
+namespace SimpleWeb {
+  inline void spin_loop_pause() noexcept { _mm_pause(); }
+} // namespace SimpleWeb
+#else
+namespace SimpleWeb {
+  inline void spin_loop_pause() noexcept {}
+} // namespace SimpleWeb
+#endif
+
+namespace SimpleWeb {
+  /// Makes it possible to for instance cancel Asio handlers without stopping asio::io_service.
+  class ScopeRunner {
+    /// Scope count that is set to -1 if scopes are to be canceled.
+    std::atomic<long> count;
+
+  public:
+    class SharedLock {
+      friend class ScopeRunner;
+      std::atomic<long> &count;
+      SharedLock(std::atomic<long> &count) noexcept : count(count) {}
+      SharedLock &operator=(const SharedLock &) = delete;
+      SharedLock(const SharedLock &) = delete;
+
+    public:
+      ~SharedLock() noexcept {
+        count.fetch_sub(1);
+      }
+    };
+
+    ScopeRunner() noexcept : count(0) {}
+
+    /// Returns nullptr if scope should be exited, or a shared lock otherwise.
+    /// The shared lock ensures that a potential destructor call is delayed until all locks are released.
+    std::unique_ptr<SharedLock> continue_lock() noexcept {
+      long expected = count;
+      while(expected >= 0 && !count.compare_exchange_weak(expected, expected + 1))
+        spin_loop_pause();
+
+      if(expected < 0)
+        return nullptr;
+      else
+        return std::unique_ptr<SharedLock>(new SharedLock(count));
+    }
+
+    /// Blocks until all shared locks are released, then prevents future shared locks.
+    void stop() noexcept {
+      long expected = 0;
+      while(!count.compare_exchange_weak(expected, -1)) {
+        if(expected < 0)
+          return;
+        expected = 0;
+        spin_loop_pause();
+      }
+    }
+  };
+} // namespace SimpleWeb
+
+#endif // SIMPLE_WEB_UTILITY_HPP
-- 
2.39.0

