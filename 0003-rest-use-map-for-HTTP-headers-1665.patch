From 1fd0572e7ceeb0f7dff59f7a9bdbe8519fb332ec Mon Sep 17 00:00:00 2001
Message-Id: <1fd0572e7ceeb0f7dff59f7a9bdbe8519fb332ec.1673530580.git.stefan@agner.ch>
In-Reply-To: <c2dc2a9940d1f9809403d4dfb28e1f942ef90bab.1673530580.git.stefan@agner.ch>
References: <c2dc2a9940d1f9809403d4dfb28e1f942ef90bab.1673530580.git.stefan@agner.ch>
From: Stefan Agner <stefan@agner.ch>
Date: Tue, 20 Dec 2022 07:22:01 +0100
Subject: [PATCH 03/10] [rest] use map for HTTP headers (#1665)

(cherry picked from commit 2ff52570fdb1a2daa7c93e0aae7e6cb551322252)
---
 src/rest/response.cpp | 20 ++++++--------------
 src/rest/response.hpp | 17 ++++++++---------
 2 files changed, 14 insertions(+), 23 deletions(-)

diff --git a/src/rest/response.cpp b/src/rest/response.cpp
index 64208aacd5..2cdfc80ea5 100644
--- a/src/rest/response.cpp
+++ b/src/rest/response.cpp
@@ -48,17 +48,10 @@ Response::Response(void)
     mProtocol = "HTTP/1.1 ";
 
     // Pre-defined headers
-    mHeaderField.push_back("Content-Type");
-    mHeaderValue.push_back(OT_REST_RESPONSE_CONTENT_TYPE_JSON);
-
-    mHeaderField.push_back("Access-Control-Allow-Origin");
-    mHeaderValue.push_back(OT_REST_RESPONSE_ACCESS_CONTROL_ALLOW_ORIGIN);
-
-    mHeaderField.push_back("Access-Control-Allow-Methods");
-    mHeaderValue.push_back(OT_REST_RESPONSE_ACCESS_CONTROL_ALLOW_METHOD);
-
-    mHeaderField.push_back("Access-Control-Allow-Headers");
-    mHeaderValue.push_back(OT_REST_RESPONSE_ACCESS_CONTROL_ALLOW_HEADERS);
+    mHeaders["Content-Type"]                 = OT_REST_RESPONSE_CONTENT_TYPE_JSON;
+    mHeaders["Access-Control-Allow-Origin"]  = OT_REST_RESPONSE_ACCESS_CONTROL_ALLOW_ORIGIN;
+    mHeaders["Access-Control-Allow-Methods"] = OT_REST_RESPONSE_ACCESS_CONTROL_ALLOW_METHOD;
+    mHeaders["Access-Control-Allow-Headers"] = OT_REST_RESPONSE_ACCESS_CONTROL_ALLOW_HEADERS;
 }
 
 void Response::SetComplete()
@@ -108,13 +101,12 @@ bool Response::NeedCallback(void)
 
 std::string Response::Serialize(void) const
 {
-    size_t      index;
     std::string spacer = "\r\n";
     std::string ret(mProtocol + " " + mCode);
 
-    for (index = 0; index < mHeaderField.size(); index++)
+    for (const auto &header : mHeaders)
     {
-        ret += (spacer + mHeaderField[index] + ": " + mHeaderValue[index]);
+        ret += (spacer + header.first + ": " + header.second);
     }
     ret += spacer + "Content-Length: " + std::to_string(mBody.size());
     ret += (spacer + spacer + mBody);
diff --git a/src/rest/response.hpp b/src/rest/response.hpp
index ecfe98f4de..8ae24ffe30 100644
--- a/src/rest/response.hpp
+++ b/src/rest/response.hpp
@@ -35,8 +35,8 @@
 #define OTBR_REST_RESPONSE_HPP_
 
 #include <chrono>
+#include <map>
 #include <string>
-#include <vector>
 
 #include "rest/types.hpp"
 
@@ -136,14 +136,13 @@ public:
     std::string Serialize(void) const;
 
 private:
-    bool                     mCallback;
-    std::vector<std::string> mHeaderField;
-    std::vector<std::string> mHeaderValue;
-    std::string              mCode;
-    std::string              mProtocol;
-    std::string              mBody;
-    bool                     mComplete;
-    steady_clock::time_point mStartTime;
+    bool                               mCallback;
+    std::map<std::string, std::string> mHeaders;
+    std::string                        mCode;
+    std::string                        mProtocol;
+    std::string                        mBody;
+    bool                               mComplete;
+    steady_clock::time_point           mStartTime;
 };
 
 } // namespace rest
-- 
2.39.0

